-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sha512_verify is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    input_r_TDATA : IN STD_LOGIC_VECTOR (583 downto 0);
    input_r_TVALID : IN STD_LOGIC;
    input_r_TREADY : OUT STD_LOGIC;
    output_r_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    output_r_TVALID : OUT STD_LOGIC;
    output_r_TREADY : IN STD_LOGIC );
end;


architecture behav of sha512_verify is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "sha512_verify_sha512_verify,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu280-fsvh2892-2L-e,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.898375,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=14958,HLS_SYN_LUT=13691,HLS_VERSION=2022_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv512_lc_2 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal output_r_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_sha512Top_512u_512u_s_fu_74_output2_din : STD_LOGIC_VECTOR (582 downto 0);
    signal grp_sha512Top_512u_512u_s_fu_74_output2_write : STD_LOGIC;
    signal grp_sha512Top_512u_512u_s_fu_74_last_input_tdata : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_sha512Top_512u_512u_s_fu_74_input_r_TREADY : STD_LOGIC;
    signal grp_sha512Top_512u_512u_s_fu_74_last_input_tdata_ap_vld : STD_LOGIC;
    signal grp_sha512Top_512u_512u_s_fu_74_ap_start : STD_LOGIC;
    signal grp_sha512Top_512u_512u_s_fu_74_ap_done : STD_LOGIC;
    signal grp_sha512Top_512u_512u_s_fu_74_ap_ready : STD_LOGIC;
    signal grp_sha512Top_512u_512u_s_fu_74_ap_idle : STD_LOGIC;
    signal grp_sha512Top_512u_512u_s_fu_74_ap_continue : STD_LOGIC;
    signal grp_sha512Top_512u_512u_s_fu_74_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_sync_grp_sha512Top_512u_512u_s_fu_74_ap_ready : STD_LOGIC;
    signal ap_sync_grp_sha512Top_512u_512u_s_fu_74_ap_done : STD_LOGIC;
    signal ap_block_state3_on_subcall_done : BOOLEAN;
    signal ap_sync_reg_grp_sha512Top_512u_512u_s_fu_74_ap_ready : STD_LOGIC := '0';
    signal ap_sync_reg_grp_sha512Top_512u_512u_s_fu_74_ap_done : STD_LOGIC := '0';
    signal output2_full_n : STD_LOGIC;
    signal output2_write : STD_LOGIC;
    signal last_tdata_V_fu_58 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal output2_dout : STD_LOGIC_VECTOR (582 downto 0);
    signal output2_empty_n : STD_LOGIC;
    signal output2_read : STD_LOGIC;
    signal ap_block_state4 : BOOLEAN;
    signal trunc_ln145_fu_87_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal result_V_fu_94_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal regslice_both_output_r_U_apdone_blk : STD_LOGIC;
    signal ap_block_state5 : BOOLEAN;
    signal regslice_both_input_r_U_apdone_blk : STD_LOGIC;
    signal input_r_TDATA_int_regslice : STD_LOGIC_VECTOR (583 downto 0);
    signal input_r_TVALID_int_regslice : STD_LOGIC;
    signal input_r_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_input_r_U_ack_in : STD_LOGIC;
    signal output_r_TDATA_int_regslice : STD_LOGIC_VECTOR (7 downto 0);
    signal output_r_TVALID_int_regslice : STD_LOGIC;
    signal output_r_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_output_r_U_vld_out : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component sha512_verify_sha512Top_512u_512u_s IS
    port (
        input_r_TDATA : IN STD_LOGIC_VECTOR (583 downto 0);
        output2_din : OUT STD_LOGIC_VECTOR (582 downto 0);
        output2_full_n : IN STD_LOGIC;
        output2_write : OUT STD_LOGIC;
        last_input_tdata : OUT STD_LOGIC_VECTOR (511 downto 0);
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        input_r_TVALID : IN STD_LOGIC;
        input_r_TREADY : OUT STD_LOGIC;
        last_input_tdata_ap_vld : OUT STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component sha512_verify_fifo_w583_d32_D IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (582 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (582 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component sha512_verify_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    grp_sha512Top_512u_512u_s_fu_74 : component sha512_verify_sha512Top_512u_512u_s
    port map (
        input_r_TDATA => input_r_TDATA_int_regslice,
        output2_din => grp_sha512Top_512u_512u_s_fu_74_output2_din,
        output2_full_n => output2_full_n,
        output2_write => grp_sha512Top_512u_512u_s_fu_74_output2_write,
        last_input_tdata => grp_sha512Top_512u_512u_s_fu_74_last_input_tdata,
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        input_r_TVALID => input_r_TVALID_int_regslice,
        input_r_TREADY => grp_sha512Top_512u_512u_s_fu_74_input_r_TREADY,
        last_input_tdata_ap_vld => grp_sha512Top_512u_512u_s_fu_74_last_input_tdata_ap_vld,
        ap_start => grp_sha512Top_512u_512u_s_fu_74_ap_start,
        ap_done => grp_sha512Top_512u_512u_s_fu_74_ap_done,
        ap_ready => grp_sha512Top_512u_512u_s_fu_74_ap_ready,
        ap_idle => grp_sha512Top_512u_512u_s_fu_74_ap_idle,
        ap_continue => grp_sha512Top_512u_512u_s_fu_74_ap_continue);

    output2_fifo_U : component sha512_verify_fifo_w583_d32_D
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_sha512Top_512u_512u_s_fu_74_output2_din,
        if_full_n => output2_full_n,
        if_write => output2_write,
        if_dout => output2_dout,
        if_empty_n => output2_empty_n,
        if_read => output2_read);

    regslice_both_input_r_U : component sha512_verify_regslice_both
    generic map (
        DataWidth => 584)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_r_TDATA,
        vld_in => input_r_TVALID,
        ack_in => regslice_both_input_r_U_ack_in,
        data_out => input_r_TDATA_int_regslice,
        vld_out => input_r_TVALID_int_regslice,
        ack_out => input_r_TREADY_int_regslice,
        apdone_blk => regslice_both_input_r_U_apdone_blk);

    regslice_both_output_r_U : component sha512_verify_regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => output_r_TDATA_int_regslice,
        vld_in => output_r_TVALID_int_regslice,
        ack_in => output_r_TREADY_int_regslice,
        data_out => output_r_TDATA,
        vld_out => regslice_both_output_r_U_vld_out,
        ack_out => output_r_TREADY,
        apdone_blk => regslice_both_output_r_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_sync_reg_grp_sha512Top_512u_512u_s_fu_74_ap_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_sha512Top_512u_512u_s_fu_74_ap_done <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_sync_reg_grp_sha512Top_512u_512u_s_fu_74_ap_done <= ap_const_logic_0;
                elsif ((grp_sha512Top_512u_512u_s_fu_74_ap_done = ap_const_logic_1)) then 
                    ap_sync_reg_grp_sha512Top_512u_512u_s_fu_74_ap_done <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_sha512Top_512u_512u_s_fu_74_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_sha512Top_512u_512u_s_fu_74_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_sync_reg_grp_sha512Top_512u_512u_s_fu_74_ap_ready <= ap_const_logic_0;
                elsif ((grp_sha512Top_512u_512u_s_fu_74_ap_ready = ap_const_logic_1)) then 
                    ap_sync_reg_grp_sha512Top_512u_512u_s_fu_74_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_sha512Top_512u_512u_s_fu_74_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_sha512Top_512u_512u_s_fu_74_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_sync_grp_sha512Top_512u_512u_s_fu_74_ap_ready = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
                    grp_sha512Top_512u_512u_s_fu_74_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sha512Top_512u_512u_s_fu_74_ap_ready = ap_const_logic_1)) then 
                    grp_sha512Top_512u_512u_s_fu_74_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    last_tdata_V_fu_58_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                last_tdata_V_fu_58 <= ap_const_lv512_lc_2;
            elsif (((grp_sha512Top_512u_512u_s_fu_74_last_input_tdata_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                last_tdata_V_fu_58 <= grp_sha512Top_512u_512u_s_fu_74_last_input_tdata;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state3, ap_block_state3_on_subcall_done, output2_empty_n, regslice_both_output_r_U_apdone_blk, output_r_TREADY_int_regslice)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if ((not(((output2_empty_n = ap_const_logic_0) or (output_r_TREADY_int_regslice = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if ((not(((output_r_TREADY_int_regslice = ap_const_logic_0) or (regslice_both_output_r_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_ST_fsm_state1_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(ap_block_state3_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state3_on_subcall_done)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state4_blk_assign_proc : process(output2_empty_n, output_r_TREADY_int_regslice)
    begin
        if (((output2_empty_n = ap_const_logic_0) or (output_r_TREADY_int_regslice = ap_const_logic_0))) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state5_blk_assign_proc : process(regslice_both_output_r_U_apdone_blk, output_r_TREADY_int_regslice)
    begin
        if (((output_r_TREADY_int_regslice = ap_const_logic_0) or (regslice_both_output_r_U_apdone_blk = ap_const_logic_1))) then 
            ap_ST_fsm_state5_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state5_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state3_on_subcall_done_assign_proc : process(ap_sync_grp_sha512Top_512u_512u_s_fu_74_ap_ready, ap_sync_grp_sha512Top_512u_512u_s_fu_74_ap_done)
    begin
                ap_block_state3_on_subcall_done <= ((ap_sync_grp_sha512Top_512u_512u_s_fu_74_ap_ready and ap_sync_grp_sha512Top_512u_512u_s_fu_74_ap_done) = ap_const_logic_0);
    end process;


    ap_block_state4_assign_proc : process(output2_empty_n, output_r_TREADY_int_regslice)
    begin
                ap_block_state4 <= ((output2_empty_n = ap_const_logic_0) or (output_r_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state5_assign_proc : process(regslice_both_output_r_U_apdone_blk, output_r_TREADY_int_regslice)
    begin
                ap_block_state5 <= ((output_r_TREADY_int_regslice = ap_const_logic_0) or (regslice_both_output_r_U_apdone_blk = ap_const_logic_1));
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_grp_sha512Top_512u_512u_s_fu_74_ap_done <= (grp_sha512Top_512u_512u_s_fu_74_ap_done or ap_sync_reg_grp_sha512Top_512u_512u_s_fu_74_ap_done);
    ap_sync_grp_sha512Top_512u_512u_s_fu_74_ap_ready <= (grp_sha512Top_512u_512u_s_fu_74_ap_ready or ap_sync_reg_grp_sha512Top_512u_512u_s_fu_74_ap_ready);

    grp_sha512Top_512u_512u_s_fu_74_ap_continue_assign_proc : process(ap_CS_fsm_state3, ap_block_state3_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            grp_sha512Top_512u_512u_s_fu_74_ap_continue <= ap_const_logic_1;
        else 
            grp_sha512Top_512u_512u_s_fu_74_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    grp_sha512Top_512u_512u_s_fu_74_ap_start <= grp_sha512Top_512u_512u_s_fu_74_ap_start_reg;
    input_r_TREADY <= regslice_both_input_r_U_ack_in;

    input_r_TREADY_int_regslice_assign_proc : process(grp_sha512Top_512u_512u_s_fu_74_input_r_TREADY, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            input_r_TREADY_int_regslice <= grp_sha512Top_512u_512u_s_fu_74_input_r_TREADY;
        else 
            input_r_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    output2_read_assign_proc : process(ap_CS_fsm_state4, output2_empty_n, output_r_TREADY_int_regslice)
    begin
        if ((not(((output2_empty_n = ap_const_logic_0) or (output_r_TREADY_int_regslice = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            output2_read <= ap_const_logic_1;
        else 
            output2_read <= ap_const_logic_0;
        end if; 
    end process;


    output2_write_assign_proc : process(grp_sha512Top_512u_512u_s_fu_74_output2_write, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            output2_write <= grp_sha512Top_512u_512u_s_fu_74_output2_write;
        else 
            output2_write <= ap_const_logic_0;
        end if; 
    end process;


    output_r_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, output_r_TREADY_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            output_r_TDATA_blk_n <= output_r_TREADY_int_regslice;
        else 
            output_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    output_r_TDATA_int_regslice <= std_logic_vector(IEEE.numeric_std.resize(unsigned(result_V_fu_94_p2),8));
    output_r_TVALID <= regslice_both_output_r_U_vld_out;

    output_r_TVALID_int_regslice_assign_proc : process(ap_CS_fsm_state4, output2_empty_n, output_r_TREADY_int_regslice)
    begin
        if ((not(((output2_empty_n = ap_const_logic_0) or (output_r_TREADY_int_regslice = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            output_r_TVALID_int_regslice <= ap_const_logic_1;
        else 
            output_r_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    result_V_fu_94_p2 <= "0" when (trunc_ln145_fu_87_p1 = last_tdata_V_fu_58) else "1";
    trunc_ln145_fu_87_p1 <= output2_dout(512 - 1 downto 0);
end behav;
