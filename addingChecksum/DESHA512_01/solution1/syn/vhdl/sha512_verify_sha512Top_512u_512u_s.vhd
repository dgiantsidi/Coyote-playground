-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sha512_verify_sha512Top_512u_512u_s is
port (
    input_r_TDATA : IN STD_LOGIC_VECTOR (583 downto 0);
    output2_din : OUT STD_LOGIC_VECTOR (582 downto 0);
    output2_full_n : IN STD_LOGIC;
    output2_write : OUT STD_LOGIC;
    last_input_tdata : OUT STD_LOGIC_VECTOR (511 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    input_r_TVALID : IN STD_LOGIC;
    input_r_TREADY : OUT STD_LOGIC;
    last_input_tdata_ap_vld : OUT STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of sha512_verify_sha512Top_512u_512u_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';

attribute shreg_extract : string;
    signal preProcessing_U0_ap_start : STD_LOGIC;
    signal preProcessing_U0_start_full_n : STD_LOGIC;
    signal preProcessing_U0_ap_done : STD_LOGIC;
    signal preProcessing_U0_ap_continue : STD_LOGIC;
    signal preProcessing_U0_ap_idle : STD_LOGIC;
    signal preProcessing_U0_ap_ready : STD_LOGIC;
    signal preProcessing_U0_start_out : STD_LOGIC;
    signal preProcessing_U0_start_write : STD_LOGIC;
    signal preProcessing_U0_input_r_TREADY : STD_LOGIC;
    signal preProcessing_U0_blk_strm_din : STD_LOGIC_VECTOR (1023 downto 0);
    signal preProcessing_U0_blk_strm_write : STD_LOGIC;
    signal preProcessing_U0_end_nblk_strm3_din : STD_LOGIC_VECTOR (0 downto 0);
    signal preProcessing_U0_end_nblk_strm3_write : STD_LOGIC;
    signal preProcessing_U0_tkeep_strm7_din : STD_LOGIC_VECTOR (63 downto 0);
    signal preProcessing_U0_tkeep_strm7_write : STD_LOGIC;
    signal preProcessing_U0_tid_strm8_din : STD_LOGIC_VECTOR (5 downto 0);
    signal preProcessing_U0_tid_strm8_write : STD_LOGIC;
    signal preProcessing_U0_last_input_tdata : STD_LOGIC_VECTOR (511 downto 0);
    signal preProcessing_U0_last_input_tdata_ap_vld : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal dup_strm_128u_U0_ap_start : STD_LOGIC;
    signal dup_strm_128u_U0_ap_done : STD_LOGIC;
    signal dup_strm_128u_U0_ap_continue : STD_LOGIC;
    signal dup_strm_128u_U0_ap_idle : STD_LOGIC;
    signal dup_strm_128u_U0_ap_ready : STD_LOGIC;
    signal dup_strm_128u_U0_end_nblk_strm3_read : STD_LOGIC;
    signal dup_strm_128u_U0_end_nblk_strm14_din : STD_LOGIC_VECTOR (0 downto 0);
    signal dup_strm_128u_U0_end_nblk_strm14_write : STD_LOGIC;
    signal dup_strm_128u_U0_end_nblk_strm25_din : STD_LOGIC_VECTOR (0 downto 0);
    signal dup_strm_128u_U0_end_nblk_strm25_write : STD_LOGIC;
    signal generateMsgSchedule_U0_ap_start : STD_LOGIC;
    signal generateMsgSchedule_U0_ap_done : STD_LOGIC;
    signal generateMsgSchedule_U0_ap_continue : STD_LOGIC;
    signal generateMsgSchedule_U0_ap_idle : STD_LOGIC;
    signal generateMsgSchedule_U0_ap_ready : STD_LOGIC;
    signal generateMsgSchedule_U0_blk_strm_read : STD_LOGIC;
    signal generateMsgSchedule_U0_end_nblk_strm14_read : STD_LOGIC;
    signal generateMsgSchedule_U0_w_strm6_din : STD_LOGIC_VECTOR (63 downto 0);
    signal generateMsgSchedule_U0_w_strm6_write : STD_LOGIC;
    signal SHA512Digest_64u_512u_U0_ap_start : STD_LOGIC;
    signal SHA512Digest_64u_512u_U0_ap_done : STD_LOGIC;
    signal SHA512Digest_64u_512u_U0_ap_continue : STD_LOGIC;
    signal SHA512Digest_64u_512u_U0_ap_idle : STD_LOGIC;
    signal SHA512Digest_64u_512u_U0_ap_ready : STD_LOGIC;
    signal SHA512Digest_64u_512u_U0_w_strm6_read : STD_LOGIC;
    signal SHA512Digest_64u_512u_U0_end_nblk_strm25_read : STD_LOGIC;
    signal SHA512Digest_64u_512u_U0_tkeep_strm7_read : STD_LOGIC;
    signal SHA512Digest_64u_512u_U0_tid_strm8_read : STD_LOGIC;
    signal SHA512Digest_64u_512u_U0_output2_din : STD_LOGIC_VECTOR (582 downto 0);
    signal SHA512Digest_64u_512u_U0_output2_write : STD_LOGIC;
    signal blk_strm_full_n : STD_LOGIC;
    signal blk_strm_dout : STD_LOGIC_VECTOR (1023 downto 0);
    signal blk_strm_num_data_valid : STD_LOGIC_VECTOR (5 downto 0);
    signal blk_strm_fifo_cap : STD_LOGIC_VECTOR (5 downto 0);
    signal blk_strm_empty_n : STD_LOGIC;
    signal end_nblk_strm_full_n : STD_LOGIC;
    signal end_nblk_strm_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal end_nblk_strm_num_data_valid : STD_LOGIC_VECTOR (5 downto 0);
    signal end_nblk_strm_fifo_cap : STD_LOGIC_VECTOR (5 downto 0);
    signal end_nblk_strm_empty_n : STD_LOGIC;
    signal tkeep_strm_full_n : STD_LOGIC;
    signal tkeep_strm_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal tkeep_strm_num_data_valid : STD_LOGIC_VECTOR (5 downto 0);
    signal tkeep_strm_fifo_cap : STD_LOGIC_VECTOR (5 downto 0);
    signal tkeep_strm_empty_n : STD_LOGIC;
    signal tid_strm_full_n : STD_LOGIC;
    signal tid_strm_dout : STD_LOGIC_VECTOR (5 downto 0);
    signal tid_strm_num_data_valid : STD_LOGIC_VECTOR (5 downto 0);
    signal tid_strm_fifo_cap : STD_LOGIC_VECTOR (5 downto 0);
    signal tid_strm_empty_n : STD_LOGIC;
    signal end_nblk_strm1_full_n : STD_LOGIC;
    signal end_nblk_strm1_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal end_nblk_strm1_num_data_valid : STD_LOGIC_VECTOR (5 downto 0);
    signal end_nblk_strm1_fifo_cap : STD_LOGIC_VECTOR (5 downto 0);
    signal end_nblk_strm1_empty_n : STD_LOGIC;
    signal end_nblk_strm2_full_n : STD_LOGIC;
    signal end_nblk_strm2_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal end_nblk_strm2_num_data_valid : STD_LOGIC_VECTOR (5 downto 0);
    signal end_nblk_strm2_fifo_cap : STD_LOGIC_VECTOR (5 downto 0);
    signal end_nblk_strm2_empty_n : STD_LOGIC;
    signal w_strm_full_n : STD_LOGIC;
    signal w_strm_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal w_strm_num_data_valid : STD_LOGIC_VECTOR (5 downto 0);
    signal w_strm_fifo_cap : STD_LOGIC_VECTOR (5 downto 0);
    signal w_strm_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal start_for_dup_strm_128u_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_dup_strm_128u_U0_full_n : STD_LOGIC;
    signal start_for_dup_strm_128u_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_dup_strm_128u_U0_empty_n : STD_LOGIC;
    signal start_for_generateMsgSchedule_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_generateMsgSchedule_U0_full_n : STD_LOGIC;
    signal start_for_generateMsgSchedule_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_generateMsgSchedule_U0_empty_n : STD_LOGIC;
    signal start_for_SHA512Digest_64u_512u_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_SHA512Digest_64u_512u_U0_full_n : STD_LOGIC;
    signal start_for_SHA512Digest_64u_512u_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_SHA512Digest_64u_512u_U0_empty_n : STD_LOGIC;

    component sha512_verify_preProcessing IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        input_r_TDATA : IN STD_LOGIC_VECTOR (583 downto 0);
        input_r_TVALID : IN STD_LOGIC;
        input_r_TREADY : OUT STD_LOGIC;
        blk_strm_din : OUT STD_LOGIC_VECTOR (1023 downto 0);
        blk_strm_num_data_valid : IN STD_LOGIC_VECTOR (5 downto 0);
        blk_strm_fifo_cap : IN STD_LOGIC_VECTOR (5 downto 0);
        blk_strm_full_n : IN STD_LOGIC;
        blk_strm_write : OUT STD_LOGIC;
        end_nblk_strm3_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        end_nblk_strm3_num_data_valid : IN STD_LOGIC_VECTOR (5 downto 0);
        end_nblk_strm3_fifo_cap : IN STD_LOGIC_VECTOR (5 downto 0);
        end_nblk_strm3_full_n : IN STD_LOGIC;
        end_nblk_strm3_write : OUT STD_LOGIC;
        tkeep_strm7_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        tkeep_strm7_num_data_valid : IN STD_LOGIC_VECTOR (5 downto 0);
        tkeep_strm7_fifo_cap : IN STD_LOGIC_VECTOR (5 downto 0);
        tkeep_strm7_full_n : IN STD_LOGIC;
        tkeep_strm7_write : OUT STD_LOGIC;
        tid_strm8_din : OUT STD_LOGIC_VECTOR (5 downto 0);
        tid_strm8_num_data_valid : IN STD_LOGIC_VECTOR (5 downto 0);
        tid_strm8_fifo_cap : IN STD_LOGIC_VECTOR (5 downto 0);
        tid_strm8_full_n : IN STD_LOGIC;
        tid_strm8_write : OUT STD_LOGIC;
        last_input_tdata : OUT STD_LOGIC_VECTOR (511 downto 0);
        last_input_tdata_ap_vld : OUT STD_LOGIC );
    end component;


    component sha512_verify_dup_strm_128u_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        end_nblk_strm3_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        end_nblk_strm3_num_data_valid : IN STD_LOGIC_VECTOR (5 downto 0);
        end_nblk_strm3_fifo_cap : IN STD_LOGIC_VECTOR (5 downto 0);
        end_nblk_strm3_empty_n : IN STD_LOGIC;
        end_nblk_strm3_read : OUT STD_LOGIC;
        end_nblk_strm14_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        end_nblk_strm14_num_data_valid : IN STD_LOGIC_VECTOR (5 downto 0);
        end_nblk_strm14_fifo_cap : IN STD_LOGIC_VECTOR (5 downto 0);
        end_nblk_strm14_full_n : IN STD_LOGIC;
        end_nblk_strm14_write : OUT STD_LOGIC;
        end_nblk_strm25_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        end_nblk_strm25_num_data_valid : IN STD_LOGIC_VECTOR (5 downto 0);
        end_nblk_strm25_fifo_cap : IN STD_LOGIC_VECTOR (5 downto 0);
        end_nblk_strm25_full_n : IN STD_LOGIC;
        end_nblk_strm25_write : OUT STD_LOGIC );
    end component;


    component sha512_verify_generateMsgSchedule IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        blk_strm_dout : IN STD_LOGIC_VECTOR (1023 downto 0);
        blk_strm_num_data_valid : IN STD_LOGIC_VECTOR (5 downto 0);
        blk_strm_fifo_cap : IN STD_LOGIC_VECTOR (5 downto 0);
        blk_strm_empty_n : IN STD_LOGIC;
        blk_strm_read : OUT STD_LOGIC;
        end_nblk_strm14_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        end_nblk_strm14_num_data_valid : IN STD_LOGIC_VECTOR (5 downto 0);
        end_nblk_strm14_fifo_cap : IN STD_LOGIC_VECTOR (5 downto 0);
        end_nblk_strm14_empty_n : IN STD_LOGIC;
        end_nblk_strm14_read : OUT STD_LOGIC;
        w_strm6_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        w_strm6_num_data_valid : IN STD_LOGIC_VECTOR (5 downto 0);
        w_strm6_fifo_cap : IN STD_LOGIC_VECTOR (5 downto 0);
        w_strm6_full_n : IN STD_LOGIC;
        w_strm6_write : OUT STD_LOGIC );
    end component;


    component sha512_verify_SHA512Digest_64u_512u_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        w_strm6_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        w_strm6_num_data_valid : IN STD_LOGIC_VECTOR (5 downto 0);
        w_strm6_fifo_cap : IN STD_LOGIC_VECTOR (5 downto 0);
        w_strm6_empty_n : IN STD_LOGIC;
        w_strm6_read : OUT STD_LOGIC;
        end_nblk_strm25_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        end_nblk_strm25_num_data_valid : IN STD_LOGIC_VECTOR (5 downto 0);
        end_nblk_strm25_fifo_cap : IN STD_LOGIC_VECTOR (5 downto 0);
        end_nblk_strm25_empty_n : IN STD_LOGIC;
        end_nblk_strm25_read : OUT STD_LOGIC;
        tkeep_strm7_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        tkeep_strm7_num_data_valid : IN STD_LOGIC_VECTOR (5 downto 0);
        tkeep_strm7_fifo_cap : IN STD_LOGIC_VECTOR (5 downto 0);
        tkeep_strm7_empty_n : IN STD_LOGIC;
        tkeep_strm7_read : OUT STD_LOGIC;
        tid_strm8_dout : IN STD_LOGIC_VECTOR (5 downto 0);
        tid_strm8_num_data_valid : IN STD_LOGIC_VECTOR (5 downto 0);
        tid_strm8_fifo_cap : IN STD_LOGIC_VECTOR (5 downto 0);
        tid_strm8_empty_n : IN STD_LOGIC;
        tid_strm8_read : OUT STD_LOGIC;
        output2_din : OUT STD_LOGIC_VECTOR (582 downto 0);
        output2_full_n : IN STD_LOGIC;
        output2_write : OUT STD_LOGIC );
    end component;


    component sha512_verify_fifo_w1024_d32_D IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (1023 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (1023 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (5 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (5 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component sha512_verify_fifo_w1_d32_D IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (5 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (5 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component sha512_verify_fifo_w64_d32_D IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (5 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (5 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component sha512_verify_fifo_w6_d32_D IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (5 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (5 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (5 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (5 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component sha512_verify_start_for_dup_strm_128u_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component sha512_verify_start_for_generateMsgSchedule_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component sha512_verify_start_for_SHA512Digest_64u_512u_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    preProcessing_U0 : component sha512_verify_preProcessing
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => preProcessing_U0_ap_start,
        start_full_n => preProcessing_U0_start_full_n,
        ap_done => preProcessing_U0_ap_done,
        ap_continue => preProcessing_U0_ap_continue,
        ap_idle => preProcessing_U0_ap_idle,
        ap_ready => preProcessing_U0_ap_ready,
        start_out => preProcessing_U0_start_out,
        start_write => preProcessing_U0_start_write,
        input_r_TDATA => input_r_TDATA,
        input_r_TVALID => input_r_TVALID,
        input_r_TREADY => preProcessing_U0_input_r_TREADY,
        blk_strm_din => preProcessing_U0_blk_strm_din,
        blk_strm_num_data_valid => blk_strm_num_data_valid,
        blk_strm_fifo_cap => blk_strm_fifo_cap,
        blk_strm_full_n => blk_strm_full_n,
        blk_strm_write => preProcessing_U0_blk_strm_write,
        end_nblk_strm3_din => preProcessing_U0_end_nblk_strm3_din,
        end_nblk_strm3_num_data_valid => end_nblk_strm_num_data_valid,
        end_nblk_strm3_fifo_cap => end_nblk_strm_fifo_cap,
        end_nblk_strm3_full_n => end_nblk_strm_full_n,
        end_nblk_strm3_write => preProcessing_U0_end_nblk_strm3_write,
        tkeep_strm7_din => preProcessing_U0_tkeep_strm7_din,
        tkeep_strm7_num_data_valid => tkeep_strm_num_data_valid,
        tkeep_strm7_fifo_cap => tkeep_strm_fifo_cap,
        tkeep_strm7_full_n => tkeep_strm_full_n,
        tkeep_strm7_write => preProcessing_U0_tkeep_strm7_write,
        tid_strm8_din => preProcessing_U0_tid_strm8_din,
        tid_strm8_num_data_valid => tid_strm_num_data_valid,
        tid_strm8_fifo_cap => tid_strm_fifo_cap,
        tid_strm8_full_n => tid_strm_full_n,
        tid_strm8_write => preProcessing_U0_tid_strm8_write,
        last_input_tdata => preProcessing_U0_last_input_tdata,
        last_input_tdata_ap_vld => preProcessing_U0_last_input_tdata_ap_vld);

    dup_strm_128u_U0 : component sha512_verify_dup_strm_128u_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => dup_strm_128u_U0_ap_start,
        ap_done => dup_strm_128u_U0_ap_done,
        ap_continue => dup_strm_128u_U0_ap_continue,
        ap_idle => dup_strm_128u_U0_ap_idle,
        ap_ready => dup_strm_128u_U0_ap_ready,
        end_nblk_strm3_dout => end_nblk_strm_dout,
        end_nblk_strm3_num_data_valid => end_nblk_strm_num_data_valid,
        end_nblk_strm3_fifo_cap => end_nblk_strm_fifo_cap,
        end_nblk_strm3_empty_n => end_nblk_strm_empty_n,
        end_nblk_strm3_read => dup_strm_128u_U0_end_nblk_strm3_read,
        end_nblk_strm14_din => dup_strm_128u_U0_end_nblk_strm14_din,
        end_nblk_strm14_num_data_valid => end_nblk_strm1_num_data_valid,
        end_nblk_strm14_fifo_cap => end_nblk_strm1_fifo_cap,
        end_nblk_strm14_full_n => end_nblk_strm1_full_n,
        end_nblk_strm14_write => dup_strm_128u_U0_end_nblk_strm14_write,
        end_nblk_strm25_din => dup_strm_128u_U0_end_nblk_strm25_din,
        end_nblk_strm25_num_data_valid => end_nblk_strm2_num_data_valid,
        end_nblk_strm25_fifo_cap => end_nblk_strm2_fifo_cap,
        end_nblk_strm25_full_n => end_nblk_strm2_full_n,
        end_nblk_strm25_write => dup_strm_128u_U0_end_nblk_strm25_write);

    generateMsgSchedule_U0 : component sha512_verify_generateMsgSchedule
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => generateMsgSchedule_U0_ap_start,
        ap_done => generateMsgSchedule_U0_ap_done,
        ap_continue => generateMsgSchedule_U0_ap_continue,
        ap_idle => generateMsgSchedule_U0_ap_idle,
        ap_ready => generateMsgSchedule_U0_ap_ready,
        blk_strm_dout => blk_strm_dout,
        blk_strm_num_data_valid => blk_strm_num_data_valid,
        blk_strm_fifo_cap => blk_strm_fifo_cap,
        blk_strm_empty_n => blk_strm_empty_n,
        blk_strm_read => generateMsgSchedule_U0_blk_strm_read,
        end_nblk_strm14_dout => end_nblk_strm1_dout,
        end_nblk_strm14_num_data_valid => end_nblk_strm1_num_data_valid,
        end_nblk_strm14_fifo_cap => end_nblk_strm1_fifo_cap,
        end_nblk_strm14_empty_n => end_nblk_strm1_empty_n,
        end_nblk_strm14_read => generateMsgSchedule_U0_end_nblk_strm14_read,
        w_strm6_din => generateMsgSchedule_U0_w_strm6_din,
        w_strm6_num_data_valid => w_strm_num_data_valid,
        w_strm6_fifo_cap => w_strm_fifo_cap,
        w_strm6_full_n => w_strm_full_n,
        w_strm6_write => generateMsgSchedule_U0_w_strm6_write);

    SHA512Digest_64u_512u_U0 : component sha512_verify_SHA512Digest_64u_512u_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => SHA512Digest_64u_512u_U0_ap_start,
        ap_done => SHA512Digest_64u_512u_U0_ap_done,
        ap_continue => SHA512Digest_64u_512u_U0_ap_continue,
        ap_idle => SHA512Digest_64u_512u_U0_ap_idle,
        ap_ready => SHA512Digest_64u_512u_U0_ap_ready,
        w_strm6_dout => w_strm_dout,
        w_strm6_num_data_valid => w_strm_num_data_valid,
        w_strm6_fifo_cap => w_strm_fifo_cap,
        w_strm6_empty_n => w_strm_empty_n,
        w_strm6_read => SHA512Digest_64u_512u_U0_w_strm6_read,
        end_nblk_strm25_dout => end_nblk_strm2_dout,
        end_nblk_strm25_num_data_valid => end_nblk_strm2_num_data_valid,
        end_nblk_strm25_fifo_cap => end_nblk_strm2_fifo_cap,
        end_nblk_strm25_empty_n => end_nblk_strm2_empty_n,
        end_nblk_strm25_read => SHA512Digest_64u_512u_U0_end_nblk_strm25_read,
        tkeep_strm7_dout => tkeep_strm_dout,
        tkeep_strm7_num_data_valid => tkeep_strm_num_data_valid,
        tkeep_strm7_fifo_cap => tkeep_strm_fifo_cap,
        tkeep_strm7_empty_n => tkeep_strm_empty_n,
        tkeep_strm7_read => SHA512Digest_64u_512u_U0_tkeep_strm7_read,
        tid_strm8_dout => tid_strm_dout,
        tid_strm8_num_data_valid => tid_strm_num_data_valid,
        tid_strm8_fifo_cap => tid_strm_fifo_cap,
        tid_strm8_empty_n => tid_strm_empty_n,
        tid_strm8_read => SHA512Digest_64u_512u_U0_tid_strm8_read,
        output2_din => SHA512Digest_64u_512u_U0_output2_din,
        output2_full_n => output2_full_n,
        output2_write => SHA512Digest_64u_512u_U0_output2_write);

    blk_strm_U : component sha512_verify_fifo_w1024_d32_D
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => preProcessing_U0_blk_strm_din,
        if_full_n => blk_strm_full_n,
        if_write => preProcessing_U0_blk_strm_write,
        if_dout => blk_strm_dout,
        if_num_data_valid => blk_strm_num_data_valid,
        if_fifo_cap => blk_strm_fifo_cap,
        if_empty_n => blk_strm_empty_n,
        if_read => generateMsgSchedule_U0_blk_strm_read);

    end_nblk_strm_U : component sha512_verify_fifo_w1_d32_D
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => preProcessing_U0_end_nblk_strm3_din,
        if_full_n => end_nblk_strm_full_n,
        if_write => preProcessing_U0_end_nblk_strm3_write,
        if_dout => end_nblk_strm_dout,
        if_num_data_valid => end_nblk_strm_num_data_valid,
        if_fifo_cap => end_nblk_strm_fifo_cap,
        if_empty_n => end_nblk_strm_empty_n,
        if_read => dup_strm_128u_U0_end_nblk_strm3_read);

    tkeep_strm_U : component sha512_verify_fifo_w64_d32_D
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => preProcessing_U0_tkeep_strm7_din,
        if_full_n => tkeep_strm_full_n,
        if_write => preProcessing_U0_tkeep_strm7_write,
        if_dout => tkeep_strm_dout,
        if_num_data_valid => tkeep_strm_num_data_valid,
        if_fifo_cap => tkeep_strm_fifo_cap,
        if_empty_n => tkeep_strm_empty_n,
        if_read => SHA512Digest_64u_512u_U0_tkeep_strm7_read);

    tid_strm_U : component sha512_verify_fifo_w6_d32_D
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => preProcessing_U0_tid_strm8_din,
        if_full_n => tid_strm_full_n,
        if_write => preProcessing_U0_tid_strm8_write,
        if_dout => tid_strm_dout,
        if_num_data_valid => tid_strm_num_data_valid,
        if_fifo_cap => tid_strm_fifo_cap,
        if_empty_n => tid_strm_empty_n,
        if_read => SHA512Digest_64u_512u_U0_tid_strm8_read);

    end_nblk_strm1_U : component sha512_verify_fifo_w1_d32_D
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => dup_strm_128u_U0_end_nblk_strm14_din,
        if_full_n => end_nblk_strm1_full_n,
        if_write => dup_strm_128u_U0_end_nblk_strm14_write,
        if_dout => end_nblk_strm1_dout,
        if_num_data_valid => end_nblk_strm1_num_data_valid,
        if_fifo_cap => end_nblk_strm1_fifo_cap,
        if_empty_n => end_nblk_strm1_empty_n,
        if_read => generateMsgSchedule_U0_end_nblk_strm14_read);

    end_nblk_strm2_U : component sha512_verify_fifo_w1_d32_D
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => dup_strm_128u_U0_end_nblk_strm25_din,
        if_full_n => end_nblk_strm2_full_n,
        if_write => dup_strm_128u_U0_end_nblk_strm25_write,
        if_dout => end_nblk_strm2_dout,
        if_num_data_valid => end_nblk_strm2_num_data_valid,
        if_fifo_cap => end_nblk_strm2_fifo_cap,
        if_empty_n => end_nblk_strm2_empty_n,
        if_read => SHA512Digest_64u_512u_U0_end_nblk_strm25_read);

    w_strm_U : component sha512_verify_fifo_w64_d32_D
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => generateMsgSchedule_U0_w_strm6_din,
        if_full_n => w_strm_full_n,
        if_write => generateMsgSchedule_U0_w_strm6_write,
        if_dout => w_strm_dout,
        if_num_data_valid => w_strm_num_data_valid,
        if_fifo_cap => w_strm_fifo_cap,
        if_empty_n => w_strm_empty_n,
        if_read => SHA512Digest_64u_512u_U0_w_strm6_read);

    start_for_dup_strm_128u_U0_U : component sha512_verify_start_for_dup_strm_128u_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_dup_strm_128u_U0_din,
        if_full_n => start_for_dup_strm_128u_U0_full_n,
        if_write => preProcessing_U0_start_write,
        if_dout => start_for_dup_strm_128u_U0_dout,
        if_empty_n => start_for_dup_strm_128u_U0_empty_n,
        if_read => dup_strm_128u_U0_ap_ready);

    start_for_generateMsgSchedule_U0_U : component sha512_verify_start_for_generateMsgSchedule_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_generateMsgSchedule_U0_din,
        if_full_n => start_for_generateMsgSchedule_U0_full_n,
        if_write => preProcessing_U0_start_write,
        if_dout => start_for_generateMsgSchedule_U0_dout,
        if_empty_n => start_for_generateMsgSchedule_U0_empty_n,
        if_read => generateMsgSchedule_U0_ap_ready);

    start_for_SHA512Digest_64u_512u_U0_U : component sha512_verify_start_for_SHA512Digest_64u_512u_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_SHA512Digest_64u_512u_U0_din,
        if_full_n => start_for_SHA512Digest_64u_512u_U0_full_n,
        if_write => preProcessing_U0_start_write,
        if_dout => start_for_SHA512Digest_64u_512u_U0_dout,
        if_empty_n => start_for_SHA512Digest_64u_512u_U0_empty_n,
        if_read => SHA512Digest_64u_512u_U0_ap_ready);




    SHA512Digest_64u_512u_U0_ap_continue <= ap_sync_continue;
    SHA512Digest_64u_512u_U0_ap_start <= start_for_SHA512Digest_64u_512u_U0_empty_n;
    ap_done <= ap_sync_done;
    ap_idle <= (preProcessing_U0_ap_idle and generateMsgSchedule_U0_ap_idle and dup_strm_128u_U0_ap_idle and SHA512Digest_64u_512u_U0_ap_idle);
    ap_ready <= preProcessing_U0_ap_ready;
    ap_sync_continue <= (ap_sync_done and ap_continue);
    ap_sync_done <= (preProcessing_U0_ap_done and SHA512Digest_64u_512u_U0_ap_done);
    dup_strm_128u_U0_ap_continue <= ap_const_logic_1;
    dup_strm_128u_U0_ap_start <= start_for_dup_strm_128u_U0_empty_n;
    generateMsgSchedule_U0_ap_continue <= ap_const_logic_1;
    generateMsgSchedule_U0_ap_start <= start_for_generateMsgSchedule_U0_empty_n;
    input_r_TREADY <= preProcessing_U0_input_r_TREADY;
    last_input_tdata <= preProcessing_U0_last_input_tdata;
    last_input_tdata_ap_vld <= preProcessing_U0_last_input_tdata_ap_vld;
    output2_din <= SHA512Digest_64u_512u_U0_output2_din;
    output2_write <= SHA512Digest_64u_512u_U0_output2_write;
    preProcessing_U0_ap_continue <= ap_sync_continue;
    preProcessing_U0_ap_start <= ap_start;
    preProcessing_U0_start_full_n <= (start_for_generateMsgSchedule_U0_full_n and start_for_dup_strm_128u_U0_full_n and start_for_SHA512Digest_64u_512u_U0_full_n);
    start_for_SHA512Digest_64u_512u_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_dup_strm_128u_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_generateMsgSchedule_U0_din <= (0=>ap_const_logic_1, others=>'-');
end behav;
