

================================================================
== Vitis HLS Report for 'SHA512Digest_64u_512u_Pipeline_LOOP_SHA1_UPDATE_80_ROUNDS'
================================================================
* Date:           Thu Aug  3 21:15:02 2023

* Version:        2022.1 (Build 3526262 on Mon Apr 18 15:47:01 MDT 2022)
* Project:        DESHA512_01
* Solution:       solution1 (Vivado IP Flow Target)
* Product family: virtexuplus
* Target device:  xcu280-fsvh2892-2L-e


================================================================
== Performance Estimates
================================================================
+ Timing: 
    * Summary: 
    +--------+---------+----------+------------+
    |  Clock |  Target | Estimated| Uncertainty|
    +--------+---------+----------+------------+
    |ap_clk  |  4.00 ns|  2.548 ns|     1.08 ns|
    +--------+---------+----------+------------+

+ Latency: 
    * Summary: 
    +---------+---------+----------+----------+-----+-----+---------+
    |  Latency (cycles) |  Latency (absolute) |  Interval | Pipeline|
    |   min   |   max   |    min   |    max   | min | max |   Type  |
    +---------+---------+----------+----------+-----+-----+---------+
    |      163|      163|  0.652 us|  0.652 us|  163|  163|       no|
    +---------+---------+----------+----------+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +------------------------------+---------+---------+----------+-----------+-----------+------+----------+
        |                              |  Latency (cycles) | Iteration|  Initiation Interval  | Trip |          |
        |           Loop Name          |   min   |   max   |  Latency |  achieved |   target  | Count| Pipelined|
        +------------------------------+---------+---------+----------+-----------+-----------+------+----------+
        |- LOOP_SHA1_UPDATE_80_ROUNDS  |      161|      161|         3|          2|          2|    80|       yes|
        +------------------------------+---------+---------+----------+-----------+-----------+------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 2
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0

+ Individual pipeline summary: 
  * Pipeline-0: initiation interval (II) = 2, depth = 3


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 3
* Pipeline : 1
  Pipeline-0 : II = 2, D = 3, States = { 1 2 3 }
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 2 
2 --> 3 
3 --> 

* FSM state operations: 

State 1 <SV = 0> <Delay = 0.59>
ST_1 : Operation 6 [1/1] (0.00ns)   --->   "%c_V_1 = alloca i32 1"   --->   Operation 6 'alloca' 'c_V_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 7 [1/1] (0.00ns)   --->   "%d_V_1 = alloca i32 1"   --->   Operation 7 'alloca' 'd_V_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 8 [1/1] (0.00ns)   --->   "%g_V_1 = alloca i32 1"   --->   Operation 8 'alloca' 'g_V_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 9 [1/1] (0.00ns)   --->   "%b_V_1 = alloca i32 1"   --->   Operation 9 'alloca' 'b_V_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 10 [1/1] (0.00ns)   --->   "%h_V_1 = alloca i32 1"   --->   Operation 10 'alloca' 'h_V_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 11 [1/1] (0.00ns)   --->   "%t_V = alloca i32 1"   --->   Operation 11 'alloca' 't_V' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 12 [1/1] (0.00ns)   --->   "%d_V_2 = alloca i32 1"   --->   Operation 12 'alloca' 'd_V_2' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 13 [1/1] (0.00ns)   --->   "%f_V_1 = alloca i32 1"   --->   Operation 13 'alloca' 'f_V_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 14 [1/1] (0.00ns)   --->   "%h_V_2 = alloca i32 1"   --->   Operation 14 'alloca' 'h_V_2' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 15 [1/1] (0.00ns)   --->   "%specmemcore_ln0 = specmemcore void @_ssdm_op_SpecMemCore, i64 %w_strm6, i64 666, i64 9, i64 18446744073709551615"   --->   Operation 15 'specmemcore' 'specmemcore_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 16 [1/1] (0.00ns)   --->   "%specinterface_ln0 = specinterface void @_ssdm_op_SpecInterface, i64 %w_strm6, void @empty_7, i32 0, i32 0, void @empty_0, i32 0, i32 0, void @empty_0, void @empty_0, void @empty_0, i32 0, i32 0, i32 0, i32 0, void @empty_0, void @empty_0, i32 4294967295, i32 0"   --->   Operation 16 'specinterface' 'specinterface_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 17 [1/1] (0.00ns)   --->   "%a_V_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %a_V" [SHA512CODE/sha512.cpp:553]   --->   Operation 17 'read' 'a_V_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 18 [1/1] (0.00ns)   --->   "%b_V_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %b_V" [SHA512CODE/sha512.cpp:553]   --->   Operation 18 'read' 'b_V_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 19 [1/1] (0.00ns)   --->   "%c_V_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %c_V" [SHA512CODE/sha512.cpp:553]   --->   Operation 19 'read' 'c_V_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 20 [1/1] (0.00ns)   --->   "%d_V_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %d_V" [SHA512CODE/sha512.cpp:553]   --->   Operation 20 'read' 'd_V_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 21 [1/1] (0.00ns)   --->   "%e_V_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %e_V" [SHA512CODE/sha512.cpp:553]   --->   Operation 21 'read' 'e_V_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 22 [1/1] (0.00ns)   --->   "%f_V_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %f_V" [SHA512CODE/sha512.cpp:553]   --->   Operation 22 'read' 'f_V_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 23 [1/1] (0.00ns)   --->   "%g_V_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %g_V" [SHA512CODE/sha512.cpp:553]   --->   Operation 23 'read' 'g_V_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 24 [1/1] (0.00ns)   --->   "%h_V_read = read i64 @_ssdm_op_Read.ap_auto.i64, i64 %h_V" [SHA512CODE/sha512.cpp:553]   --->   Operation 24 'read' 'h_V_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 25 [1/1] (0.38ns)   --->   "%store_ln553 = store i64 %g_V_read, i64 %h_V_2" [SHA512CODE/sha512.cpp:553]   --->   Operation 25 'store' 'store_ln553' <Predicate = true> <Delay = 0.38>
ST_1 : Operation 26 [1/1] (0.38ns)   --->   "%store_ln553 = store i64 %e_V_read, i64 %f_V_1" [SHA512CODE/sha512.cpp:553]   --->   Operation 26 'store' 'store_ln553' <Predicate = true> <Delay = 0.38>
ST_1 : Operation 27 [1/1] (0.38ns)   --->   "%store_ln553 = store i64 %c_V_read, i64 %d_V_2" [SHA512CODE/sha512.cpp:553]   --->   Operation 27 'store' 'store_ln553' <Predicate = true> <Delay = 0.38>
ST_1 : Operation 28 [1/1] (0.38ns)   --->   "%store_ln0 = store i7 0, i7 %t_V"   --->   Operation 28 'store' 'store_ln0' <Predicate = true> <Delay = 0.38>
ST_1 : Operation 29 [1/1] (0.38ns)   --->   "%store_ln553 = store i64 %h_V_read, i64 %h_V_1" [SHA512CODE/sha512.cpp:553]   --->   Operation 29 'store' 'store_ln553' <Predicate = true> <Delay = 0.38>
ST_1 : Operation 30 [1/1] (0.38ns)   --->   "%store_ln553 = store i64 %a_V_read, i64 %b_V_1" [SHA512CODE/sha512.cpp:553]   --->   Operation 30 'store' 'store_ln553' <Predicate = true> <Delay = 0.38>
ST_1 : Operation 31 [1/1] (0.38ns)   --->   "%store_ln553 = store i64 %f_V_read, i64 %g_V_1" [SHA512CODE/sha512.cpp:553]   --->   Operation 31 'store' 'store_ln553' <Predicate = true> <Delay = 0.38>
ST_1 : Operation 32 [1/1] (0.38ns)   --->   "%store_ln553 = store i64 %d_V_read, i64 %d_V_1" [SHA512CODE/sha512.cpp:553]   --->   Operation 32 'store' 'store_ln553' <Predicate = true> <Delay = 0.38>
ST_1 : Operation 33 [1/1] (0.38ns)   --->   "%store_ln553 = store i64 %b_V_read, i64 %c_V_1" [SHA512CODE/sha512.cpp:553]   --->   Operation 33 'store' 'store_ln553' <Predicate = true> <Delay = 0.38>
ST_1 : Operation 34 [1/1] (0.00ns)   --->   "%br_ln0 = br void %for.inc"   --->   Operation 34 'br' 'br_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 35 [1/1] (0.00ns)   --->   "%t_V_2 = load i7 %t_V"   --->   Operation 35 'load' 't_V_2' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 36 [1/1] (0.59ns)   --->   "%icmp_ln1073 = icmp_eq  i7 %t_V_2, i7 80"   --->   Operation 36 'icmp' 'icmp_ln1073' <Predicate = true> <Delay = 0.59> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 0.59> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 37 [1/1] (0.00ns)   --->   "%br_ln647 = br i1 %icmp_ln1073, void %for.inc.split, void %for.end.exitStub" [SHA512CODE/sha512.cpp:647]   --->   Operation 37 'br' 'br_ln647' <Predicate = true> <Delay = 0.00>

State 2 <SV = 1> <Delay = 2.54>
ST_2 : Operation 38 [1/1] (0.00ns)   --->   "%a_V_3 = load i64 %b_V_1"   --->   Operation 38 'load' 'a_V_3' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 39 [1/1] (0.00ns)   --->   "%c_V_3 = load i64 %d_V_2"   --->   Operation 39 'load' 'c_V_3' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 40 [1/1] (0.00ns)   --->   "%e_V_3 = load i64 %f_V_1"   --->   Operation 40 'load' 'e_V_3' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 41 [1/1] (0.00ns)   --->   "%g_V_3 = load i64 %h_V_2"   --->   Operation 41 'load' 'g_V_3' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 42 [1/1] (0.00ns)   --->   "%speclooptripcount_ln0 = speclooptripcount void @_ssdm_op_SpecLoopTripCount, i64 80, i64 80, i64 80"   --->   Operation 42 'speclooptripcount' 'speclooptripcount_ln0' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 43 [1/1] (0.70ns)   --->   "%add_ln886 = add i7 %t_V_2, i7 1"   --->   Operation 43 'add' 'add_ln886' <Predicate = true> <Delay = 0.70> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 0.70> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 44 [1/1] (0.00ns)   --->   "%g_V_1_load_1 = load i64 %g_V_1" [SHA512CODE/sha512.cpp:647]   --->   Operation 44 'load' 'g_V_1_load_1' <Predicate = (!icmp_ln1073)> <Delay = 0.00>
ST_2 : Operation 45 [1/1] (0.00ns)   --->   "%h_V_1_load = load i64 %h_V_1"   --->   Operation 45 'load' 'h_V_1_load' <Predicate = (!icmp_ln1073)> <Delay = 0.00>
ST_2 : Operation 46 [1/1] (0.97ns)   --->   "%Wt_V = read i64 @_ssdm_op_Read.ap_fifo.volatile.i64P0A, i64 %w_strm6" [/share/xilinx/Vitis_HLS/2022.1/common/technology/autopilot/hls_stream_39.h:145]   --->   Operation 46 'read' 'Wt_V' <Predicate = (!icmp_ln1073)> <Delay = 0.97> <CoreInst = "FIFO_LUTRAM">   --->   Core 80 'FIFO_LUTRAM' <Latency = 0> <II = 1> <Delay = 0.97> <Storage> <Opcode : 'read' 'write' 'nbread' 'nbwrite'> <Ports = 0> <Width = 64> <Depth = 32> <FIFO>
ST_2 : Operation 47 [1/1] (0.00ns) (grouped into LUT with out node ret_V)   --->   "%r_V_s = partselect i50 @_ssdm_op_PartSelect.i50.i64.i32.i32, i64 %e_V_3, i32 14, i32 63"   --->   Operation 47 'partselect' 'r_V_s' <Predicate = (!icmp_ln1073)> <Delay = 0.00>
ST_2 : Operation 48 [1/1] (0.00ns) (grouped into LUT with out node ret_V)   --->   "%trunc_ln1739 = trunc i64 %e_V_3"   --->   Operation 48 'trunc' 'trunc_ln1739' <Predicate = (!icmp_ln1073)> <Delay = 0.00>
ST_2 : Operation 49 [1/1] (0.00ns) (grouped into LUT with out node ret_V)   --->   "%ret_V_23 = bitconcatenate i64 @_ssdm_op_BitConcatenate.i64.i14.i50, i14 %trunc_ln1739, i50 %r_V_s"   --->   Operation 49 'bitconcatenate' 'ret_V_23' <Predicate = (!icmp_ln1073)> <Delay = 0.00>
ST_2 : Operation 50 [1/1] (0.00ns) (grouped into LUT with out node ret_V)   --->   "%r_V_2 = partselect i46 @_ssdm_op_PartSelect.i46.i64.i32.i32, i64 %e_V_3, i32 18, i32 63"   --->   Operation 50 'partselect' 'r_V_2' <Predicate = (!icmp_ln1073)> <Delay = 0.00>
ST_2 : Operation 51 [1/1] (0.00ns) (grouped into LUT with out node ret_V)   --->   "%trunc_ln1739_4 = trunc i64 %e_V_3"   --->   Operation 51 'trunc' 'trunc_ln1739_4' <Predicate = (!icmp_ln1073)> <Delay = 0.00>
ST_2 : Operation 52 [1/1] (0.00ns) (grouped into LUT with out node ret_V)   --->   "%ret_V_24 = bitconcatenate i64 @_ssdm_op_BitConcatenate.i64.i18.i46, i18 %trunc_ln1739_4, i46 %r_V_2"   --->   Operation 52 'bitconcatenate' 'ret_V_24' <Predicate = (!icmp_ln1073)> <Delay = 0.00>
ST_2 : Operation 53 [1/1] (0.00ns) (grouped into LUT with out node ret_V)   --->   "%r_V_3 = partselect i23 @_ssdm_op_PartSelect.i23.i64.i32.i32, i64 %e_V_3, i32 41, i32 63"   --->   Operation 53 'partselect' 'r_V_3' <Predicate = (!icmp_ln1073)> <Delay = 0.00>
ST_2 : Operation 54 [1/1] (0.00ns) (grouped into LUT with out node ret_V)   --->   "%trunc_ln1739_5 = trunc i64 %e_V_3"   --->   Operation 54 'trunc' 'trunc_ln1739_5' <Predicate = (!icmp_ln1073)> <Delay = 0.00>
ST_2 : Operation 55 [1/1] (0.00ns) (grouped into LUT with out node ret_V)   --->   "%ret_V_25 = bitconcatenate i64 @_ssdm_op_BitConcatenate.i64.i41.i23, i41 %trunc_ln1739_5, i23 %r_V_3"   --->   Operation 55 'bitconcatenate' 'ret_V_25' <Predicate = (!icmp_ln1073)> <Delay = 0.00>
ST_2 : Operation 56 [1/1] (0.00ns) (grouped into LUT with out node ret_V)   --->   "%xor_ln1545 = xor i64 %ret_V_23, i64 %ret_V_24"   --->   Operation 56 'xor' 'xor_ln1545' <Predicate = (!icmp_ln1073)> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.28> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 57 [1/1] (0.28ns) (out node of the LUT)   --->   "%ret_V = xor i64 %xor_ln1545, i64 %ret_V_25"   --->   Operation 57 'xor' 'ret_V' <Predicate = (!icmp_ln1073)> <Delay = 0.28> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.28> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 58 [1/1] (0.00ns) (grouped into LUT with out node ret_V_15)   --->   "%ret_V_26 = and i64 %e_V_3, i64 %g_V_1_load_1"   --->   Operation 58 'and' 'ret_V_26' <Predicate = (!icmp_ln1073)> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.28> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 59 [1/1] (0.00ns) (grouped into LUT with out node ret_V_15)   --->   "%r_V = xor i64 %e_V_3, i64 18446744073709551615"   --->   Operation 59 'xor' 'r_V' <Predicate = (!icmp_ln1073)> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.28> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 60 [1/1] (0.00ns) (grouped into LUT with out node ret_V_15)   --->   "%ret_V_27 = and i64 %g_V_3, i64 %r_V"   --->   Operation 60 'and' 'ret_V_27' <Predicate = (!icmp_ln1073)> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.28> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 61 [1/1] (0.28ns) (out node of the LUT)   --->   "%ret_V_15 = xor i64 %ret_V_26, i64 %ret_V_27"   --->   Operation 61 'xor' 'ret_V_15' <Predicate = (!icmp_ln1073)> <Delay = 0.28> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.28> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 62 [1/1] (0.86ns)   --->   "%tmp = mux i64 @_ssdm_op_Mux.ap_auto.80i64.i7, i64 4794697086780616226, i64 8158064640168781261, i64 13096744586834688815, i64 16840607885511220156, i64 4131703408338449720, i64 6480981068601479193, i64 10538285296894168987, i64 12329834152419229976, i64 15566598209576043074, i64 1334009975649890238, i64 2608012711638119052, i64 6128411473006802146, i64 8268148722764581231, i64 9286055187155687089, i64 11230858885718282805, i64 13951009754708518548, i64 16472876342353939154, i64 17275323862435702243, i64 1135362057144423861, i64 2597628984639134821, i64 3308224258029322869, i64 5365058923640841347, i64 6679025012923562964, i64 8573033837759648693, i64 10970295158949994411, i64 12119686244451234320, i64 12683024718118986047, i64 13788192230050041572, i64 14330467153632333762, i64 15395433587784984357, i64 489312712824947311, i64 1452737877330783856, i64 2861767655752347644, i64 3322285676063803686, i64 5560940570517711597, i64 5996557281743188959, i64 7280758554555802590, i64 8532644243296465576, i64 9350256976987008742, i64 10552545826968843579, i64 11727347734174303076, i64 12113106623233404929, i64 14000437183269869457, i64 14369950271660146224, i64 15101387698204529176, i64 15463397548674623760, i64 17586052441742319658, i64 1182934255886127544, i64 1847814050463011016, i64 2177327727835720531, i64 2830643537854262169, i64 3796741975233480872, i64 4115178125766777443, i64 5681478168544905931, i64 6601373596472566643, i64 7507060721942968483, i64 8399075790359081724, i64 8693463985226723168, i64 9568029438360202098, i64 10144078919501101548, i64 10430055236837252648, i64 11840083180663258601, i64 13761210420658862357, i64 14299343276471374635, i64 14566680578165727644, i64 15097957966210449927, i64 16922976911328602910, i64 17689382322260857208, i64 500013540394364858, i64 748580250866718886, i64 1242879168328830382, i64 1977374033974150939, i64 2944078676154940804, i64 3659926193048069267, i64 4368137639120453308, i64 4836135668995329356, i64 5532061633213252278, i64 6448918945643986474, i64 6902733635092675308, i64 7801388544844847127, i7 %t_V_2"   --->   Operation 62 'mux' 'tmp' <Predicate = (!icmp_ln1073)> <Delay = 0.86> <CoreInst = "Multiplexer">   --->   Core 76 'Multiplexer' <Latency = 0> <II = 1> <Delay = 0.86> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 63 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%add_ln232 = add i64 %Wt_V, i64 %h_V_1_load"   --->   Operation 63 'add' 'add_ln232' <Predicate = (!icmp_ln1073)> <Delay = 0.00> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.42> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_2 : Operation 64 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%add_ln232_3 = add i64 %ret_V_15, i64 %tmp"   --->   Operation 64 'add' 'add_ln232_3' <Predicate = (!icmp_ln1073)> <Delay = 0.00> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.42> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_2 : Operation 65 [1/1] (0.84ns) (root node of TernaryAdder)   --->   "%add_ln232_4 = add i64 %add_ln232_3, i64 %ret_V"   --->   Operation 65 'add' 'add_ln232_4' <Predicate = (!icmp_ln1073)> <Delay = 0.84> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.42> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_2 : Operation 66 [1/1] (0.84ns) (root node of TernaryAdder)   --->   "%T1_V = add i64 %add_ln232_4, i64 %add_ln232"   --->   Operation 66 'add' 'T1_V' <Predicate = (!icmp_ln1073)> <Delay = 0.84> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.42> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_2 : Operation 67 [1/1] (0.38ns)   --->   "%store_ln647 = store i64 %g_V_1_load_1, i64 %h_V_2" [SHA512CODE/sha512.cpp:647]   --->   Operation 67 'store' 'store_ln647' <Predicate = (!icmp_ln1073)> <Delay = 0.38>
ST_2 : Operation 68 [1/1] (0.38ns)   --->   "%store_ln647 = store i7 %add_ln886, i7 %t_V" [SHA512CODE/sha512.cpp:647]   --->   Operation 68 'store' 'store_ln647' <Predicate = (!icmp_ln1073)> <Delay = 0.38>
ST_2 : Operation 69 [1/1] (0.38ns)   --->   "%store_ln647 = store i64 %g_V_3, i64 %h_V_1" [SHA512CODE/sha512.cpp:647]   --->   Operation 69 'store' 'store_ln647' <Predicate = (!icmp_ln1073)> <Delay = 0.38>
ST_2 : Operation 70 [1/1] (0.38ns)   --->   "%store_ln647 = store i64 %e_V_3, i64 %g_V_1" [SHA512CODE/sha512.cpp:647]   --->   Operation 70 'store' 'store_ln647' <Predicate = (!icmp_ln1073)> <Delay = 0.38>
ST_2 : Operation 99 [1/1] (0.00ns)   --->   "%c_V_1_load = load i64 %c_V_1"   --->   Operation 99 'load' 'c_V_1_load' <Predicate = (icmp_ln1073)> <Delay = 0.00>
ST_2 : Operation 100 [1/1] (0.00ns)   --->   "%d_V_1_load_1 = load i64 %d_V_1"   --->   Operation 100 'load' 'd_V_1_load_1' <Predicate = (icmp_ln1073)> <Delay = 0.00>
ST_2 : Operation 101 [1/1] (0.00ns)   --->   "%g_V_1_load = load i64 %g_V_1"   --->   Operation 101 'load' 'g_V_1_load' <Predicate = (icmp_ln1073)> <Delay = 0.00>
ST_2 : Operation 102 [1/1] (0.00ns)   --->   "%h_V_1_load_1 = load i64 %h_V_1"   --->   Operation 102 'load' 'h_V_1_load_1' <Predicate = (icmp_ln1073)> <Delay = 0.00>
ST_2 : Operation 103 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %h_V_1_out, i64 %h_V_1_load_1"   --->   Operation 103 'write' 'write_ln0' <Predicate = (icmp_ln1073)> <Delay = 0.00>
ST_2 : Operation 104 [1/1] (0.00ns)   --->   "%write_ln1543 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %g_V_3_out, i64 %g_V_3"   --->   Operation 104 'write' 'write_ln1543' <Predicate = (icmp_ln1073)> <Delay = 0.00>
ST_2 : Operation 105 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %f_V_3_out, i64 %g_V_1_load"   --->   Operation 105 'write' 'write_ln0' <Predicate = (icmp_ln1073)> <Delay = 0.00>
ST_2 : Operation 106 [1/1] (0.00ns)   --->   "%write_ln1739 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %e_V_3_out, i64 %e_V_3"   --->   Operation 106 'write' 'write_ln1739' <Predicate = (icmp_ln1073)> <Delay = 0.00>
ST_2 : Operation 107 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %d_V_1_out, i64 %d_V_1_load_1"   --->   Operation 107 'write' 'write_ln0' <Predicate = (icmp_ln1073)> <Delay = 0.00>
ST_2 : Operation 108 [1/1] (0.00ns)   --->   "%write_ln1543 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %c_V_3_out, i64 %c_V_3"   --->   Operation 108 'write' 'write_ln1543' <Predicate = (icmp_ln1073)> <Delay = 0.00>
ST_2 : Operation 109 [1/1] (0.00ns)   --->   "%write_ln0 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %b_V_3_out, i64 %c_V_1_load"   --->   Operation 109 'write' 'write_ln0' <Predicate = (icmp_ln1073)> <Delay = 0.00>
ST_2 : Operation 110 [1/1] (0.00ns)   --->   "%write_ln1739 = write void @_ssdm_op_Write.ap_auto.i64P0A, i64 %a_V_3_out, i64 %a_V_3"   --->   Operation 110 'write' 'write_ln1739' <Predicate = (icmp_ln1073)> <Delay = 0.00>
ST_2 : Operation 111 [1/1] (0.00ns)   --->   "%ret_ln0 = ret"   --->   Operation 111 'ret' 'ret_ln0' <Predicate = (icmp_ln1073)> <Delay = 0.00>

State 3 <SV = 2> <Delay = 1.53>
ST_3 : Operation 71 [1/1] (0.00ns)   --->   "%c_V_1_load_1 = load i64 %c_V_1" [SHA512CODE/sha512.cpp:647]   --->   Operation 71 'load' 'c_V_1_load_1' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 72 [1/1] (0.00ns)   --->   "%d_V_1_load = load i64 %d_V_1"   --->   Operation 72 'load' 'd_V_1_load' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 73 [1/1] (0.00ns)   --->   "%specpipeline_ln648 = specpipeline void @_ssdm_op_SpecPipeline, i32 2, i32 0, i32 0, i32 0, void @empty_0" [SHA512CODE/sha512.cpp:648]   --->   Operation 73 'specpipeline' 'specpipeline_ln648' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 74 [1/1] (0.00ns)   --->   "%specloopname_ln0 = specloopname void @_ssdm_op_SpecLoopName, void @empty_3" [/share/xilinx/Vitis_HLS/2022.1/common/technology/autopilot/hls_stream_39.h:0]   --->   Operation 74 'specloopname' 'specloopname_ln0' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 75 [1/1] (0.00ns) (grouped into LUT with out node ret_V_19)   --->   "%r_V_4 = partselect i36 @_ssdm_op_PartSelect.i36.i64.i32.i32, i64 %a_V_3, i32 28, i32 63"   --->   Operation 75 'partselect' 'r_V_4' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 76 [1/1] (0.00ns) (grouped into LUT with out node ret_V_19)   --->   "%trunc_ln1739_6 = trunc i64 %a_V_3"   --->   Operation 76 'trunc' 'trunc_ln1739_6' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 77 [1/1] (0.00ns) (grouped into LUT with out node ret_V_19)   --->   "%ret_V_28 = bitconcatenate i64 @_ssdm_op_BitConcatenate.i64.i28.i36, i28 %trunc_ln1739_6, i36 %r_V_4"   --->   Operation 77 'bitconcatenate' 'ret_V_28' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 78 [1/1] (0.00ns) (grouped into LUT with out node ret_V_19)   --->   "%r_V_5 = partselect i30 @_ssdm_op_PartSelect.i30.i64.i32.i32, i64 %a_V_3, i32 34, i32 63"   --->   Operation 78 'partselect' 'r_V_5' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 79 [1/1] (0.00ns) (grouped into LUT with out node ret_V_19)   --->   "%trunc_ln1739_7 = trunc i64 %a_V_3"   --->   Operation 79 'trunc' 'trunc_ln1739_7' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 80 [1/1] (0.00ns) (grouped into LUT with out node ret_V_19)   --->   "%ret_V_29 = bitconcatenate i64 @_ssdm_op_BitConcatenate.i64.i34.i30, i34 %trunc_ln1739_7, i30 %r_V_5"   --->   Operation 80 'bitconcatenate' 'ret_V_29' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 81 [1/1] (0.00ns) (grouped into LUT with out node ret_V_19)   --->   "%r_V_6 = partselect i25 @_ssdm_op_PartSelect.i25.i64.i32.i32, i64 %a_V_3, i32 39, i32 63"   --->   Operation 81 'partselect' 'r_V_6' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 82 [1/1] (0.00ns) (grouped into LUT with out node ret_V_19)   --->   "%trunc_ln1739_8 = trunc i64 %a_V_3"   --->   Operation 82 'trunc' 'trunc_ln1739_8' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 83 [1/1] (0.00ns) (grouped into LUT with out node ret_V_19)   --->   "%ret_V_30 = bitconcatenate i64 @_ssdm_op_BitConcatenate.i64.i39.i25, i39 %trunc_ln1739_8, i25 %r_V_6"   --->   Operation 83 'bitconcatenate' 'ret_V_30' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 84 [1/1] (0.00ns) (grouped into LUT with out node ret_V_19)   --->   "%xor_ln1545_6 = xor i64 %ret_V_28, i64 %ret_V_29"   --->   Operation 84 'xor' 'xor_ln1545_6' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.28> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 85 [1/1] (0.28ns) (out node of the LUT)   --->   "%ret_V_19 = xor i64 %xor_ln1545_6, i64 %ret_V_30"   --->   Operation 85 'xor' 'ret_V_19' <Predicate = true> <Delay = 0.28> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.28> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 86 [1/1] (0.00ns) (grouped into LUT with out node ret_V_22)   --->   "%xor_ln1545_8 = xor i64 %c_V_1_load_1, i64 %c_V_3"   --->   Operation 86 'xor' 'xor_ln1545_8' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.28> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 87 [1/1] (0.00ns) (grouped into LUT with out node ret_V_22)   --->   "%ret_V_31 = and i64 %a_V_3, i64 %xor_ln1545_8"   --->   Operation 87 'and' 'ret_V_31' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.28> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 88 [1/1] (0.00ns) (grouped into LUT with out node ret_V_22)   --->   "%ret_V_32 = and i64 %c_V_1_load_1, i64 %c_V_3"   --->   Operation 88 'and' 'ret_V_32' <Predicate = true> <Delay = 0.00> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.28> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 89 [1/1] (0.28ns) (out node of the LUT)   --->   "%ret_V_22 = xor i64 %ret_V_31, i64 %ret_V_32"   --->   Operation 89 'xor' 'ret_V_22' <Predicate = true> <Delay = 0.28> <CoreInst = "LogicGate">   --->   Core 74 'LogicGate' <Latency = 0> <II = 1> <Delay = 0.28> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 90 [1/1] (1.14ns)   --->   "%e_V_2 = add i64 %T1_V, i64 %d_V_1_load"   --->   Operation 90 'add' 'e_V_2' <Predicate = true> <Delay = 1.14> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.14> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 91 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%add_ln232_7 = add i64 %T1_V, i64 %ret_V_22"   --->   Operation 91 'add' 'add_ln232_7' <Predicate = true> <Delay = 0.00> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.42> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_3 : Operation 92 [1/1] (0.84ns) (root node of TernaryAdder)   --->   "%a_V_2 = add i64 %add_ln232_7, i64 %ret_V_19"   --->   Operation 92 'add' 'a_V_2' <Predicate = true> <Delay = 0.84> <CoreInst = "TAddSub">   --->   Core 10 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.42> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_3 : Operation 93 [1/1] (0.38ns)   --->   "%store_ln647 = store i64 %e_V_2, i64 %f_V_1" [SHA512CODE/sha512.cpp:647]   --->   Operation 93 'store' 'store_ln647' <Predicate = true> <Delay = 0.38>
ST_3 : Operation 94 [1/1] (0.38ns)   --->   "%store_ln647 = store i64 %c_V_1_load_1, i64 %d_V_2" [SHA512CODE/sha512.cpp:647]   --->   Operation 94 'store' 'store_ln647' <Predicate = true> <Delay = 0.38>
ST_3 : Operation 95 [1/1] (0.38ns)   --->   "%store_ln647 = store i64 %a_V_2, i64 %b_V_1" [SHA512CODE/sha512.cpp:647]   --->   Operation 95 'store' 'store_ln647' <Predicate = true> <Delay = 0.38>
ST_3 : Operation 96 [1/1] (0.38ns)   --->   "%store_ln647 = store i64 %c_V_3, i64 %d_V_1" [SHA512CODE/sha512.cpp:647]   --->   Operation 96 'store' 'store_ln647' <Predicate = true> <Delay = 0.38>
ST_3 : Operation 97 [1/1] (0.38ns)   --->   "%store_ln647 = store i64 %a_V_3, i64 %c_V_1" [SHA512CODE/sha512.cpp:647]   --->   Operation 97 'store' 'store_ln647' <Predicate = true> <Delay = 0.38>
ST_3 : Operation 98 [1/1] (0.00ns)   --->   "%br_ln647 = br void %for.inc" [SHA512CODE/sha512.cpp:647]   --->   Operation 98 'br' 'br_ln647' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 4ns, clock uncertainty: 1.08ns.

 <State 1>: 0.6ns
The critical path consists of the following:
	'alloca' operation ('t.V') [23]  (0 ns)
	'load' operation ('t.V') on local variable 't.V' [49]  (0 ns)
	'icmp' operation ('icmp_ln1073') [53]  (0.6 ns)

 <State 2>: 2.55ns
The critical path consists of the following:
	'mux' operation ('tmp') [80]  (0.863 ns)
	'add' operation ('add_ln232_3') [82]  (0 ns)
	'add' operation ('add_ln232_4') [83]  (0.843 ns)
	'add' operation ('T1.V') [84]  (0.843 ns)

 <State 3>: 1.53ns
The critical path consists of the following:
	'load' operation ('d_V_1_load') on local variable 'd.V' [59]  (0 ns)
	'add' operation ('e.V') [100]  (1.15 ns)
	'store' operation ('store_ln647', SHA512CODE/sha512.cpp:647) of variable 'e.V' on local variable 'f.V' [104]  (0.387 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
