-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sha512_generateMsgSchedule_Pipeline_LOOP_SHA512_GEN_WT16 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    w_strm34_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    w_strm34_num_data_valid : IN STD_LOGIC_VECTOR (5 downto 0);
    w_strm34_fifo_cap : IN STD_LOGIC_VECTOR (5 downto 0);
    w_strm34_full_n : IN STD_LOGIC;
    w_strm34_write : OUT STD_LOGIC;
    blk_M_V : IN STD_LOGIC_VECTOR (63 downto 0);
    blk_M_V_1 : IN STD_LOGIC_VECTOR (63 downto 0);
    blk_M_V_2 : IN STD_LOGIC_VECTOR (63 downto 0);
    blk_M_V_3 : IN STD_LOGIC_VECTOR (63 downto 0);
    blk_M_V_4 : IN STD_LOGIC_VECTOR (63 downto 0);
    blk_M_V_5 : IN STD_LOGIC_VECTOR (63 downto 0);
    blk_M_V_6 : IN STD_LOGIC_VECTOR (63 downto 0);
    blk_M_V_7 : IN STD_LOGIC_VECTOR (63 downto 0);
    blk_M_V_8 : IN STD_LOGIC_VECTOR (63 downto 0);
    blk_M_V_9 : IN STD_LOGIC_VECTOR (63 downto 0);
    blk_M_V_10 : IN STD_LOGIC_VECTOR (63 downto 0);
    blk_M_V_11 : IN STD_LOGIC_VECTOR (63 downto 0);
    blk_M_V_12 : IN STD_LOGIC_VECTOR (63 downto 0);
    blk_M_V_13 : IN STD_LOGIC_VECTOR (63 downto 0);
    blk_M_V_14 : IN STD_LOGIC_VECTOR (63 downto 0);
    blk_M_V_15 : IN STD_LOGIC_VECTOR (63 downto 0);
    W_V_15_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    W_V_15_out_ap_vld : OUT STD_LOGIC;
    W_V_14_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    W_V_14_out_ap_vld : OUT STD_LOGIC;
    W_V_13_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    W_V_13_out_ap_vld : OUT STD_LOGIC;
    W_V_12_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    W_V_12_out_ap_vld : OUT STD_LOGIC;
    W_V_11_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    W_V_11_out_ap_vld : OUT STD_LOGIC;
    W_V_10_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    W_V_10_out_ap_vld : OUT STD_LOGIC;
    W_V_9_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    W_V_9_out_ap_vld : OUT STD_LOGIC;
    W_V_8_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    W_V_8_out_ap_vld : OUT STD_LOGIC;
    W_V_7_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    W_V_7_out_ap_vld : OUT STD_LOGIC;
    W_V_6_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    W_V_6_out_ap_vld : OUT STD_LOGIC;
    W_V_5_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    W_V_5_out_ap_vld : OUT STD_LOGIC;
    W_V_4_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    W_V_4_out_ap_vld : OUT STD_LOGIC;
    W_V_3_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    W_V_3_out_ap_vld : OUT STD_LOGIC;
    W_V_2_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    W_V_2_out_ap_vld : OUT STD_LOGIC;
    W_V_1_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    W_V_1_out_ap_vld : OUT STD_LOGIC;
    W_V_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    W_V_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of sha512_generateMsgSchedule_Pipeline_LOOP_SHA512_GEN_WT16 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln1073_fu_431_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal w_strm34_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal W_V_16_fu_443_p18 : STD_LOGIC_VECTOR (63 downto 0);
    signal W_V_16_reg_740 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal t_V_fu_140 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln886_fu_437_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_t_V_1 : STD_LOGIC_VECTOR (4 downto 0);
    signal W_V_fu_144 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln511_fu_481_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal W_V_1_fu_148 : STD_LOGIC_VECTOR (63 downto 0);
    signal W_V_2_fu_152 : STD_LOGIC_VECTOR (63 downto 0);
    signal W_V_3_fu_156 : STD_LOGIC_VECTOR (63 downto 0);
    signal W_V_4_fu_160 : STD_LOGIC_VECTOR (63 downto 0);
    signal W_V_5_fu_164 : STD_LOGIC_VECTOR (63 downto 0);
    signal W_V_6_fu_168 : STD_LOGIC_VECTOR (63 downto 0);
    signal W_V_7_fu_172 : STD_LOGIC_VECTOR (63 downto 0);
    signal W_V_8_fu_176 : STD_LOGIC_VECTOR (63 downto 0);
    signal W_V_9_fu_180 : STD_LOGIC_VECTOR (63 downto 0);
    signal W_V_10_fu_184 : STD_LOGIC_VECTOR (63 downto 0);
    signal W_V_11_fu_188 : STD_LOGIC_VECTOR (63 downto 0);
    signal W_V_12_fu_192 : STD_LOGIC_VECTOR (63 downto 0);
    signal W_V_13_fu_196 : STD_LOGIC_VECTOR (63 downto 0);
    signal W_V_14_fu_200 : STD_LOGIC_VECTOR (63 downto 0);
    signal W_V_15_fu_204 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component sha512_mux_165_64_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        din2 : IN STD_LOGIC_VECTOR (63 downto 0);
        din3 : IN STD_LOGIC_VECTOR (63 downto 0);
        din4 : IN STD_LOGIC_VECTOR (63 downto 0);
        din5 : IN STD_LOGIC_VECTOR (63 downto 0);
        din6 : IN STD_LOGIC_VECTOR (63 downto 0);
        din7 : IN STD_LOGIC_VECTOR (63 downto 0);
        din8 : IN STD_LOGIC_VECTOR (63 downto 0);
        din9 : IN STD_LOGIC_VECTOR (63 downto 0);
        din10 : IN STD_LOGIC_VECTOR (63 downto 0);
        din11 : IN STD_LOGIC_VECTOR (63 downto 0);
        din12 : IN STD_LOGIC_VECTOR (63 downto 0);
        din13 : IN STD_LOGIC_VECTOR (63 downto 0);
        din14 : IN STD_LOGIC_VECTOR (63 downto 0);
        din15 : IN STD_LOGIC_VECTOR (63 downto 0);
        din16 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component sha512_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_165_64_1_1_U29 : component sha512_mux_165_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 64,
        din8_WIDTH => 64,
        din9_WIDTH => 64,
        din10_WIDTH => 64,
        din11_WIDTH => 64,
        din12_WIDTH => 64,
        din13_WIDTH => 64,
        din14_WIDTH => 64,
        din15_WIDTH => 64,
        din16_WIDTH => 5,
        dout_WIDTH => 64)
    port map (
        din0 => blk_M_V,
        din1 => blk_M_V_1,
        din2 => blk_M_V_2,
        din3 => blk_M_V_3,
        din4 => blk_M_V_4,
        din5 => blk_M_V_5,
        din6 => blk_M_V_6,
        din7 => blk_M_V_7,
        din8 => blk_M_V_8,
        din9 => blk_M_V_9,
        din10 => blk_M_V_10,
        din11 => blk_M_V_11,
        din12 => blk_M_V_12,
        din13 => blk_M_V_13,
        din14 => blk_M_V_14,
        din15 => blk_M_V_15,
        din16 => ap_sig_allocacmp_t_V_1,
        dout => W_V_16_fu_443_p18);

    flow_control_loop_pipe_sequential_init_U : component sha512_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    t_V_fu_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln1073_fu_431_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    t_V_fu_140 <= add_ln886_fu_437_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    t_V_fu_140 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1073_fu_431_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln511_fu_481_p1 = ap_const_lv4_5))) then
                W_V_10_fu_184 <= W_V_16_fu_443_p18;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1073_fu_431_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln511_fu_481_p1 = ap_const_lv4_4))) then
                W_V_11_fu_188 <= W_V_16_fu_443_p18;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1073_fu_431_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln511_fu_481_p1 = ap_const_lv4_3))) then
                W_V_12_fu_192 <= W_V_16_fu_443_p18;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1073_fu_431_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln511_fu_481_p1 = ap_const_lv4_2))) then
                W_V_13_fu_196 <= W_V_16_fu_443_p18;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1073_fu_431_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln511_fu_481_p1 = ap_const_lv4_1))) then
                W_V_14_fu_200 <= W_V_16_fu_443_p18;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1073_fu_431_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln511_fu_481_p1 = ap_const_lv4_0))) then
                W_V_15_fu_204 <= W_V_16_fu_443_p18;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1073_fu_431_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                W_V_16_reg_740 <= W_V_16_fu_443_p18;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1073_fu_431_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln511_fu_481_p1 = ap_const_lv4_E))) then
                W_V_1_fu_148 <= W_V_16_fu_443_p18;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1073_fu_431_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln511_fu_481_p1 = ap_const_lv4_D))) then
                W_V_2_fu_152 <= W_V_16_fu_443_p18;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1073_fu_431_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln511_fu_481_p1 = ap_const_lv4_C))) then
                W_V_3_fu_156 <= W_V_16_fu_443_p18;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1073_fu_431_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln511_fu_481_p1 = ap_const_lv4_B))) then
                W_V_4_fu_160 <= W_V_16_fu_443_p18;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1073_fu_431_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln511_fu_481_p1 = ap_const_lv4_A))) then
                W_V_5_fu_164 <= W_V_16_fu_443_p18;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1073_fu_431_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln511_fu_481_p1 = ap_const_lv4_9))) then
                W_V_6_fu_168 <= W_V_16_fu_443_p18;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1073_fu_431_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln511_fu_481_p1 = ap_const_lv4_8))) then
                W_V_7_fu_172 <= W_V_16_fu_443_p18;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1073_fu_431_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln511_fu_481_p1 = ap_const_lv4_7))) then
                W_V_8_fu_176 <= W_V_16_fu_443_p18;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1073_fu_431_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln511_fu_481_p1 = ap_const_lv4_6))) then
                W_V_9_fu_180 <= W_V_16_fu_443_p18;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln1073_fu_431_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (trunc_ln511_fu_481_p1 = ap_const_lv4_F))) then
                W_V_fu_144 <= W_V_16_fu_443_p18;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    W_V_10_out <= W_V_10_fu_184;

    W_V_10_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln1073_fu_431_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln1073_fu_431_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W_V_10_out_ap_vld <= ap_const_logic_1;
        else 
            W_V_10_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    W_V_11_out <= W_V_11_fu_188;

    W_V_11_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln1073_fu_431_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln1073_fu_431_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W_V_11_out_ap_vld <= ap_const_logic_1;
        else 
            W_V_11_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    W_V_12_out <= W_V_12_fu_192;

    W_V_12_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln1073_fu_431_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln1073_fu_431_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W_V_12_out_ap_vld <= ap_const_logic_1;
        else 
            W_V_12_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    W_V_13_out <= W_V_13_fu_196;

    W_V_13_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln1073_fu_431_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln1073_fu_431_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W_V_13_out_ap_vld <= ap_const_logic_1;
        else 
            W_V_13_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    W_V_14_out <= W_V_14_fu_200;

    W_V_14_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln1073_fu_431_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln1073_fu_431_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W_V_14_out_ap_vld <= ap_const_logic_1;
        else 
            W_V_14_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    W_V_15_out <= W_V_15_fu_204;

    W_V_15_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln1073_fu_431_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln1073_fu_431_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W_V_15_out_ap_vld <= ap_const_logic_1;
        else 
            W_V_15_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    W_V_1_out <= W_V_1_fu_148;

    W_V_1_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln1073_fu_431_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln1073_fu_431_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W_V_1_out_ap_vld <= ap_const_logic_1;
        else 
            W_V_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    W_V_2_out <= W_V_2_fu_152;

    W_V_2_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln1073_fu_431_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln1073_fu_431_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W_V_2_out_ap_vld <= ap_const_logic_1;
        else 
            W_V_2_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    W_V_3_out <= W_V_3_fu_156;

    W_V_3_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln1073_fu_431_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln1073_fu_431_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W_V_3_out_ap_vld <= ap_const_logic_1;
        else 
            W_V_3_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    W_V_4_out <= W_V_4_fu_160;

    W_V_4_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln1073_fu_431_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln1073_fu_431_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W_V_4_out_ap_vld <= ap_const_logic_1;
        else 
            W_V_4_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    W_V_5_out <= W_V_5_fu_164;

    W_V_5_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln1073_fu_431_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln1073_fu_431_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W_V_5_out_ap_vld <= ap_const_logic_1;
        else 
            W_V_5_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    W_V_6_out <= W_V_6_fu_168;

    W_V_6_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln1073_fu_431_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln1073_fu_431_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W_V_6_out_ap_vld <= ap_const_logic_1;
        else 
            W_V_6_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    W_V_7_out <= W_V_7_fu_172;

    W_V_7_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln1073_fu_431_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln1073_fu_431_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W_V_7_out_ap_vld <= ap_const_logic_1;
        else 
            W_V_7_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    W_V_8_out <= W_V_8_fu_176;

    W_V_8_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln1073_fu_431_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln1073_fu_431_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W_V_8_out_ap_vld <= ap_const_logic_1;
        else 
            W_V_8_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    W_V_9_out <= W_V_9_fu_180;

    W_V_9_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln1073_fu_431_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln1073_fu_431_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W_V_9_out_ap_vld <= ap_const_logic_1;
        else 
            W_V_9_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    W_V_out <= W_V_fu_144;

    W_V_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln1073_fu_431_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln1073_fu_431_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W_V_out_ap_vld <= ap_const_logic_1;
        else 
            W_V_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add_ln886_fu_437_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_t_V_1) + unsigned(ap_const_lv5_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, w_strm34_full_n)
    begin
                ap_block_pp0_stage0_01001 <= ((w_strm34_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, w_strm34_full_n)
    begin
                ap_block_pp0_stage0_11001 <= ((w_strm34_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, w_strm34_full_n)
    begin
                ap_block_pp0_stage0_subdone <= ((w_strm34_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage0_iter1_assign_proc : process(w_strm34_full_n)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (w_strm34_full_n = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln1073_fu_431_p2)
    begin
        if (((icmp_ln1073_fu_431_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_t_V_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, t_V_fu_140, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_t_V_1 <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_t_V_1 <= t_V_fu_140;
        end if; 
    end process;

    icmp_ln1073_fu_431_p2 <= "1" when (ap_sig_allocacmp_t_V_1 = ap_const_lv5_10) else "0";
    trunc_ln511_fu_481_p1 <= ap_sig_allocacmp_t_V_1(4 - 1 downto 0);

    w_strm34_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, w_strm34_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            w_strm34_blk_n <= w_strm34_full_n;
        else 
            w_strm34_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    w_strm34_din <= W_V_16_reg_740;

    w_strm34_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            w_strm34_write <= ap_const_logic_1;
        else 
            w_strm34_write <= ap_const_logic_0;
        end if; 
    end process;

end behav;
