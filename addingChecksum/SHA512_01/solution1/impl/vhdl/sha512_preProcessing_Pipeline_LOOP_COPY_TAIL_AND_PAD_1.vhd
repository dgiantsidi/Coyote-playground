-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sha512_preProcessing_Pipeline_LOOP_COPY_TAIL_AND_PAD_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    inp512c_V_2 : IN STD_LOGIC_VECTOR (511 downto 0);
    b_M_V_13_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    b_M_V_13_out_ap_vld : OUT STD_LOGIC;
    b_M_V_12_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    b_M_V_12_out_ap_vld : OUT STD_LOGIC;
    b_M_V_11_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    b_M_V_11_out_ap_vld : OUT STD_LOGIC;
    b_M_V_10_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    b_M_V_10_out_ap_vld : OUT STD_LOGIC;
    b_M_V_9_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    b_M_V_9_out_ap_vld : OUT STD_LOGIC;
    b_M_V_8_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    b_M_V_8_out_ap_vld : OUT STD_LOGIC;
    b_M_V_7_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    b_M_V_7_out_ap_vld : OUT STD_LOGIC;
    b_M_V_6_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    b_M_V_6_out_ap_vld : OUT STD_LOGIC;
    b_M_V_5_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    b_M_V_5_out_ap_vld : OUT STD_LOGIC;
    b_M_V_4_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    b_M_V_4_out_ap_vld : OUT STD_LOGIC;
    b_M_V_3_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    b_M_V_3_out_ap_vld : OUT STD_LOGIC;
    b_M_V_2_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    b_M_V_2_out_ap_vld : OUT STD_LOGIC;
    b_M_V_1_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    b_M_V_1_out_ap_vld : OUT STD_LOGIC;
    b_M_V_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    b_M_V_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of sha512_preProcessing_Pipeline_LOOP_COPY_TAIL_AND_PAD_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv64_8000000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv9_3F : STD_LOGIC_VECTOR (8 downto 0) := "000111111";
    constant ap_const_lv32_1FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111111";
    constant ap_const_lv10_1FF : STD_LOGIC_VECTOR (9 downto 0) := "0111111111";
    constant ap_const_lv512_lc_1 : STD_LOGIC_VECTOR (511 downto 0) := "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln1073_fu_276_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal index_V_fu_104 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln886_fu_282_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_index_V_1 : STD_LOGIC_VECTOR (3 downto 0);
    signal index_V_1_load_fu_273_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal b_M_V_fu_108 : STD_LOGIC_VECTOR (63 downto 0);
    signal b_M_V_15_fu_418_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_292_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal b_M_V_1_fu_112 : STD_LOGIC_VECTOR (63 downto 0);
    signal b_M_V_2_fu_116 : STD_LOGIC_VECTOR (63 downto 0);
    signal b_M_V_3_fu_120 : STD_LOGIC_VECTOR (63 downto 0);
    signal b_M_V_4_fu_124 : STD_LOGIC_VECTOR (63 downto 0);
    signal b_M_V_5_fu_128 : STD_LOGIC_VECTOR (63 downto 0);
    signal b_M_V_6_fu_132 : STD_LOGIC_VECTOR (63 downto 0);
    signal b_M_V_7_fu_136 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1073_fu_288_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal xor_ln598_fu_300_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal Lo_fu_306_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal Hi_fu_314_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln674_fu_326_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln674_1_fu_330_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln674_fu_320_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln674_fu_344_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln674_1_fu_356_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1_fu_334_p4 : STD_LOGIC_VECTOR (511 downto 0);
    signal xor_ln674_fu_350_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln674_fu_362_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln674_2_fu_378_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln674_2_fu_386_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln674_1_fu_370_p3 : STD_LOGIC_VECTOR (511 downto 0);
    signal zext_ln674_2_fu_392_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal zext_ln674_3_fu_396_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal lshr_ln674_fu_400_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal lshr_ln674_1_fu_406_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal p_Result_s_fu_412_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component sha512_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component sha512_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_start_int = ap_const_logic_1) and (ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    index_V_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((icmp_ln1073_fu_276_p2 = ap_const_lv1_0)) then 
                    index_V_fu_104 <= add_ln886_fu_282_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    index_V_fu_104 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_292_p3 = ap_const_lv1_0) and (index_V_1_load_fu_273_p1 = ap_const_lv4_1) and (ap_start_int = ap_const_logic_1) and (icmp_ln1073_fu_276_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                b_M_V_1_fu_112 <= b_M_V_15_fu_418_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_292_p3 = ap_const_lv1_0) and (index_V_1_load_fu_273_p1 = ap_const_lv4_2) and (ap_start_int = ap_const_logic_1) and (icmp_ln1073_fu_276_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                b_M_V_2_fu_116 <= b_M_V_15_fu_418_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_292_p3 = ap_const_lv1_0) and (index_V_1_load_fu_273_p1 = ap_const_lv4_3) and (ap_start_int = ap_const_logic_1) and (icmp_ln1073_fu_276_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                b_M_V_3_fu_120 <= b_M_V_15_fu_418_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_292_p3 = ap_const_lv1_0) and (index_V_1_load_fu_273_p1 = ap_const_lv4_4) and (ap_start_int = ap_const_logic_1) and (icmp_ln1073_fu_276_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                b_M_V_4_fu_124 <= b_M_V_15_fu_418_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_292_p3 = ap_const_lv1_0) and (index_V_1_load_fu_273_p1 = ap_const_lv4_5) and (ap_start_int = ap_const_logic_1) and (icmp_ln1073_fu_276_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                b_M_V_5_fu_128 <= b_M_V_15_fu_418_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_292_p3 = ap_const_lv1_0) and (index_V_1_load_fu_273_p1 = ap_const_lv4_6) and (ap_start_int = ap_const_logic_1) and (icmp_ln1073_fu_276_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                b_M_V_6_fu_132 <= b_M_V_15_fu_418_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_292_p3 = ap_const_lv1_0) and (index_V_1_load_fu_273_p1 = ap_const_lv4_7) and (ap_start_int = ap_const_logic_1) and (icmp_ln1073_fu_276_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                b_M_V_7_fu_136 <= b_M_V_15_fu_418_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((index_V_1_load_fu_273_p1 = ap_const_lv4_5)) and not((index_V_1_load_fu_273_p1 = ap_const_lv4_4)) and not((index_V_1_load_fu_273_p1 = ap_const_lv4_3)) and not((index_V_1_load_fu_273_p1 = ap_const_lv4_2)) and not((index_V_1_load_fu_273_p1 = ap_const_lv4_1)) and not((index_V_1_load_fu_273_p1 = ap_const_lv4_7)) and not((index_V_1_load_fu_273_p1 = ap_const_lv4_6)) and (tmp_fu_292_p3 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (icmp_ln1073_fu_276_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                b_M_V_fu_108 <= b_M_V_15_fu_418_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    Hi_fu_314_p2 <= (ap_const_lv9_3F or Lo_fu_306_p3);
    Lo_fu_306_p3 <= (xor_ln598_fu_300_p2 & ap_const_lv6_0);
    add_ln886_fu_282_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_index_V_1) + unsigned(ap_const_lv4_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start_int)
    begin
        if ((ap_start_int = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start_int = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_state1, icmp_ln1073_fu_276_p2, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln1073_fu_276_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_state1, ap_loop_exit_ready, ap_done_reg, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_index_V_1_assign_proc : process(ap_CS_fsm_state1, index_V_fu_104, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_sig_allocacmp_index_V_1 <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_index_V_1 <= index_V_fu_104;
        end if; 
    end process;

    b_M_V_10_out <= ap_const_lv64_0;

    b_M_V_10_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, icmp_ln1073_fu_276_p2, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln1073_fu_276_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            b_M_V_10_out_ap_vld <= ap_const_logic_1;
        else 
            b_M_V_10_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    b_M_V_11_out <= ap_const_lv64_0;

    b_M_V_11_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, icmp_ln1073_fu_276_p2, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln1073_fu_276_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            b_M_V_11_out_ap_vld <= ap_const_logic_1;
        else 
            b_M_V_11_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    b_M_V_12_out <= ap_const_lv64_0;

    b_M_V_12_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, icmp_ln1073_fu_276_p2, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln1073_fu_276_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            b_M_V_12_out_ap_vld <= ap_const_logic_1;
        else 
            b_M_V_12_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    b_M_V_13_out <= ap_const_lv64_0;

    b_M_V_13_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, icmp_ln1073_fu_276_p2, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln1073_fu_276_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            b_M_V_13_out_ap_vld <= ap_const_logic_1;
        else 
            b_M_V_13_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    b_M_V_15_fu_418_p1 <= p_Result_s_fu_412_p2(64 - 1 downto 0);
    b_M_V_1_out <= b_M_V_1_fu_112;

    b_M_V_1_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, icmp_ln1073_fu_276_p2, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln1073_fu_276_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            b_M_V_1_out_ap_vld <= ap_const_logic_1;
        else 
            b_M_V_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    b_M_V_2_out <= b_M_V_2_fu_116;

    b_M_V_2_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, icmp_ln1073_fu_276_p2, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln1073_fu_276_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            b_M_V_2_out_ap_vld <= ap_const_logic_1;
        else 
            b_M_V_2_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    b_M_V_3_out <= b_M_V_3_fu_120;

    b_M_V_3_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, icmp_ln1073_fu_276_p2, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln1073_fu_276_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            b_M_V_3_out_ap_vld <= ap_const_logic_1;
        else 
            b_M_V_3_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    b_M_V_4_out <= b_M_V_4_fu_124;

    b_M_V_4_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, icmp_ln1073_fu_276_p2, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln1073_fu_276_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            b_M_V_4_out_ap_vld <= ap_const_logic_1;
        else 
            b_M_V_4_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    b_M_V_5_out <= b_M_V_5_fu_128;

    b_M_V_5_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, icmp_ln1073_fu_276_p2, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln1073_fu_276_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            b_M_V_5_out_ap_vld <= ap_const_logic_1;
        else 
            b_M_V_5_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    b_M_V_6_out <= b_M_V_6_fu_132;

    b_M_V_6_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, icmp_ln1073_fu_276_p2, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln1073_fu_276_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            b_M_V_6_out_ap_vld <= ap_const_logic_1;
        else 
            b_M_V_6_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    b_M_V_7_out <= b_M_V_7_fu_136;

    b_M_V_7_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, icmp_ln1073_fu_276_p2, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln1073_fu_276_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            b_M_V_7_out_ap_vld <= ap_const_logic_1;
        else 
            b_M_V_7_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    b_M_V_8_out <= ap_const_lv64_8000000000000000;

    b_M_V_8_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, icmp_ln1073_fu_276_p2, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln1073_fu_276_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            b_M_V_8_out_ap_vld <= ap_const_logic_1;
        else 
            b_M_V_8_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    b_M_V_9_out <= ap_const_lv64_0;

    b_M_V_9_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, icmp_ln1073_fu_276_p2, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln1073_fu_276_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            b_M_V_9_out_ap_vld <= ap_const_logic_1;
        else 
            b_M_V_9_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    b_M_V_out <= b_M_V_fu_108;

    b_M_V_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, icmp_ln1073_fu_276_p2, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (icmp_ln1073_fu_276_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            b_M_V_out_ap_vld <= ap_const_logic_1;
        else 
            b_M_V_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln1073_fu_276_p2 <= "1" when (ap_sig_allocacmp_index_V_1 = ap_const_lv4_E) else "0";
    icmp_ln674_fu_320_p2 <= "1" when (unsigned(Lo_fu_306_p3) > unsigned(Hi_fu_314_p2)) else "0";
    index_V_1_load_fu_273_p1 <= ap_sig_allocacmp_index_V_1;
    lshr_ln674_1_fu_406_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv512_lc_1),to_integer(unsigned('0' & zext_ln674_3_fu_396_p1(31-1 downto 0)))));
    lshr_ln674_fu_400_p2 <= std_logic_vector(shift_right(unsigned(select_ln674_1_fu_370_p3),to_integer(unsigned('0' & zext_ln674_2_fu_392_p1(31-1 downto 0)))));
    p_Result_s_fu_412_p2 <= (lshr_ln674_fu_400_p2 and lshr_ln674_1_fu_406_p2);
    select_ln674_1_fu_370_p3 <= 
        tmp_1_fu_334_p4 when (icmp_ln674_fu_320_p2(0) = '1') else 
        inp512c_V_2;
    select_ln674_2_fu_378_p3 <= 
        xor_ln674_fu_350_p2 when (icmp_ln674_fu_320_p2(0) = '1') else 
        zext_ln674_fu_326_p1;
    select_ln674_fu_362_p3 <= 
        sub_ln674_fu_344_p2 when (icmp_ln674_fu_320_p2(0) = '1') else 
        sub_ln674_1_fu_356_p2;
    sub_ln674_1_fu_356_p2 <= std_logic_vector(unsigned(zext_ln674_1_fu_330_p1) - unsigned(zext_ln674_fu_326_p1));
    sub_ln674_2_fu_386_p2 <= std_logic_vector(unsigned(ap_const_lv10_1FF) - unsigned(select_ln674_fu_362_p3));
    sub_ln674_fu_344_p2 <= std_logic_vector(unsigned(zext_ln674_fu_326_p1) - unsigned(zext_ln674_1_fu_330_p1));
    
    tmp_1_fu_334_p4_proc : process(inp512c_V_2)
    variable vlo_cpy : STD_LOGIC_VECTOR(512+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(512+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(512 - 1 downto 0);
    variable tmp_1_fu_334_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(512 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(512 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(512 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(9 - 1 downto 0) := ap_const_lv32_1FF(9 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(9 - 1 downto 0) := ap_const_lv32_0(9 - 1 downto 0);
        v0_cpy := inp512c_V_2;
        if (vlo_cpy(9 - 1 downto 0) > vhi_cpy(9 - 1 downto 0)) then
            vhi_cpy(9-1 downto 0) := std_logic_vector(512-1-unsigned(ap_const_lv32_0(9-1 downto 0)));
            vlo_cpy(9-1 downto 0) := std_logic_vector(512-1-unsigned(ap_const_lv32_1FF(9-1 downto 0)));
            for tmp_1_fu_334_p4_i in 0 to 512-1 loop
                v0_cpy(tmp_1_fu_334_p4_i) := inp512c_V_2(512-1-tmp_1_fu_334_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(9-1 downto 0)))));

        section := (others=>'0');
        section(9-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(9-1 downto 0)) - unsigned(vlo_cpy(9-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(512-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_1_fu_334_p4 <= resvalue(512-1 downto 0);
    end process;

    tmp_fu_292_p3 <= ap_sig_allocacmp_index_V_1(3 downto 3);
    trunc_ln1073_fu_288_p1 <= ap_sig_allocacmp_index_V_1(3 - 1 downto 0);
    xor_ln598_fu_300_p2 <= (trunc_ln1073_fu_288_p1 xor ap_const_lv3_7);
    xor_ln674_fu_350_p2 <= (zext_ln674_fu_326_p1 xor ap_const_lv10_1FF);
    zext_ln674_1_fu_330_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Hi_fu_314_p2),10));
    zext_ln674_2_fu_392_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln674_2_fu_378_p3),512));
    zext_ln674_3_fu_396_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln674_2_fu_386_p2),512));
    zext_ln674_fu_326_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Lo_fu_306_p3),10));
end behav;
