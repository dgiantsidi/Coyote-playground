// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module sha512_preProcessing_Pipeline_LOOP_COPY_TAIL_AND_PAD_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        inp512c_V_2,
        b_M_V_13_out,
        b_M_V_13_out_ap_vld,
        b_M_V_12_out,
        b_M_V_12_out_ap_vld,
        b_M_V_11_out,
        b_M_V_11_out_ap_vld,
        b_M_V_10_out,
        b_M_V_10_out_ap_vld,
        b_M_V_9_out,
        b_M_V_9_out_ap_vld,
        b_M_V_8_out,
        b_M_V_8_out_ap_vld,
        b_M_V_7_out,
        b_M_V_7_out_ap_vld,
        b_M_V_6_out,
        b_M_V_6_out_ap_vld,
        b_M_V_5_out,
        b_M_V_5_out_ap_vld,
        b_M_V_4_out,
        b_M_V_4_out_ap_vld,
        b_M_V_3_out,
        b_M_V_3_out_ap_vld,
        b_M_V_2_out,
        b_M_V_2_out_ap_vld,
        b_M_V_1_out,
        b_M_V_1_out_ap_vld,
        b_M_V_out,
        b_M_V_out_ap_vld
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [511:0] inp512c_V_2;
output  [63:0] b_M_V_13_out;
output   b_M_V_13_out_ap_vld;
output  [63:0] b_M_V_12_out;
output   b_M_V_12_out_ap_vld;
output  [63:0] b_M_V_11_out;
output   b_M_V_11_out_ap_vld;
output  [63:0] b_M_V_10_out;
output   b_M_V_10_out_ap_vld;
output  [63:0] b_M_V_9_out;
output   b_M_V_9_out_ap_vld;
output  [63:0] b_M_V_8_out;
output   b_M_V_8_out_ap_vld;
output  [63:0] b_M_V_7_out;
output   b_M_V_7_out_ap_vld;
output  [63:0] b_M_V_6_out;
output   b_M_V_6_out_ap_vld;
output  [63:0] b_M_V_5_out;
output   b_M_V_5_out_ap_vld;
output  [63:0] b_M_V_4_out;
output   b_M_V_4_out_ap_vld;
output  [63:0] b_M_V_3_out;
output   b_M_V_3_out_ap_vld;
output  [63:0] b_M_V_2_out;
output   b_M_V_2_out_ap_vld;
output  [63:0] b_M_V_1_out;
output   b_M_V_1_out_ap_vld;
output  [63:0] b_M_V_out;
output   b_M_V_out_ap_vld;

reg ap_idle;
reg b_M_V_13_out_ap_vld;
reg b_M_V_12_out_ap_vld;
reg b_M_V_11_out_ap_vld;
reg b_M_V_10_out_ap_vld;
reg b_M_V_9_out_ap_vld;
reg b_M_V_8_out_ap_vld;
reg b_M_V_7_out_ap_vld;
reg b_M_V_6_out_ap_vld;
reg b_M_V_5_out_ap_vld;
reg b_M_V_4_out_ap_vld;
reg b_M_V_3_out_ap_vld;
reg b_M_V_2_out_ap_vld;
reg b_M_V_1_out_ap_vld;
reg b_M_V_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln1073_fu_276_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [3:0] index_V_fu_104;
wire   [3:0] add_ln886_fu_282_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_index_V_1;
wire   [3:0] index_V_1_load_fu_273_p1;
reg   [63:0] b_M_V_fu_108;
wire   [63:0] b_M_V_15_fu_418_p1;
wire   [0:0] tmp_fu_292_p3;
reg   [63:0] b_M_V_1_fu_112;
reg   [63:0] b_M_V_2_fu_116;
reg   [63:0] b_M_V_3_fu_120;
reg   [63:0] b_M_V_4_fu_124;
reg   [63:0] b_M_V_5_fu_128;
reg   [63:0] b_M_V_6_fu_132;
reg   [63:0] b_M_V_7_fu_136;
wire   [2:0] trunc_ln1073_fu_288_p1;
wire   [2:0] xor_ln598_fu_300_p2;
wire   [8:0] Lo_fu_306_p3;
wire   [8:0] Hi_fu_314_p2;
wire   [9:0] zext_ln674_fu_326_p1;
wire   [9:0] zext_ln674_1_fu_330_p1;
wire   [0:0] icmp_ln674_fu_320_p2;
wire   [9:0] sub_ln674_fu_344_p2;
wire   [9:0] sub_ln674_1_fu_356_p2;
reg   [511:0] tmp_1_fu_334_p4;
wire   [9:0] xor_ln674_fu_350_p2;
wire   [9:0] select_ln674_fu_362_p3;
wire   [9:0] select_ln674_2_fu_378_p3;
wire   [9:0] sub_ln674_2_fu_386_p2;
wire   [511:0] select_ln674_1_fu_370_p3;
wire   [511:0] zext_ln674_2_fu_392_p1;
wire   [511:0] zext_ln674_3_fu_396_p1;
wire   [511:0] lshr_ln674_fu_400_p2;
wire   [511:0] lshr_ln674_1_fu_406_p2;
wire   [511:0] p_Result_s_fu_412_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_done_reg = 1'b0;
end

sha512_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_start_int == 1'b1) & (ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln1073_fu_276_p2 == 1'd0)) begin
            index_V_fu_104 <= add_ln886_fu_282_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            index_V_fu_104 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_292_p3 == 1'd0) & (index_V_1_load_fu_273_p1 == 4'd1) & (ap_start_int == 1'b1) & (icmp_ln1073_fu_276_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        b_M_V_1_fu_112 <= b_M_V_15_fu_418_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_292_p3 == 1'd0) & (index_V_1_load_fu_273_p1 == 4'd2) & (ap_start_int == 1'b1) & (icmp_ln1073_fu_276_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        b_M_V_2_fu_116 <= b_M_V_15_fu_418_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_292_p3 == 1'd0) & (index_V_1_load_fu_273_p1 == 4'd3) & (ap_start_int == 1'b1) & (icmp_ln1073_fu_276_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        b_M_V_3_fu_120 <= b_M_V_15_fu_418_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_292_p3 == 1'd0) & (index_V_1_load_fu_273_p1 == 4'd4) & (ap_start_int == 1'b1) & (icmp_ln1073_fu_276_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        b_M_V_4_fu_124 <= b_M_V_15_fu_418_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_292_p3 == 1'd0) & (index_V_1_load_fu_273_p1 == 4'd5) & (ap_start_int == 1'b1) & (icmp_ln1073_fu_276_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        b_M_V_5_fu_128 <= b_M_V_15_fu_418_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_292_p3 == 1'd0) & (index_V_1_load_fu_273_p1 == 4'd6) & (ap_start_int == 1'b1) & (icmp_ln1073_fu_276_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        b_M_V_6_fu_132 <= b_M_V_15_fu_418_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_292_p3 == 1'd0) & (index_V_1_load_fu_273_p1 == 4'd7) & (ap_start_int == 1'b1) & (icmp_ln1073_fu_276_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        b_M_V_7_fu_136 <= b_M_V_15_fu_418_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~(index_V_1_load_fu_273_p1 == 4'd5) & ~(index_V_1_load_fu_273_p1 == 4'd4) & ~(index_V_1_load_fu_273_p1 == 4'd3) & ~(index_V_1_load_fu_273_p1 == 4'd2) & ~(index_V_1_load_fu_273_p1 == 4'd1) & ~(index_V_1_load_fu_273_p1 == 4'd7) & ~(index_V_1_load_fu_273_p1 == 4'd6) & (tmp_fu_292_p3 == 1'd0) & (ap_start_int == 1'b1) & (icmp_ln1073_fu_276_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        b_M_V_fu_108 <= b_M_V_15_fu_418_p1;
    end
end

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1073_fu_276_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_index_V_1 = 4'd0;
    end else begin
        ap_sig_allocacmp_index_V_1 = index_V_fu_104;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1073_fu_276_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        b_M_V_10_out_ap_vld = 1'b1;
    end else begin
        b_M_V_10_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1073_fu_276_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        b_M_V_11_out_ap_vld = 1'b1;
    end else begin
        b_M_V_11_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1073_fu_276_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        b_M_V_12_out_ap_vld = 1'b1;
    end else begin
        b_M_V_12_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1073_fu_276_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        b_M_V_13_out_ap_vld = 1'b1;
    end else begin
        b_M_V_13_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1073_fu_276_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        b_M_V_1_out_ap_vld = 1'b1;
    end else begin
        b_M_V_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1073_fu_276_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        b_M_V_2_out_ap_vld = 1'b1;
    end else begin
        b_M_V_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1073_fu_276_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        b_M_V_3_out_ap_vld = 1'b1;
    end else begin
        b_M_V_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1073_fu_276_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        b_M_V_4_out_ap_vld = 1'b1;
    end else begin
        b_M_V_4_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1073_fu_276_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        b_M_V_5_out_ap_vld = 1'b1;
    end else begin
        b_M_V_5_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1073_fu_276_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        b_M_V_6_out_ap_vld = 1'b1;
    end else begin
        b_M_V_6_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1073_fu_276_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        b_M_V_7_out_ap_vld = 1'b1;
    end else begin
        b_M_V_7_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1073_fu_276_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        b_M_V_8_out_ap_vld = 1'b1;
    end else begin
        b_M_V_8_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1073_fu_276_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        b_M_V_9_out_ap_vld = 1'b1;
    end else begin
        b_M_V_9_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (icmp_ln1073_fu_276_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        b_M_V_out_ap_vld = 1'b1;
    end else begin
        b_M_V_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Hi_fu_314_p2 = (9'd63 | Lo_fu_306_p3);

assign Lo_fu_306_p3 = {{xor_ln598_fu_300_p2}, {6'd0}};

assign add_ln886_fu_282_p2 = (ap_sig_allocacmp_index_V_1 + 4'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign b_M_V_10_out = 64'd0;

assign b_M_V_11_out = 64'd0;

assign b_M_V_12_out = 64'd0;

assign b_M_V_13_out = 64'd0;

assign b_M_V_15_fu_418_p1 = p_Result_s_fu_412_p2[63:0];

assign b_M_V_1_out = b_M_V_1_fu_112;

assign b_M_V_2_out = b_M_V_2_fu_116;

assign b_M_V_3_out = b_M_V_3_fu_120;

assign b_M_V_4_out = b_M_V_4_fu_124;

assign b_M_V_5_out = b_M_V_5_fu_128;

assign b_M_V_6_out = b_M_V_6_fu_132;

assign b_M_V_7_out = b_M_V_7_fu_136;

assign b_M_V_8_out = 64'd9223372036854775808;

assign b_M_V_9_out = 64'd0;

assign b_M_V_out = b_M_V_fu_108;

assign icmp_ln1073_fu_276_p2 = ((ap_sig_allocacmp_index_V_1 == 4'd14) ? 1'b1 : 1'b0);

assign icmp_ln674_fu_320_p2 = ((Lo_fu_306_p3 > Hi_fu_314_p2) ? 1'b1 : 1'b0);

assign index_V_1_load_fu_273_p1 = ap_sig_allocacmp_index_V_1;

assign lshr_ln674_1_fu_406_p2 = 512'd13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095 >> zext_ln674_3_fu_396_p1;

assign lshr_ln674_fu_400_p2 = select_ln674_1_fu_370_p3 >> zext_ln674_2_fu_392_p1;

assign p_Result_s_fu_412_p2 = (lshr_ln674_fu_400_p2 & lshr_ln674_1_fu_406_p2);

assign select_ln674_1_fu_370_p3 = ((icmp_ln674_fu_320_p2[0:0] == 1'b1) ? tmp_1_fu_334_p4 : inp512c_V_2);

assign select_ln674_2_fu_378_p3 = ((icmp_ln674_fu_320_p2[0:0] == 1'b1) ? xor_ln674_fu_350_p2 : zext_ln674_fu_326_p1);

assign select_ln674_fu_362_p3 = ((icmp_ln674_fu_320_p2[0:0] == 1'b1) ? sub_ln674_fu_344_p2 : sub_ln674_1_fu_356_p2);

assign sub_ln674_1_fu_356_p2 = (zext_ln674_1_fu_330_p1 - zext_ln674_fu_326_p1);

assign sub_ln674_2_fu_386_p2 = (10'd511 - select_ln674_fu_362_p3);

assign sub_ln674_fu_344_p2 = (zext_ln674_fu_326_p1 - zext_ln674_1_fu_330_p1);

integer ap_tvar_int_0;

always @ (inp512c_V_2) begin
    for (ap_tvar_int_0 = 512 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 511 - 0) begin
            tmp_1_fu_334_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_1_fu_334_p4[ap_tvar_int_0] = inp512c_V_2[511 - ap_tvar_int_0];
        end
    end
end

assign tmp_fu_292_p3 = ap_sig_allocacmp_index_V_1[32'd3];

assign trunc_ln1073_fu_288_p1 = ap_sig_allocacmp_index_V_1[2:0];

assign xor_ln598_fu_300_p2 = (trunc_ln1073_fu_288_p1 ^ 3'd7);

assign xor_ln674_fu_350_p2 = (zext_ln674_fu_326_p1 ^ 10'd511);

assign zext_ln674_1_fu_330_p1 = Hi_fu_314_p2;

assign zext_ln674_2_fu_392_p1 = select_ln674_2_fu_378_p3;

assign zext_ln674_3_fu_396_p1 = sub_ln674_2_fu_386_p2;

assign zext_ln674_fu_326_p1 = Lo_fu_306_p3;

endmodule //sha512_preProcessing_Pipeline_LOOP_COPY_TAIL_AND_PAD_1
