// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module sha512_SHA512Digest_64u_512u_Pipeline_LOOP_SHA1_UPDATE_80_ROUNDS (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        w_strm34_dout,
        w_strm34_num_data_valid,
        w_strm34_fifo_cap,
        w_strm34_empty_n,
        w_strm34_read,
        h_V,
        g_V,
        f_V,
        e_V,
        d_V,
        c_V,
        b_V,
        a_V,
        h_V_1_out,
        h_V_1_out_ap_vld,
        g_V_3_out,
        g_V_3_out_ap_vld,
        f_V_3_out,
        f_V_3_out_ap_vld,
        e_V_3_out,
        e_V_3_out_ap_vld,
        d_V_1_out,
        d_V_1_out_ap_vld,
        c_V_3_out,
        c_V_3_out_ap_vld,
        b_V_3_out,
        b_V_3_out_ap_vld,
        a_V_3_out,
        a_V_3_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] w_strm34_dout;
input  [5:0] w_strm34_num_data_valid;
input  [5:0] w_strm34_fifo_cap;
input   w_strm34_empty_n;
output   w_strm34_read;
input  [63:0] h_V;
input  [63:0] g_V;
input  [63:0] f_V;
input  [63:0] e_V;
input  [63:0] d_V;
input  [63:0] c_V;
input  [63:0] b_V;
input  [63:0] a_V;
output  [63:0] h_V_1_out;
output   h_V_1_out_ap_vld;
output  [63:0] g_V_3_out;
output   g_V_3_out_ap_vld;
output  [63:0] f_V_3_out;
output   f_V_3_out_ap_vld;
output  [63:0] e_V_3_out;
output   e_V_3_out_ap_vld;
output  [63:0] d_V_1_out;
output   d_V_1_out_ap_vld;
output  [63:0] c_V_3_out;
output   c_V_3_out_ap_vld;
output  [63:0] b_V_3_out;
output   b_V_3_out_ap_vld;
output  [63:0] a_V_3_out;
output   a_V_3_out_ap_vld;

reg ap_idle;
reg w_strm34_read;
reg h_V_1_out_ap_vld;
reg g_V_3_out_ap_vld;
reg f_V_3_out_ap_vld;
reg e_V_3_out_ap_vld;
reg d_V_1_out_ap_vld;
reg c_V_3_out_ap_vld;
reg b_V_3_out_ap_vld;
reg a_V_3_out_ap_vld;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
reg   [0:0] icmp_ln1073_reg_1043;
reg    ap_block_state2_pp0_stage1_iter0;
reg    ap_block_pp0_stage1_subdone;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    w_strm34_blk_n;
wire    ap_block_pp0_stage1;
reg   [6:0] t_V_2_reg_1037;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln1073_fu_472_p2;
reg   [63:0] a_V_3_reg_1047;
reg    ap_block_pp0_stage1_11001;
reg   [63:0] c_V_3_reg_1059;
wire   [63:0] T1_V_fu_790_p2;
reg   [63:0] T1_V_reg_1066;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage0_subdone;
reg   [63:0] c_V_1_fu_278;
wire    ap_loop_init;
wire    ap_block_pp0_stage0;
reg   [63:0] d_V_1_fu_282;
reg   [63:0] g_V_1_fu_286;
reg   [63:0] b_V_1_fu_290;
wire   [63:0] a_V_2_fu_925_p2;
reg   [63:0] h_V_1_fu_294;
reg   [6:0] t_V_fu_298;
wire   [6:0] add_ln886_fu_494_p2;
reg   [6:0] ap_sig_allocacmp_t_V_2;
reg   [63:0] d_V_2_fu_302;
reg   [63:0] f_V_1_fu_306;
wire   [63:0] e_V_2_fu_915_p2;
reg   [63:0] h_V_2_fu_310;
reg    ap_block_pp0_stage1_01001;
wire   [13:0] trunc_ln1739_fu_515_p1;
wire   [49:0] r_V_s_fu_505_p4;
wire   [17:0] trunc_ln1739_4_fu_537_p1;
wire   [45:0] r_V_2_fu_527_p4;
wire   [40:0] trunc_ln1739_5_fu_559_p1;
wire   [22:0] r_V_3_fu_549_p4;
wire   [63:0] ret_V_23_fu_519_p3;
wire   [63:0] ret_V_24_fu_541_p3;
wire   [63:0] xor_ln1545_fu_571_p2;
wire   [63:0] ret_V_25_fu_563_p3;
wire   [63:0] r_V_fu_589_p2;
wire   [63:0] ret_V_26_fu_583_p2;
wire   [63:0] ret_V_27_fu_595_p2;
wire   [63:0] ret_V_15_fu_601_p2;
wire   [63:0] tmp_fu_607_p82;
wire   [63:0] add_ln232_3_fu_778_p2;
wire   [63:0] ret_V_fu_577_p2;
wire   [63:0] add_ln232_4_fu_784_p2;
wire   [63:0] add_ln232_fu_772_p2;
wire   [27:0] trunc_ln1739_6_fu_831_p1;
wire   [35:0] r_V_4_fu_822_p4;
wire   [33:0] trunc_ln1739_7_fu_851_p1;
wire   [29:0] r_V_5_fu_842_p4;
wire   [38:0] trunc_ln1739_8_fu_871_p1;
wire   [24:0] r_V_6_fu_862_p4;
wire   [63:0] ret_V_28_fu_834_p3;
wire   [63:0] ret_V_29_fu_854_p3;
wire   [63:0] xor_ln1545_6_fu_882_p2;
wire   [63:0] ret_V_30_fu_874_p3;
wire   [63:0] xor_ln1545_8_fu_894_p2;
wire   [63:0] ret_V_31_fu_899_p2;
wire   [63:0] ret_V_32_fu_904_p2;
wire   [63:0] ret_V_22_fu_909_p2;
wire   [63:0] add_ln232_7_fu_920_p2;
wire   [63:0] ret_V_19_fu_888_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

sha512_mux_807_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .din2_WIDTH( 64 ),
    .din3_WIDTH( 64 ),
    .din4_WIDTH( 64 ),
    .din5_WIDTH( 64 ),
    .din6_WIDTH( 64 ),
    .din7_WIDTH( 64 ),
    .din8_WIDTH( 64 ),
    .din9_WIDTH( 64 ),
    .din10_WIDTH( 64 ),
    .din11_WIDTH( 64 ),
    .din12_WIDTH( 64 ),
    .din13_WIDTH( 64 ),
    .din14_WIDTH( 64 ),
    .din15_WIDTH( 64 ),
    .din16_WIDTH( 64 ),
    .din17_WIDTH( 64 ),
    .din18_WIDTH( 64 ),
    .din19_WIDTH( 64 ),
    .din20_WIDTH( 64 ),
    .din21_WIDTH( 64 ),
    .din22_WIDTH( 64 ),
    .din23_WIDTH( 64 ),
    .din24_WIDTH( 64 ),
    .din25_WIDTH( 64 ),
    .din26_WIDTH( 64 ),
    .din27_WIDTH( 64 ),
    .din28_WIDTH( 64 ),
    .din29_WIDTH( 64 ),
    .din30_WIDTH( 64 ),
    .din31_WIDTH( 64 ),
    .din32_WIDTH( 64 ),
    .din33_WIDTH( 64 ),
    .din34_WIDTH( 64 ),
    .din35_WIDTH( 64 ),
    .din36_WIDTH( 64 ),
    .din37_WIDTH( 64 ),
    .din38_WIDTH( 64 ),
    .din39_WIDTH( 64 ),
    .din40_WIDTH( 64 ),
    .din41_WIDTH( 64 ),
    .din42_WIDTH( 64 ),
    .din43_WIDTH( 64 ),
    .din44_WIDTH( 64 ),
    .din45_WIDTH( 64 ),
    .din46_WIDTH( 64 ),
    .din47_WIDTH( 64 ),
    .din48_WIDTH( 64 ),
    .din49_WIDTH( 64 ),
    .din50_WIDTH( 64 ),
    .din51_WIDTH( 64 ),
    .din52_WIDTH( 64 ),
    .din53_WIDTH( 64 ),
    .din54_WIDTH( 64 ),
    .din55_WIDTH( 64 ),
    .din56_WIDTH( 64 ),
    .din57_WIDTH( 64 ),
    .din58_WIDTH( 64 ),
    .din59_WIDTH( 64 ),
    .din60_WIDTH( 64 ),
    .din61_WIDTH( 64 ),
    .din62_WIDTH( 64 ),
    .din63_WIDTH( 64 ),
    .din64_WIDTH( 64 ),
    .din65_WIDTH( 64 ),
    .din66_WIDTH( 64 ),
    .din67_WIDTH( 64 ),
    .din68_WIDTH( 64 ),
    .din69_WIDTH( 64 ),
    .din70_WIDTH( 64 ),
    .din71_WIDTH( 64 ),
    .din72_WIDTH( 64 ),
    .din73_WIDTH( 64 ),
    .din74_WIDTH( 64 ),
    .din75_WIDTH( 64 ),
    .din76_WIDTH( 64 ),
    .din77_WIDTH( 64 ),
    .din78_WIDTH( 64 ),
    .din79_WIDTH( 64 ),
    .din80_WIDTH( 7 ),
    .dout_WIDTH( 64 ))
mux_807_64_1_1_U84(
    .din0(64'd4794697086780616226),
    .din1(64'd8158064640168781261),
    .din2(64'd13096744586834688815),
    .din3(64'd16840607885511220156),
    .din4(64'd4131703408338449720),
    .din5(64'd6480981068601479193),
    .din6(64'd10538285296894168987),
    .din7(64'd12329834152419229976),
    .din8(64'd15566598209576043074),
    .din9(64'd1334009975649890238),
    .din10(64'd2608012711638119052),
    .din11(64'd6128411473006802146),
    .din12(64'd8268148722764581231),
    .din13(64'd9286055187155687089),
    .din14(64'd11230858885718282805),
    .din15(64'd13951009754708518548),
    .din16(64'd16472876342353939154),
    .din17(64'd17275323862435702243),
    .din18(64'd1135362057144423861),
    .din19(64'd2597628984639134821),
    .din20(64'd3308224258029322869),
    .din21(64'd5365058923640841347),
    .din22(64'd6679025012923562964),
    .din23(64'd8573033837759648693),
    .din24(64'd10970295158949994411),
    .din25(64'd12119686244451234320),
    .din26(64'd12683024718118986047),
    .din27(64'd13788192230050041572),
    .din28(64'd14330467153632333762),
    .din29(64'd15395433587784984357),
    .din30(64'd489312712824947311),
    .din31(64'd1452737877330783856),
    .din32(64'd2861767655752347644),
    .din33(64'd3322285676063803686),
    .din34(64'd5560940570517711597),
    .din35(64'd5996557281743188959),
    .din36(64'd7280758554555802590),
    .din37(64'd8532644243296465576),
    .din38(64'd9350256976987008742),
    .din39(64'd10552545826968843579),
    .din40(64'd11727347734174303076),
    .din41(64'd12113106623233404929),
    .din42(64'd14000437183269869457),
    .din43(64'd14369950271660146224),
    .din44(64'd15101387698204529176),
    .din45(64'd15463397548674623760),
    .din46(64'd17586052441742319658),
    .din47(64'd1182934255886127544),
    .din48(64'd1847814050463011016),
    .din49(64'd2177327727835720531),
    .din50(64'd2830643537854262169),
    .din51(64'd3796741975233480872),
    .din52(64'd4115178125766777443),
    .din53(64'd5681478168544905931),
    .din54(64'd6601373596472566643),
    .din55(64'd7507060721942968483),
    .din56(64'd8399075790359081724),
    .din57(64'd8693463985226723168),
    .din58(64'd9568029438360202098),
    .din59(64'd10144078919501101548),
    .din60(64'd10430055236837252648),
    .din61(64'd11840083180663258601),
    .din62(64'd13761210420658862357),
    .din63(64'd14299343276471374635),
    .din64(64'd14566680578165727644),
    .din65(64'd15097957966210449927),
    .din66(64'd16922976911328602910),
    .din67(64'd17689382322260857208),
    .din68(64'd500013540394364858),
    .din69(64'd748580250866718886),
    .din70(64'd1242879168328830382),
    .din71(64'd1977374033974150939),
    .din72(64'd2944078676154940804),
    .din73(64'd3659926193048069267),
    .din74(64'd4368137639120453308),
    .din75(64'd4836135668995329356),
    .din76(64'd5532061633213252278),
    .din77(64'd6448918945643986474),
    .din78(64'd6902733635092675308),
    .din79(64'd7801388544844847127),
    .din80(t_V_2_reg_1037),
    .dout(tmp_fu_607_p82)
);

sha512_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_exit_pp0_iter0_stage1) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            b_V_1_fu_290 <= a_V;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            b_V_1_fu_290 <= a_V_2_fu_925_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            c_V_1_fu_278 <= b_V;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            c_V_1_fu_278 <= a_V_3_reg_1047;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            d_V_1_fu_282 <= d_V;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            d_V_1_fu_282 <= c_V_3_reg_1059;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            d_V_2_fu_302 <= c_V;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            d_V_2_fu_302 <= c_V_1_fu_278;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            f_V_1_fu_306 <= e_V;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            f_V_1_fu_306 <= e_V_2_fu_915_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        g_V_1_fu_286 <= f_V;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln1073_reg_1043 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        g_V_1_fu_286 <= f_V_1_fu_306;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        h_V_1_fu_294 <= h_V;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln1073_reg_1043 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        h_V_1_fu_294 <= h_V_2_fu_310;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        h_V_2_fu_310 <= g_V;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln1073_reg_1043 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        h_V_2_fu_310 <= g_V_1_fu_286;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        t_V_fu_298 <= 7'd0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln1073_reg_1043 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        t_V_fu_298 <= add_ln886_fu_494_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln1073_reg_1043 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        T1_V_reg_1066 <= T1_V_fu_790_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        a_V_3_reg_1047 <= b_V_1_fu_290;
        c_V_3_reg_1059 <= d_V_2_fu_302;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln1073_reg_1043 <= icmp_ln1073_fu_472_p2;
        t_V_2_reg_1037 <= ap_sig_allocacmp_t_V_2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln1073_reg_1043 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        a_V_3_out_ap_vld = 1'b1;
    end else begin
        a_V_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (icmp_ln1073_reg_1043 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_t_V_2 = 7'd0;
    end else begin
        ap_sig_allocacmp_t_V_2 = t_V_fu_298;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln1073_reg_1043 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        b_V_3_out_ap_vld = 1'b1;
    end else begin
        b_V_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln1073_reg_1043 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        c_V_3_out_ap_vld = 1'b1;
    end else begin
        c_V_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln1073_reg_1043 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        d_V_1_out_ap_vld = 1'b1;
    end else begin
        d_V_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln1073_reg_1043 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        e_V_3_out_ap_vld = 1'b1;
    end else begin
        e_V_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln1073_reg_1043 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        f_V_3_out_ap_vld = 1'b1;
    end else begin
        f_V_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln1073_reg_1043 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        g_V_3_out_ap_vld = 1'b1;
    end else begin
        g_V_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln1073_reg_1043 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        h_V_1_out_ap_vld = 1'b1;
    end else begin
        h_V_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (icmp_ln1073_reg_1043 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        w_strm34_blk_n = w_strm34_empty_n;
    end else begin
        w_strm34_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln1073_reg_1043 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        w_strm34_read = 1'b1;
    end else begin
        w_strm34_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign T1_V_fu_790_p2 = (add_ln232_4_fu_784_p2 + add_ln232_fu_772_p2);

assign a_V_2_fu_925_p2 = (add_ln232_7_fu_920_p2 + ret_V_19_fu_888_p2);

assign a_V_3_out = b_V_1_fu_290;

assign add_ln232_3_fu_778_p2 = (ret_V_15_fu_601_p2 + tmp_fu_607_p82);

assign add_ln232_4_fu_784_p2 = (add_ln232_3_fu_778_p2 + ret_V_fu_577_p2);

assign add_ln232_7_fu_920_p2 = (T1_V_reg_1066 + ret_V_22_fu_909_p2);

assign add_ln232_fu_772_p2 = (w_strm34_dout + h_V_1_fu_294);

assign add_ln886_fu_494_p2 = (t_V_2_reg_1037 + 7'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = ((icmp_ln1073_reg_1043 == 1'd0) & (w_strm34_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((icmp_ln1073_reg_1043 == 1'd0) & (w_strm34_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((icmp_ln1073_reg_1043 == 1'd0) & (w_strm34_empty_n == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage1_iter0 = ((icmp_ln1073_reg_1043 == 1'd0) & (w_strm34_empty_n == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign b_V_3_out = c_V_1_fu_278;

assign c_V_3_out = d_V_2_fu_302;

assign d_V_1_out = d_V_1_fu_282;

assign e_V_2_fu_915_p2 = (T1_V_reg_1066 + d_V_1_fu_282);

assign e_V_3_out = f_V_1_fu_306;

assign f_V_3_out = g_V_1_fu_286;

assign g_V_3_out = h_V_2_fu_310;

assign h_V_1_out = h_V_1_fu_294;

assign icmp_ln1073_fu_472_p2 = ((ap_sig_allocacmp_t_V_2 == 7'd80) ? 1'b1 : 1'b0);

assign r_V_2_fu_527_p4 = {{f_V_1_fu_306[63:18]}};

assign r_V_3_fu_549_p4 = {{f_V_1_fu_306[63:41]}};

assign r_V_4_fu_822_p4 = {{a_V_3_reg_1047[63:28]}};

assign r_V_5_fu_842_p4 = {{a_V_3_reg_1047[63:34]}};

assign r_V_6_fu_862_p4 = {{a_V_3_reg_1047[63:39]}};

assign r_V_fu_589_p2 = (f_V_1_fu_306 ^ 64'd18446744073709551615);

assign r_V_s_fu_505_p4 = {{f_V_1_fu_306[63:14]}};

assign ret_V_15_fu_601_p2 = (ret_V_27_fu_595_p2 ^ ret_V_26_fu_583_p2);

assign ret_V_19_fu_888_p2 = (xor_ln1545_6_fu_882_p2 ^ ret_V_30_fu_874_p3);

assign ret_V_22_fu_909_p2 = (ret_V_32_fu_904_p2 ^ ret_V_31_fu_899_p2);

assign ret_V_23_fu_519_p3 = {{trunc_ln1739_fu_515_p1}, {r_V_s_fu_505_p4}};

assign ret_V_24_fu_541_p3 = {{trunc_ln1739_4_fu_537_p1}, {r_V_2_fu_527_p4}};

assign ret_V_25_fu_563_p3 = {{trunc_ln1739_5_fu_559_p1}, {r_V_3_fu_549_p4}};

assign ret_V_26_fu_583_p2 = (g_V_1_fu_286 & f_V_1_fu_306);

assign ret_V_27_fu_595_p2 = (r_V_fu_589_p2 & h_V_2_fu_310);

assign ret_V_28_fu_834_p3 = {{trunc_ln1739_6_fu_831_p1}, {r_V_4_fu_822_p4}};

assign ret_V_29_fu_854_p3 = {{trunc_ln1739_7_fu_851_p1}, {r_V_5_fu_842_p4}};

assign ret_V_30_fu_874_p3 = {{trunc_ln1739_8_fu_871_p1}, {r_V_6_fu_862_p4}};

assign ret_V_31_fu_899_p2 = (xor_ln1545_8_fu_894_p2 & a_V_3_reg_1047);

assign ret_V_32_fu_904_p2 = (c_V_3_reg_1059 & c_V_1_fu_278);

assign ret_V_fu_577_p2 = (xor_ln1545_fu_571_p2 ^ ret_V_25_fu_563_p3);

assign trunc_ln1739_4_fu_537_p1 = f_V_1_fu_306[17:0];

assign trunc_ln1739_5_fu_559_p1 = f_V_1_fu_306[40:0];

assign trunc_ln1739_6_fu_831_p1 = a_V_3_reg_1047[27:0];

assign trunc_ln1739_7_fu_851_p1 = a_V_3_reg_1047[33:0];

assign trunc_ln1739_8_fu_871_p1 = a_V_3_reg_1047[38:0];

assign trunc_ln1739_fu_515_p1 = f_V_1_fu_306[13:0];

assign xor_ln1545_6_fu_882_p2 = (ret_V_29_fu_854_p3 ^ ret_V_28_fu_834_p3);

assign xor_ln1545_8_fu_894_p2 = (c_V_3_reg_1059 ^ c_V_1_fu_278);

assign xor_ln1545_fu_571_p2 = (ret_V_24_fu_541_p3 ^ ret_V_23_fu_519_p3);

endmodule //sha512_SHA512Digest_64u_512u_Pipeline_LOOP_SHA1_UPDATE_80_ROUNDS
