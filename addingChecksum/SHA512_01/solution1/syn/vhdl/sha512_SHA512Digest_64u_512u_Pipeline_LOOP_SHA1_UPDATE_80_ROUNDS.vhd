-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sha512_SHA512Digest_64u_512u_Pipeline_LOOP_SHA1_UPDATE_80_ROUNDS is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    w_strm34_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    w_strm34_num_data_valid : IN STD_LOGIC_VECTOR (5 downto 0);
    w_strm34_fifo_cap : IN STD_LOGIC_VECTOR (5 downto 0);
    w_strm34_empty_n : IN STD_LOGIC;
    w_strm34_read : OUT STD_LOGIC;
    h_V : IN STD_LOGIC_VECTOR (63 downto 0);
    g_V : IN STD_LOGIC_VECTOR (63 downto 0);
    f_V : IN STD_LOGIC_VECTOR (63 downto 0);
    e_V : IN STD_LOGIC_VECTOR (63 downto 0);
    d_V : IN STD_LOGIC_VECTOR (63 downto 0);
    c_V : IN STD_LOGIC_VECTOR (63 downto 0);
    b_V : IN STD_LOGIC_VECTOR (63 downto 0);
    a_V : IN STD_LOGIC_VECTOR (63 downto 0);
    h_V_1_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    h_V_1_out_ap_vld : OUT STD_LOGIC;
    g_V_3_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    g_V_3_out_ap_vld : OUT STD_LOGIC;
    f_V_3_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    f_V_3_out_ap_vld : OUT STD_LOGIC;
    e_V_3_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    e_V_3_out_ap_vld : OUT STD_LOGIC;
    d_V_1_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    d_V_1_out_ap_vld : OUT STD_LOGIC;
    c_V_3_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    c_V_3_out_ap_vld : OUT STD_LOGIC;
    b_V_3_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    b_V_3_out_ap_vld : OUT STD_LOGIC;
    a_V_3_out : OUT STD_LOGIC_VECTOR (63 downto 0);
    a_V_3_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of sha512_SHA512Digest_64u_512u_Pipeline_LOOP_SHA1_UPDATE_80_ROUNDS is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv7_50 : STD_LOGIC_VECTOR (6 downto 0) := "1010000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv64_428A2F98D728AE22 : STD_LOGIC_VECTOR (63 downto 0) := "0100001010001010001011111001100011010111001010001010111000100010";
    constant ap_const_lv64_7137449123EF65CD : STD_LOGIC_VECTOR (63 downto 0) := "0111000100110111010001001001000100100011111011110110010111001101";
    constant ap_const_lv64_B5C0FBCFEC4D3B2F : STD_LOGIC_VECTOR (63 downto 0) := "1011010111000000111110111100111111101100010011010011101100101111";
    constant ap_const_lv64_E9B5DBA58189DBBC : STD_LOGIC_VECTOR (63 downto 0) := "1110100110110101110110111010010110000001100010011101101110111100";
    constant ap_const_lv64_3956C25BF348B538 : STD_LOGIC_VECTOR (63 downto 0) := "0011100101010110110000100101101111110011010010001011010100111000";
    constant ap_const_lv64_59F111F1B605D019 : STD_LOGIC_VECTOR (63 downto 0) := "0101100111110001000100011111000110110110000001011101000000011001";
    constant ap_const_lv64_923F82A4AF194F9B : STD_LOGIC_VECTOR (63 downto 0) := "1001001000111111100000101010010010101111000110010100111110011011";
    constant ap_const_lv64_AB1C5ED5DA6D8118 : STD_LOGIC_VECTOR (63 downto 0) := "1010101100011100010111101101010111011010011011011000000100011000";
    constant ap_const_lv64_D807AA98A3030242 : STD_LOGIC_VECTOR (63 downto 0) := "1101100000000111101010101001100010100011000000110000001001000010";
    constant ap_const_lv64_12835B0145706FBE : STD_LOGIC_VECTOR (63 downto 0) := "0001001010000011010110110000000101000101011100000110111110111110";
    constant ap_const_lv64_243185BE4EE4B28C : STD_LOGIC_VECTOR (63 downto 0) := "0010010000110001100001011011111001001110111001001011001010001100";
    constant ap_const_lv64_550C7DC3D5FFB4E2 : STD_LOGIC_VECTOR (63 downto 0) := "0101010100001100011111011100001111010101111111111011010011100010";
    constant ap_const_lv64_72BE5D74F27B896F : STD_LOGIC_VECTOR (63 downto 0) := "0111001010111110010111010111010011110010011110111000100101101111";
    constant ap_const_lv64_80DEB1FE3B1696B1 : STD_LOGIC_VECTOR (63 downto 0) := "1000000011011110101100011111111000111011000101101001011010110001";
    constant ap_const_lv64_9BDC06A725C71235 : STD_LOGIC_VECTOR (63 downto 0) := "1001101111011100000001101010011100100101110001110001001000110101";
    constant ap_const_lv64_C19BF174CF692694 : STD_LOGIC_VECTOR (63 downto 0) := "1100000110011011111100010111010011001111011010010010011010010100";
    constant ap_const_lv64_E49B69C19EF14AD2 : STD_LOGIC_VECTOR (63 downto 0) := "1110010010011011011010011100000110011110111100010100101011010010";
    constant ap_const_lv64_EFBE4786384F25E3 : STD_LOGIC_VECTOR (63 downto 0) := "1110111110111110010001111000011000111000010011110010010111100011";
    constant ap_const_lv64_FC19DC68B8CD5B5 : STD_LOGIC_VECTOR (63 downto 0) := "0000111111000001100111011100011010001011100011001101010110110101";
    constant ap_const_lv64_240CA1CC77AC9C65 : STD_LOGIC_VECTOR (63 downto 0) := "0010010000001100101000011100110001110111101011001001110001100101";
    constant ap_const_lv64_2DE92C6F592B0275 : STD_LOGIC_VECTOR (63 downto 0) := "0010110111101001001011000110111101011001001010110000001001110101";
    constant ap_const_lv64_4A7484AA6EA6E483 : STD_LOGIC_VECTOR (63 downto 0) := "0100101001110100100001001010101001101110101001101110010010000011";
    constant ap_const_lv64_5CB0A9DCBD41FBD4 : STD_LOGIC_VECTOR (63 downto 0) := "0101110010110000101010011101110010111101010000011111101111010100";
    constant ap_const_lv64_76F988DA831153B5 : STD_LOGIC_VECTOR (63 downto 0) := "0111011011111001100010001101101010000011000100010101001110110101";
    constant ap_const_lv64_983E5152EE66DFAB : STD_LOGIC_VECTOR (63 downto 0) := "1001100000111110010100010101001011101110011001101101111110101011";
    constant ap_const_lv64_A831C66D2DB43210 : STD_LOGIC_VECTOR (63 downto 0) := "1010100000110001110001100110110100101101101101000011001000010000";
    constant ap_const_lv64_B00327C898FB213F : STD_LOGIC_VECTOR (63 downto 0) := "1011000000000011001001111100100010011000111110110010000100111111";
    constant ap_const_lv64_BF597FC7BEEF0EE4 : STD_LOGIC_VECTOR (63 downto 0) := "1011111101011001011111111100011110111110111011110000111011100100";
    constant ap_const_lv64_C6E00BF33DA88FC2 : STD_LOGIC_VECTOR (63 downto 0) := "1100011011100000000010111111001100111101101010001000111111000010";
    constant ap_const_lv64_D5A79147930AA725 : STD_LOGIC_VECTOR (63 downto 0) := "1101010110100111100100010100011110010011000010101010011100100101";
    constant ap_const_lv64_6CA6351E003826F : STD_LOGIC_VECTOR (63 downto 0) := "0000011011001010011000110101000111100000000000111000001001101111";
    constant ap_const_lv64_142929670A0E6E70 : STD_LOGIC_VECTOR (63 downto 0) := "0001010000101001001010010110011100001010000011100110111001110000";
    constant ap_const_lv64_27B70A8546D22FFC : STD_LOGIC_VECTOR (63 downto 0) := "0010011110110111000010101000010101000110110100100010111111111100";
    constant ap_const_lv64_2E1B21385C26C926 : STD_LOGIC_VECTOR (63 downto 0) := "0010111000011011001000010011100001011100001001101100100100100110";
    constant ap_const_lv64_4D2C6DFC5AC42AED : STD_LOGIC_VECTOR (63 downto 0) := "0100110100101100011011011111110001011010110001000010101011101101";
    constant ap_const_lv64_53380D139D95B3DF : STD_LOGIC_VECTOR (63 downto 0) := "0101001100111000000011010001001110011101100101011011001111011111";
    constant ap_const_lv64_650A73548BAF63DE : STD_LOGIC_VECTOR (63 downto 0) := "0110010100001010011100110101010010001011101011110110001111011110";
    constant ap_const_lv64_766A0ABB3C77B2A8 : STD_LOGIC_VECTOR (63 downto 0) := "0111011001101010000010101011101100111100011101111011001010101000";
    constant ap_const_lv64_81C2C92E47EDAEE6 : STD_LOGIC_VECTOR (63 downto 0) := "1000000111000010110010010010111001000111111011011010111011100110";
    constant ap_const_lv64_92722C851482353B : STD_LOGIC_VECTOR (63 downto 0) := "1001001001110010001011001000010100010100100000100011010100111011";
    constant ap_const_lv64_A2BFE8A14CF10364 : STD_LOGIC_VECTOR (63 downto 0) := "1010001010111111111010001010000101001100111100010000001101100100";
    constant ap_const_lv64_A81A664BBC423001 : STD_LOGIC_VECTOR (63 downto 0) := "1010100000011010011001100100101110111100010000100011000000000001";
    constant ap_const_lv64_C24B8B70D0F89791 : STD_LOGIC_VECTOR (63 downto 0) := "1100001001001011100010110111000011010000111110001001011110010001";
    constant ap_const_lv64_C76C51A30654BE30 : STD_LOGIC_VECTOR (63 downto 0) := "1100011101101100010100011010001100000110010101001011111000110000";
    constant ap_const_lv64_D192E819D6EF5218 : STD_LOGIC_VECTOR (63 downto 0) := "1101000110010010111010000001100111010110111011110101001000011000";
    constant ap_const_lv64_D69906245565A910 : STD_LOGIC_VECTOR (63 downto 0) := "1101011010011001000001100010010001010101011001011010100100010000";
    constant ap_const_lv64_F40E35855771202A : STD_LOGIC_VECTOR (63 downto 0) := "1111010000001110001101011000010101010111011100010010000000101010";
    constant ap_const_lv64_106AA07032BBD1B8 : STD_LOGIC_VECTOR (63 downto 0) := "0001000001101010101000000111000000110010101110111101000110111000";
    constant ap_const_lv64_19A4C116B8D2D0C8 : STD_LOGIC_VECTOR (63 downto 0) := "0001100110100100110000010001011010111000110100101101000011001000";
    constant ap_const_lv64_1E376C085141AB53 : STD_LOGIC_VECTOR (63 downto 0) := "0001111000110111011011000000100001010001010000011010101101010011";
    constant ap_const_lv64_2748774CDF8EEB99 : STD_LOGIC_VECTOR (63 downto 0) := "0010011101001000011101110100110011011111100011101110101110011001";
    constant ap_const_lv64_34B0BCB5E19B48A8 : STD_LOGIC_VECTOR (63 downto 0) := "0011010010110000101111001011010111100001100110110100100010101000";
    constant ap_const_lv64_391C0CB3C5C95A63 : STD_LOGIC_VECTOR (63 downto 0) := "0011100100011100000011001011001111000101110010010101101001100011";
    constant ap_const_lv64_4ED8AA4AE3418ACB : STD_LOGIC_VECTOR (63 downto 0) := "0100111011011000101010100100101011100011010000011000101011001011";
    constant ap_const_lv64_5B9CCA4F7763E373 : STD_LOGIC_VECTOR (63 downto 0) := "0101101110011100110010100100111101110111011000111110001101110011";
    constant ap_const_lv64_682E6FF3D6B2B8A3 : STD_LOGIC_VECTOR (63 downto 0) := "0110100000101110011011111111001111010110101100101011100010100011";
    constant ap_const_lv64_748F82EE5DEFB2FC : STD_LOGIC_VECTOR (63 downto 0) := "0111010010001111100000101110111001011101111011111011001011111100";
    constant ap_const_lv64_78A5636F43172F60 : STD_LOGIC_VECTOR (63 downto 0) := "0111100010100101011000110110111101000011000101110010111101100000";
    constant ap_const_lv64_84C87814A1F0AB72 : STD_LOGIC_VECTOR (63 downto 0) := "1000010011001000011110000001010010100001111100001010101101110010";
    constant ap_const_lv64_8CC702081A6439EC : STD_LOGIC_VECTOR (63 downto 0) := "1000110011000111000000100000100000011010011001000011100111101100";
    constant ap_const_lv64_90BEFFFA23631E28 : STD_LOGIC_VECTOR (63 downto 0) := "1001000010111110111111111111101000100011011000110001111000101000";
    constant ap_const_lv64_A4506CEBDE82BDE9 : STD_LOGIC_VECTOR (63 downto 0) := "1010010001010000011011001110101111011110100000101011110111101001";
    constant ap_const_lv64_BEF9A3F7B2C67915 : STD_LOGIC_VECTOR (63 downto 0) := "1011111011111001101000111111011110110010110001100111100100010101";
    constant ap_const_lv64_C67178F2E372532B : STD_LOGIC_VECTOR (63 downto 0) := "1100011001110001011110001111001011100011011100100101001100101011";
    constant ap_const_lv64_CA273ECEEA26619C : STD_LOGIC_VECTOR (63 downto 0) := "1100101000100111001111101100111011101010001001100110000110011100";
    constant ap_const_lv64_D186B8C721C0C207 : STD_LOGIC_VECTOR (63 downto 0) := "1101000110000110101110001100011100100001110000001100001000000111";
    constant ap_const_lv64_EADA7DD6CDE0EB1E : STD_LOGIC_VECTOR (63 downto 0) := "1110101011011010011111011101011011001101111000001110101100011110";
    constant ap_const_lv64_F57D4F7FEE6ED178 : STD_LOGIC_VECTOR (63 downto 0) := "1111010101111101010011110111111111101110011011101101000101111000";
    constant ap_const_lv64_6F067AA72176FBA : STD_LOGIC_VECTOR (63 downto 0) := "0000011011110000011001111010101001110010000101110110111110111010";
    constant ap_const_lv64_A637DC5A2C898A6 : STD_LOGIC_VECTOR (63 downto 0) := "0000101001100011011111011100010110100010110010001001100010100110";
    constant ap_const_lv64_113F9804BEF90DAE : STD_LOGIC_VECTOR (63 downto 0) := "0001000100111111100110000000010010111110111110010000110110101110";
    constant ap_const_lv64_1B710B35131C471B : STD_LOGIC_VECTOR (63 downto 0) := "0001101101110001000010110011010100010011000111000100011100011011";
    constant ap_const_lv64_28DB77F523047D84 : STD_LOGIC_VECTOR (63 downto 0) := "0010100011011011011101111111010100100011000001000111110110000100";
    constant ap_const_lv64_32CAAB7B40C72493 : STD_LOGIC_VECTOR (63 downto 0) := "0011001011001010101010110111101101000000110001110010010010010011";
    constant ap_const_lv64_3C9EBE0A15C9BEBC : STD_LOGIC_VECTOR (63 downto 0) := "0011110010011110101111100000101000010101110010011011111010111100";
    constant ap_const_lv64_431D67C49C100D4C : STD_LOGIC_VECTOR (63 downto 0) := "0100001100011101011001111100010010011100000100000000110101001100";
    constant ap_const_lv64_4CC5D4BECB3E42B6 : STD_LOGIC_VECTOR (63 downto 0) := "0100110011000101110101001011111011001011001111100100001010110110";
    constant ap_const_lv64_597F299CFC657E2A : STD_LOGIC_VECTOR (63 downto 0) := "0101100101111111001010011001110011111100011001010111111000101010";
    constant ap_const_lv64_5FCB6FAB3AD6FAEC : STD_LOGIC_VECTOR (63 downto 0) := "0101111111001011011011111010101100111010110101101111101011101100";
    constant ap_const_lv64_6C44198C4A475817 : STD_LOGIC_VECTOR (63 downto 0) := "0110110001000100000110011000110001001010010001110101100000010111";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal icmp_ln1073_reg_1043 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal w_strm34_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal t_V_2_reg_1037 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln1073_fu_472_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_V_3_reg_1047 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal c_V_3_reg_1059 : STD_LOGIC_VECTOR (63 downto 0);
    signal T1_V_fu_790_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal T1_V_reg_1066 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal c_V_1_fu_278 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal d_V_1_fu_282 : STD_LOGIC_VECTOR (63 downto 0);
    signal g_V_1_fu_286 : STD_LOGIC_VECTOR (63 downto 0);
    signal b_V_1_fu_290 : STD_LOGIC_VECTOR (63 downto 0);
    signal a_V_2_fu_925_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal h_V_1_fu_294 : STD_LOGIC_VECTOR (63 downto 0);
    signal t_V_fu_298 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln886_fu_494_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_allocacmp_t_V_2 : STD_LOGIC_VECTOR (6 downto 0);
    signal d_V_2_fu_302 : STD_LOGIC_VECTOR (63 downto 0);
    signal f_V_1_fu_306 : STD_LOGIC_VECTOR (63 downto 0);
    signal e_V_2_fu_915_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal h_V_2_fu_310 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1_01001 : BOOLEAN;
    signal trunc_ln1739_fu_515_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal r_V_s_fu_505_p4 : STD_LOGIC_VECTOR (49 downto 0);
    signal trunc_ln1739_4_fu_537_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_2_fu_527_p4 : STD_LOGIC_VECTOR (45 downto 0);
    signal trunc_ln1739_5_fu_559_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal r_V_3_fu_549_p4 : STD_LOGIC_VECTOR (22 downto 0);
    signal ret_V_23_fu_519_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ret_V_24_fu_541_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln1545_fu_571_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ret_V_25_fu_563_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_fu_589_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ret_V_26_fu_583_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ret_V_27_fu_595_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ret_V_15_fu_601_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_607_p82 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln232_3_fu_778_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ret_V_fu_577_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln232_4_fu_784_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln232_fu_772_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1739_6_fu_831_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal r_V_4_fu_822_p4 : STD_LOGIC_VECTOR (35 downto 0);
    signal trunc_ln1739_7_fu_851_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal r_V_5_fu_842_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln1739_8_fu_871_p1 : STD_LOGIC_VECTOR (38 downto 0);
    signal r_V_6_fu_862_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal ret_V_28_fu_834_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ret_V_29_fu_854_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln1545_6_fu_882_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ret_V_30_fu_874_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln1545_8_fu_894_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ret_V_31_fu_899_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ret_V_32_fu_904_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ret_V_22_fu_909_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln232_7_fu_920_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ret_V_19_fu_888_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component sha512_mux_807_64_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        din18_WIDTH : INTEGER;
        din19_WIDTH : INTEGER;
        din20_WIDTH : INTEGER;
        din21_WIDTH : INTEGER;
        din22_WIDTH : INTEGER;
        din23_WIDTH : INTEGER;
        din24_WIDTH : INTEGER;
        din25_WIDTH : INTEGER;
        din26_WIDTH : INTEGER;
        din27_WIDTH : INTEGER;
        din28_WIDTH : INTEGER;
        din29_WIDTH : INTEGER;
        din30_WIDTH : INTEGER;
        din31_WIDTH : INTEGER;
        din32_WIDTH : INTEGER;
        din33_WIDTH : INTEGER;
        din34_WIDTH : INTEGER;
        din35_WIDTH : INTEGER;
        din36_WIDTH : INTEGER;
        din37_WIDTH : INTEGER;
        din38_WIDTH : INTEGER;
        din39_WIDTH : INTEGER;
        din40_WIDTH : INTEGER;
        din41_WIDTH : INTEGER;
        din42_WIDTH : INTEGER;
        din43_WIDTH : INTEGER;
        din44_WIDTH : INTEGER;
        din45_WIDTH : INTEGER;
        din46_WIDTH : INTEGER;
        din47_WIDTH : INTEGER;
        din48_WIDTH : INTEGER;
        din49_WIDTH : INTEGER;
        din50_WIDTH : INTEGER;
        din51_WIDTH : INTEGER;
        din52_WIDTH : INTEGER;
        din53_WIDTH : INTEGER;
        din54_WIDTH : INTEGER;
        din55_WIDTH : INTEGER;
        din56_WIDTH : INTEGER;
        din57_WIDTH : INTEGER;
        din58_WIDTH : INTEGER;
        din59_WIDTH : INTEGER;
        din60_WIDTH : INTEGER;
        din61_WIDTH : INTEGER;
        din62_WIDTH : INTEGER;
        din63_WIDTH : INTEGER;
        din64_WIDTH : INTEGER;
        din65_WIDTH : INTEGER;
        din66_WIDTH : INTEGER;
        din67_WIDTH : INTEGER;
        din68_WIDTH : INTEGER;
        din69_WIDTH : INTEGER;
        din70_WIDTH : INTEGER;
        din71_WIDTH : INTEGER;
        din72_WIDTH : INTEGER;
        din73_WIDTH : INTEGER;
        din74_WIDTH : INTEGER;
        din75_WIDTH : INTEGER;
        din76_WIDTH : INTEGER;
        din77_WIDTH : INTEGER;
        din78_WIDTH : INTEGER;
        din79_WIDTH : INTEGER;
        din80_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        din2 : IN STD_LOGIC_VECTOR (63 downto 0);
        din3 : IN STD_LOGIC_VECTOR (63 downto 0);
        din4 : IN STD_LOGIC_VECTOR (63 downto 0);
        din5 : IN STD_LOGIC_VECTOR (63 downto 0);
        din6 : IN STD_LOGIC_VECTOR (63 downto 0);
        din7 : IN STD_LOGIC_VECTOR (63 downto 0);
        din8 : IN STD_LOGIC_VECTOR (63 downto 0);
        din9 : IN STD_LOGIC_VECTOR (63 downto 0);
        din10 : IN STD_LOGIC_VECTOR (63 downto 0);
        din11 : IN STD_LOGIC_VECTOR (63 downto 0);
        din12 : IN STD_LOGIC_VECTOR (63 downto 0);
        din13 : IN STD_LOGIC_VECTOR (63 downto 0);
        din14 : IN STD_LOGIC_VECTOR (63 downto 0);
        din15 : IN STD_LOGIC_VECTOR (63 downto 0);
        din16 : IN STD_LOGIC_VECTOR (63 downto 0);
        din17 : IN STD_LOGIC_VECTOR (63 downto 0);
        din18 : IN STD_LOGIC_VECTOR (63 downto 0);
        din19 : IN STD_LOGIC_VECTOR (63 downto 0);
        din20 : IN STD_LOGIC_VECTOR (63 downto 0);
        din21 : IN STD_LOGIC_VECTOR (63 downto 0);
        din22 : IN STD_LOGIC_VECTOR (63 downto 0);
        din23 : IN STD_LOGIC_VECTOR (63 downto 0);
        din24 : IN STD_LOGIC_VECTOR (63 downto 0);
        din25 : IN STD_LOGIC_VECTOR (63 downto 0);
        din26 : IN STD_LOGIC_VECTOR (63 downto 0);
        din27 : IN STD_LOGIC_VECTOR (63 downto 0);
        din28 : IN STD_LOGIC_VECTOR (63 downto 0);
        din29 : IN STD_LOGIC_VECTOR (63 downto 0);
        din30 : IN STD_LOGIC_VECTOR (63 downto 0);
        din31 : IN STD_LOGIC_VECTOR (63 downto 0);
        din32 : IN STD_LOGIC_VECTOR (63 downto 0);
        din33 : IN STD_LOGIC_VECTOR (63 downto 0);
        din34 : IN STD_LOGIC_VECTOR (63 downto 0);
        din35 : IN STD_LOGIC_VECTOR (63 downto 0);
        din36 : IN STD_LOGIC_VECTOR (63 downto 0);
        din37 : IN STD_LOGIC_VECTOR (63 downto 0);
        din38 : IN STD_LOGIC_VECTOR (63 downto 0);
        din39 : IN STD_LOGIC_VECTOR (63 downto 0);
        din40 : IN STD_LOGIC_VECTOR (63 downto 0);
        din41 : IN STD_LOGIC_VECTOR (63 downto 0);
        din42 : IN STD_LOGIC_VECTOR (63 downto 0);
        din43 : IN STD_LOGIC_VECTOR (63 downto 0);
        din44 : IN STD_LOGIC_VECTOR (63 downto 0);
        din45 : IN STD_LOGIC_VECTOR (63 downto 0);
        din46 : IN STD_LOGIC_VECTOR (63 downto 0);
        din47 : IN STD_LOGIC_VECTOR (63 downto 0);
        din48 : IN STD_LOGIC_VECTOR (63 downto 0);
        din49 : IN STD_LOGIC_VECTOR (63 downto 0);
        din50 : IN STD_LOGIC_VECTOR (63 downto 0);
        din51 : IN STD_LOGIC_VECTOR (63 downto 0);
        din52 : IN STD_LOGIC_VECTOR (63 downto 0);
        din53 : IN STD_LOGIC_VECTOR (63 downto 0);
        din54 : IN STD_LOGIC_VECTOR (63 downto 0);
        din55 : IN STD_LOGIC_VECTOR (63 downto 0);
        din56 : IN STD_LOGIC_VECTOR (63 downto 0);
        din57 : IN STD_LOGIC_VECTOR (63 downto 0);
        din58 : IN STD_LOGIC_VECTOR (63 downto 0);
        din59 : IN STD_LOGIC_VECTOR (63 downto 0);
        din60 : IN STD_LOGIC_VECTOR (63 downto 0);
        din61 : IN STD_LOGIC_VECTOR (63 downto 0);
        din62 : IN STD_LOGIC_VECTOR (63 downto 0);
        din63 : IN STD_LOGIC_VECTOR (63 downto 0);
        din64 : IN STD_LOGIC_VECTOR (63 downto 0);
        din65 : IN STD_LOGIC_VECTOR (63 downto 0);
        din66 : IN STD_LOGIC_VECTOR (63 downto 0);
        din67 : IN STD_LOGIC_VECTOR (63 downto 0);
        din68 : IN STD_LOGIC_VECTOR (63 downto 0);
        din69 : IN STD_LOGIC_VECTOR (63 downto 0);
        din70 : IN STD_LOGIC_VECTOR (63 downto 0);
        din71 : IN STD_LOGIC_VECTOR (63 downto 0);
        din72 : IN STD_LOGIC_VECTOR (63 downto 0);
        din73 : IN STD_LOGIC_VECTOR (63 downto 0);
        din74 : IN STD_LOGIC_VECTOR (63 downto 0);
        din75 : IN STD_LOGIC_VECTOR (63 downto 0);
        din76 : IN STD_LOGIC_VECTOR (63 downto 0);
        din77 : IN STD_LOGIC_VECTOR (63 downto 0);
        din78 : IN STD_LOGIC_VECTOR (63 downto 0);
        din79 : IN STD_LOGIC_VECTOR (63 downto 0);
        din80 : IN STD_LOGIC_VECTOR (6 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component sha512_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_807_64_1_1_U84 : component sha512_mux_807_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 64,
        din8_WIDTH => 64,
        din9_WIDTH => 64,
        din10_WIDTH => 64,
        din11_WIDTH => 64,
        din12_WIDTH => 64,
        din13_WIDTH => 64,
        din14_WIDTH => 64,
        din15_WIDTH => 64,
        din16_WIDTH => 64,
        din17_WIDTH => 64,
        din18_WIDTH => 64,
        din19_WIDTH => 64,
        din20_WIDTH => 64,
        din21_WIDTH => 64,
        din22_WIDTH => 64,
        din23_WIDTH => 64,
        din24_WIDTH => 64,
        din25_WIDTH => 64,
        din26_WIDTH => 64,
        din27_WIDTH => 64,
        din28_WIDTH => 64,
        din29_WIDTH => 64,
        din30_WIDTH => 64,
        din31_WIDTH => 64,
        din32_WIDTH => 64,
        din33_WIDTH => 64,
        din34_WIDTH => 64,
        din35_WIDTH => 64,
        din36_WIDTH => 64,
        din37_WIDTH => 64,
        din38_WIDTH => 64,
        din39_WIDTH => 64,
        din40_WIDTH => 64,
        din41_WIDTH => 64,
        din42_WIDTH => 64,
        din43_WIDTH => 64,
        din44_WIDTH => 64,
        din45_WIDTH => 64,
        din46_WIDTH => 64,
        din47_WIDTH => 64,
        din48_WIDTH => 64,
        din49_WIDTH => 64,
        din50_WIDTH => 64,
        din51_WIDTH => 64,
        din52_WIDTH => 64,
        din53_WIDTH => 64,
        din54_WIDTH => 64,
        din55_WIDTH => 64,
        din56_WIDTH => 64,
        din57_WIDTH => 64,
        din58_WIDTH => 64,
        din59_WIDTH => 64,
        din60_WIDTH => 64,
        din61_WIDTH => 64,
        din62_WIDTH => 64,
        din63_WIDTH => 64,
        din64_WIDTH => 64,
        din65_WIDTH => 64,
        din66_WIDTH => 64,
        din67_WIDTH => 64,
        din68_WIDTH => 64,
        din69_WIDTH => 64,
        din70_WIDTH => 64,
        din71_WIDTH => 64,
        din72_WIDTH => 64,
        din73_WIDTH => 64,
        din74_WIDTH => 64,
        din75_WIDTH => 64,
        din76_WIDTH => 64,
        din77_WIDTH => 64,
        din78_WIDTH => 64,
        din79_WIDTH => 64,
        din80_WIDTH => 7,
        dout_WIDTH => 64)
    port map (
        din0 => ap_const_lv64_428A2F98D728AE22,
        din1 => ap_const_lv64_7137449123EF65CD,
        din2 => ap_const_lv64_B5C0FBCFEC4D3B2F,
        din3 => ap_const_lv64_E9B5DBA58189DBBC,
        din4 => ap_const_lv64_3956C25BF348B538,
        din5 => ap_const_lv64_59F111F1B605D019,
        din6 => ap_const_lv64_923F82A4AF194F9B,
        din7 => ap_const_lv64_AB1C5ED5DA6D8118,
        din8 => ap_const_lv64_D807AA98A3030242,
        din9 => ap_const_lv64_12835B0145706FBE,
        din10 => ap_const_lv64_243185BE4EE4B28C,
        din11 => ap_const_lv64_550C7DC3D5FFB4E2,
        din12 => ap_const_lv64_72BE5D74F27B896F,
        din13 => ap_const_lv64_80DEB1FE3B1696B1,
        din14 => ap_const_lv64_9BDC06A725C71235,
        din15 => ap_const_lv64_C19BF174CF692694,
        din16 => ap_const_lv64_E49B69C19EF14AD2,
        din17 => ap_const_lv64_EFBE4786384F25E3,
        din18 => ap_const_lv64_FC19DC68B8CD5B5,
        din19 => ap_const_lv64_240CA1CC77AC9C65,
        din20 => ap_const_lv64_2DE92C6F592B0275,
        din21 => ap_const_lv64_4A7484AA6EA6E483,
        din22 => ap_const_lv64_5CB0A9DCBD41FBD4,
        din23 => ap_const_lv64_76F988DA831153B5,
        din24 => ap_const_lv64_983E5152EE66DFAB,
        din25 => ap_const_lv64_A831C66D2DB43210,
        din26 => ap_const_lv64_B00327C898FB213F,
        din27 => ap_const_lv64_BF597FC7BEEF0EE4,
        din28 => ap_const_lv64_C6E00BF33DA88FC2,
        din29 => ap_const_lv64_D5A79147930AA725,
        din30 => ap_const_lv64_6CA6351E003826F,
        din31 => ap_const_lv64_142929670A0E6E70,
        din32 => ap_const_lv64_27B70A8546D22FFC,
        din33 => ap_const_lv64_2E1B21385C26C926,
        din34 => ap_const_lv64_4D2C6DFC5AC42AED,
        din35 => ap_const_lv64_53380D139D95B3DF,
        din36 => ap_const_lv64_650A73548BAF63DE,
        din37 => ap_const_lv64_766A0ABB3C77B2A8,
        din38 => ap_const_lv64_81C2C92E47EDAEE6,
        din39 => ap_const_lv64_92722C851482353B,
        din40 => ap_const_lv64_A2BFE8A14CF10364,
        din41 => ap_const_lv64_A81A664BBC423001,
        din42 => ap_const_lv64_C24B8B70D0F89791,
        din43 => ap_const_lv64_C76C51A30654BE30,
        din44 => ap_const_lv64_D192E819D6EF5218,
        din45 => ap_const_lv64_D69906245565A910,
        din46 => ap_const_lv64_F40E35855771202A,
        din47 => ap_const_lv64_106AA07032BBD1B8,
        din48 => ap_const_lv64_19A4C116B8D2D0C8,
        din49 => ap_const_lv64_1E376C085141AB53,
        din50 => ap_const_lv64_2748774CDF8EEB99,
        din51 => ap_const_lv64_34B0BCB5E19B48A8,
        din52 => ap_const_lv64_391C0CB3C5C95A63,
        din53 => ap_const_lv64_4ED8AA4AE3418ACB,
        din54 => ap_const_lv64_5B9CCA4F7763E373,
        din55 => ap_const_lv64_682E6FF3D6B2B8A3,
        din56 => ap_const_lv64_748F82EE5DEFB2FC,
        din57 => ap_const_lv64_78A5636F43172F60,
        din58 => ap_const_lv64_84C87814A1F0AB72,
        din59 => ap_const_lv64_8CC702081A6439EC,
        din60 => ap_const_lv64_90BEFFFA23631E28,
        din61 => ap_const_lv64_A4506CEBDE82BDE9,
        din62 => ap_const_lv64_BEF9A3F7B2C67915,
        din63 => ap_const_lv64_C67178F2E372532B,
        din64 => ap_const_lv64_CA273ECEEA26619C,
        din65 => ap_const_lv64_D186B8C721C0C207,
        din66 => ap_const_lv64_EADA7DD6CDE0EB1E,
        din67 => ap_const_lv64_F57D4F7FEE6ED178,
        din68 => ap_const_lv64_6F067AA72176FBA,
        din69 => ap_const_lv64_A637DC5A2C898A6,
        din70 => ap_const_lv64_113F9804BEF90DAE,
        din71 => ap_const_lv64_1B710B35131C471B,
        din72 => ap_const_lv64_28DB77F523047D84,
        din73 => ap_const_lv64_32CAAB7B40C72493,
        din74 => ap_const_lv64_3C9EBE0A15C9BEBC,
        din75 => ap_const_lv64_431D67C49C100D4C,
        din76 => ap_const_lv64_4CC5D4BECB3E42B6,
        din77 => ap_const_lv64_597F299CFC657E2A,
        din78 => ap_const_lv64_5FCB6FAB3AD6FAEC,
        din79 => ap_const_lv64_6C44198C4A475817,
        din80 => t_V_2_reg_1037,
        dout => tmp_fu_607_p82);

    flow_control_loop_pipe_sequential_init_U : component sha512_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    b_V_1_fu_290_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    b_V_1_fu_290 <= a_V;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    b_V_1_fu_290 <= a_V_2_fu_925_p2;
                end if;
            end if; 
        end if;
    end process;

    c_V_1_fu_278_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    c_V_1_fu_278 <= b_V;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    c_V_1_fu_278 <= a_V_3_reg_1047;
                end if;
            end if; 
        end if;
    end process;

    d_V_1_fu_282_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    d_V_1_fu_282 <= d_V;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    d_V_1_fu_282 <= c_V_3_reg_1059;
                end if;
            end if; 
        end if;
    end process;

    d_V_2_fu_302_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    d_V_2_fu_302 <= c_V;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    d_V_2_fu_302 <= c_V_1_fu_278;
                end if;
            end if; 
        end if;
    end process;

    f_V_1_fu_306_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    f_V_1_fu_306 <= e_V;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    f_V_1_fu_306 <= e_V_2_fu_915_p2;
                end if;
            end if; 
        end if;
    end process;

    g_V_1_fu_286_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                g_V_1_fu_286 <= f_V;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln1073_reg_1043 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                g_V_1_fu_286 <= f_V_1_fu_306;
            end if; 
        end if;
    end process;

    h_V_1_fu_294_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                h_V_1_fu_294 <= h_V;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln1073_reg_1043 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                h_V_1_fu_294 <= h_V_2_fu_310;
            end if; 
        end if;
    end process;

    h_V_2_fu_310_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                h_V_2_fu_310 <= g_V;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln1073_reg_1043 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                h_V_2_fu_310 <= g_V_1_fu_286;
            end if; 
        end if;
    end process;

    t_V_fu_298_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                t_V_fu_298 <= ap_const_lv7_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln1073_reg_1043 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                t_V_fu_298 <= add_ln886_fu_494_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln1073_reg_1043 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                T1_V_reg_1066 <= T1_V_fu_790_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                a_V_3_reg_1047 <= b_V_1_fu_290;
                c_V_3_reg_1059 <= d_V_2_fu_302;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln1073_reg_1043 <= icmp_ln1073_fu_472_p2;
                t_V_2_reg_1037 <= ap_sig_allocacmp_t_V_2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    T1_V_fu_790_p2 <= std_logic_vector(unsigned(add_ln232_4_fu_784_p2) + unsigned(add_ln232_fu_772_p2));
    a_V_2_fu_925_p2 <= std_logic_vector(unsigned(add_ln232_7_fu_920_p2) + unsigned(ret_V_19_fu_888_p2));
    a_V_3_out <= b_V_1_fu_290;

    a_V_3_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln1073_reg_1043, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln1073_reg_1043 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            a_V_3_out_ap_vld <= ap_const_logic_1;
        else 
            a_V_3_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add_ln232_3_fu_778_p2 <= std_logic_vector(unsigned(ret_V_15_fu_601_p2) + unsigned(tmp_fu_607_p82));
    add_ln232_4_fu_784_p2 <= std_logic_vector(unsigned(add_ln232_3_fu_778_p2) + unsigned(ret_V_fu_577_p2));
    add_ln232_7_fu_920_p2 <= std_logic_vector(unsigned(T1_V_reg_1066) + unsigned(ret_V_22_fu_909_p2));
    add_ln232_fu_772_p2 <= std_logic_vector(unsigned(w_strm34_dout) + unsigned(h_V_1_fu_294));
    add_ln886_fu_494_p2 <= std_logic_vector(unsigned(t_V_2_reg_1037) + unsigned(ap_const_lv7_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_01001_assign_proc : process(ap_enable_reg_pp0_iter0, w_strm34_empty_n, icmp_ln1073_reg_1043)
    begin
                ap_block_pp0_stage1_01001 <= ((icmp_ln1073_reg_1043 = ap_const_lv1_0) and (w_strm34_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter0, w_strm34_empty_n, icmp_ln1073_reg_1043)
    begin
                ap_block_pp0_stage1_11001 <= ((icmp_ln1073_reg_1043 = ap_const_lv1_0) and (w_strm34_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, w_strm34_empty_n, icmp_ln1073_reg_1043)
    begin
                ap_block_pp0_stage1_subdone <= ((icmp_ln1073_reg_1043 = ap_const_lv1_0) and (w_strm34_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage1_iter0_assign_proc : process(w_strm34_empty_n, icmp_ln1073_reg_1043)
    begin
                ap_block_state2_pp0_stage1_iter0 <= ((icmp_ln1073_reg_1043 = ap_const_lv1_0) and (w_strm34_empty_n = ap_const_logic_0));
    end process;

        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, icmp_ln1073_reg_1043, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (icmp_ln1073_reg_1043 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_t_V_2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_loop_init, ap_block_pp0_stage0, t_V_fu_298)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_t_V_2 <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_t_V_2 <= t_V_fu_298;
        end if; 
    end process;

    b_V_3_out <= c_V_1_fu_278;

    b_V_3_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln1073_reg_1043, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln1073_reg_1043 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            b_V_3_out_ap_vld <= ap_const_logic_1;
        else 
            b_V_3_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    c_V_3_out <= d_V_2_fu_302;

    c_V_3_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln1073_reg_1043, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln1073_reg_1043 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            c_V_3_out_ap_vld <= ap_const_logic_1;
        else 
            c_V_3_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    d_V_1_out <= d_V_1_fu_282;

    d_V_1_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln1073_reg_1043, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln1073_reg_1043 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            d_V_1_out_ap_vld <= ap_const_logic_1;
        else 
            d_V_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    e_V_2_fu_915_p2 <= std_logic_vector(unsigned(T1_V_reg_1066) + unsigned(d_V_1_fu_282));
    e_V_3_out <= f_V_1_fu_306;

    e_V_3_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln1073_reg_1043, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln1073_reg_1043 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            e_V_3_out_ap_vld <= ap_const_logic_1;
        else 
            e_V_3_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    f_V_3_out <= g_V_1_fu_286;

    f_V_3_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln1073_reg_1043, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln1073_reg_1043 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            f_V_3_out_ap_vld <= ap_const_logic_1;
        else 
            f_V_3_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    g_V_3_out <= h_V_2_fu_310;

    g_V_3_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln1073_reg_1043, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln1073_reg_1043 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            g_V_3_out_ap_vld <= ap_const_logic_1;
        else 
            g_V_3_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    h_V_1_out <= h_V_1_fu_294;

    h_V_1_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln1073_reg_1043, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln1073_reg_1043 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            h_V_1_out_ap_vld <= ap_const_logic_1;
        else 
            h_V_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln1073_fu_472_p2 <= "1" when (ap_sig_allocacmp_t_V_2 = ap_const_lv7_50) else "0";
    r_V_2_fu_527_p4 <= f_V_1_fu_306(63 downto 18);
    r_V_3_fu_549_p4 <= f_V_1_fu_306(63 downto 41);
    r_V_4_fu_822_p4 <= a_V_3_reg_1047(63 downto 28);
    r_V_5_fu_842_p4 <= a_V_3_reg_1047(63 downto 34);
    r_V_6_fu_862_p4 <= a_V_3_reg_1047(63 downto 39);
    r_V_fu_589_p2 <= (f_V_1_fu_306 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    r_V_s_fu_505_p4 <= f_V_1_fu_306(63 downto 14);
    ret_V_15_fu_601_p2 <= (ret_V_27_fu_595_p2 xor ret_V_26_fu_583_p2);
    ret_V_19_fu_888_p2 <= (xor_ln1545_6_fu_882_p2 xor ret_V_30_fu_874_p3);
    ret_V_22_fu_909_p2 <= (ret_V_32_fu_904_p2 xor ret_V_31_fu_899_p2);
    ret_V_23_fu_519_p3 <= (trunc_ln1739_fu_515_p1 & r_V_s_fu_505_p4);
    ret_V_24_fu_541_p3 <= (trunc_ln1739_4_fu_537_p1 & r_V_2_fu_527_p4);
    ret_V_25_fu_563_p3 <= (trunc_ln1739_5_fu_559_p1 & r_V_3_fu_549_p4);
    ret_V_26_fu_583_p2 <= (g_V_1_fu_286 and f_V_1_fu_306);
    ret_V_27_fu_595_p2 <= (r_V_fu_589_p2 and h_V_2_fu_310);
    ret_V_28_fu_834_p3 <= (trunc_ln1739_6_fu_831_p1 & r_V_4_fu_822_p4);
    ret_V_29_fu_854_p3 <= (trunc_ln1739_7_fu_851_p1 & r_V_5_fu_842_p4);
    ret_V_30_fu_874_p3 <= (trunc_ln1739_8_fu_871_p1 & r_V_6_fu_862_p4);
    ret_V_31_fu_899_p2 <= (xor_ln1545_8_fu_894_p2 and a_V_3_reg_1047);
    ret_V_32_fu_904_p2 <= (c_V_3_reg_1059 and c_V_1_fu_278);
    ret_V_fu_577_p2 <= (xor_ln1545_fu_571_p2 xor ret_V_25_fu_563_p3);
    trunc_ln1739_4_fu_537_p1 <= f_V_1_fu_306(18 - 1 downto 0);
    trunc_ln1739_5_fu_559_p1 <= f_V_1_fu_306(41 - 1 downto 0);
    trunc_ln1739_6_fu_831_p1 <= a_V_3_reg_1047(28 - 1 downto 0);
    trunc_ln1739_7_fu_851_p1 <= a_V_3_reg_1047(34 - 1 downto 0);
    trunc_ln1739_8_fu_871_p1 <= a_V_3_reg_1047(39 - 1 downto 0);
    trunc_ln1739_fu_515_p1 <= f_V_1_fu_306(14 - 1 downto 0);

    w_strm34_blk_n_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, w_strm34_empty_n, icmp_ln1073_reg_1043, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (icmp_ln1073_reg_1043 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            w_strm34_blk_n <= w_strm34_empty_n;
        else 
            w_strm34_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    w_strm34_read_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, icmp_ln1073_reg_1043, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln1073_reg_1043 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            w_strm34_read <= ap_const_logic_1;
        else 
            w_strm34_read <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln1545_6_fu_882_p2 <= (ret_V_29_fu_854_p3 xor ret_V_28_fu_834_p3);
    xor_ln1545_8_fu_894_p2 <= (c_V_3_reg_1059 xor c_V_1_fu_278);
    xor_ln1545_fu_571_p2 <= (ret_V_24_fu_541_p3 xor ret_V_23_fu_519_p3);
end behav;
