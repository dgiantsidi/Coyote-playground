// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module sha256_sha256_transform (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ctx_state_0_read,
        ctx_state_1_read,
        ctx_state_2_read,
        ctx_state_3_read,
        ctx_state_4_read,
        ctx_state_5_read,
        ctx_state_6_read,
        ctx_state_7_read,
        p_read8,
        p_read19,
        p_read210,
        p_read311,
        p_read412,
        p_read513,
        p_read614,
        p_read715,
        p_read816,
        p_read9,
        p_read10,
        p_read11,
        p_read12,
        p_read13,
        p_read14,
        p_read15,
        p_read16,
        p_read17,
        p_read18,
        p_read1917,
        p_read20,
        p_read21,
        p_read22,
        p_read23,
        p_read24,
        p_read25,
        p_read26,
        p_read27,
        p_read28,
        p_read29,
        p_read30,
        p_read31,
        p_read32,
        p_read33,
        p_read34,
        p_read35,
        p_read36,
        p_read37,
        p_read38,
        p_read39,
        p_read40,
        p_read41,
        p_read42,
        p_read43,
        p_read44,
        p_read45,
        p_read46,
        p_read47,
        p_read48,
        p_read49,
        p_read50,
        p_read51,
        p_read52,
        p_read53,
        p_read54,
        p_read55,
        p_read56,
        p_read57,
        p_read58,
        p_read59,
        p_read60,
        p_read61,
        p_read62,
        p_read63,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5,
        ap_return_6,
        ap_return_7
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] ctx_state_0_read;
input  [31:0] ctx_state_1_read;
input  [31:0] ctx_state_2_read;
input  [31:0] ctx_state_3_read;
input  [31:0] ctx_state_4_read;
input  [31:0] ctx_state_5_read;
input  [31:0] ctx_state_6_read;
input  [31:0] ctx_state_7_read;
input  [7:0] p_read8;
input  [7:0] p_read19;
input  [7:0] p_read210;
input  [7:0] p_read311;
input  [7:0] p_read412;
input  [7:0] p_read513;
input  [7:0] p_read614;
input  [7:0] p_read715;
input  [7:0] p_read816;
input  [7:0] p_read9;
input  [7:0] p_read10;
input  [7:0] p_read11;
input  [7:0] p_read12;
input  [7:0] p_read13;
input  [7:0] p_read14;
input  [7:0] p_read15;
input  [7:0] p_read16;
input  [7:0] p_read17;
input  [7:0] p_read18;
input  [7:0] p_read1917;
input  [7:0] p_read20;
input  [7:0] p_read21;
input  [7:0] p_read22;
input  [7:0] p_read23;
input  [7:0] p_read24;
input  [7:0] p_read25;
input  [7:0] p_read26;
input  [7:0] p_read27;
input  [7:0] p_read28;
input  [7:0] p_read29;
input  [7:0] p_read30;
input  [7:0] p_read31;
input  [7:0] p_read32;
input  [7:0] p_read33;
input  [7:0] p_read34;
input  [7:0] p_read35;
input  [7:0] p_read36;
input  [7:0] p_read37;
input  [7:0] p_read38;
input  [7:0] p_read39;
input  [7:0] p_read40;
input  [7:0] p_read41;
input  [7:0] p_read42;
input  [7:0] p_read43;
input  [7:0] p_read44;
input  [7:0] p_read45;
input  [7:0] p_read46;
input  [7:0] p_read47;
input  [7:0] p_read48;
input  [7:0] p_read49;
input  [7:0] p_read50;
input  [7:0] p_read51;
input  [7:0] p_read52;
input  [7:0] p_read53;
input  [7:0] p_read54;
input  [7:0] p_read55;
input  [7:0] p_read56;
input  [7:0] p_read57;
input  [7:0] p_read58;
input  [7:0] p_read59;
input  [7:0] p_read60;
input  [7:0] p_read61;
input  [7:0] p_read62;
input  [7:0] p_read63;
output  [31:0] ap_return_0;
output  [31:0] ap_return_1;
output  [31:0] ap_return_2;
output  [31:0] ap_return_3;
output  [31:0] ap_return_4;
output  [31:0] ap_return_5;
output  [31:0] ap_return_6;
output  [31:0] ap_return_7;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [63:0] zext_ln39_fu_1470_p1;
reg   [63:0] zext_ln39_reg_2659;
wire    ap_CS_fsm_state3;
wire   [5:0] trunc_ln39_fu_1480_p1;
reg   [5:0] trunc_ln39_reg_2667;
wire   [0:0] icmp_ln39_fu_1474_p2;
wire   [31:0] m_q1;
reg   [31:0] m_load_reg_2746;
wire    ap_CS_fsm_state4;
wire   [31:0] m_q0;
reg   [31:0] m_load_1_reg_2755;
wire   [31:0] add_ln40_6_fu_1720_p2;
reg   [31:0] add_ln40_6_reg_2770;
wire    ap_CS_fsm_state5;
reg   [31:0] c_3_reg_2775;
wire    ap_CS_fsm_state7;
wire   [31:0] xor_ln52_3_fu_1860_p2;
reg   [31:0] xor_ln52_3_reg_2786;
wire   [0:0] icmp_ln51_fu_1752_p2;
wire   [31:0] add_ln52_2_fu_2006_p2;
reg   [31:0] add_ln52_2_reg_2796;
wire   [31:0] xor_ln53_3_fu_2030_p2;
reg   [31:0] xor_ln53_3_reg_2801;
reg   [5:0] m_address0;
reg    m_ce0;
reg    m_we0;
wire   [31:0] m_d0;
reg   [5:0] m_address1;
reg    m_ce1;
reg    m_we1;
wire   [63:0] zext_ln37_fu_965_p1;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln37_fu_970_p2;
wire   [63:0] zext_ln40_fu_1490_p1;
wire   [63:0] zext_ln40_1_fu_1501_p1;
wire   [63:0] zext_ln40_2_fu_1559_p1;
wire   [63:0] zext_ln40_3_fu_1569_p1;
wire    ap_CS_fsm_state6;
wire   [63:0] zext_ln51_fu_1747_p1;
reg   [6:0] j_fu_404;
wire   [6:0] add_ln37_1_fu_1446_p2;
reg   [4:0] i_fu_408;
wire   [4:0] add_ln37_fu_976_p2;
reg   [6:0] i_1_fu_416;
wire   [6:0] add_ln39_fu_1506_p2;
reg   [31:0] h_fu_420;
reg   [31:0] d_fu_424;
wire    ap_CS_fsm_state8;
reg   [6:0] i_2_fu_428;
wire   [6:0] add_ln51_fu_1758_p2;
reg   [31:0] h_1_fu_432;
reg   [31:0] g_fu_436;
reg   [31:0] f_fu_440;
wire   [31:0] e_1_fu_2236_p2;
reg   [31:0] d_1_fu_444;
reg   [31:0] c_fu_448;
reg   [31:0] b_fu_452;
wire   [31:0] a_1_fu_2248_p2;
wire   [7:0] tmp_fu_985_p63;
wire   [7:0] tmp_1_fu_1097_p63;
wire   [7:0] tmp_2_fu_1209_p63;
wire   [7:0] tmp_3_fu_1321_p63;
wire   [5:0] add_ln40_fu_1484_p2;
wire   [5:0] add_ln40_1_fu_1495_p2;
wire   [5:0] add_ln40_2_fu_1554_p2;
wire   [5:0] add_ln40_3_fu_1564_p2;
wire   [16:0] trunc_ln40_fu_1583_p1;
wire   [14:0] lshr_ln_fu_1574_p4;
wire   [18:0] trunc_ln40_1_fu_1603_p1;
wire   [12:0] lshr_ln40_1_fu_1594_p4;
wire   [21:0] lshr_ln40_2_fu_1614_p4;
wire   [31:0] zext_ln40_4_fu_1623_p1;
wire   [31:0] or_ln40_1_fu_1606_p3;
wire   [31:0] xor_ln40_fu_1627_p2;
wire   [31:0] or_ln_fu_1586_p3;
wire   [6:0] trunc_ln40_2_fu_1649_p1;
wire   [24:0] lshr_ln40_3_fu_1639_p4;
wire   [17:0] trunc_ln40_3_fu_1671_p1;
wire   [13:0] lshr_ln40_4_fu_1661_p4;
wire   [28:0] lshr_ln40_5_fu_1683_p4;
wire   [31:0] zext_ln40_5_fu_1693_p1;
wire   [31:0] or_ln40_3_fu_1675_p3;
wire   [31:0] xor_ln40_2_fu_1697_p2;
wire   [31:0] or_ln40_2_fu_1653_p3;
wire   [31:0] xor_ln40_1_fu_1633_p2;
wire   [31:0] xor_ln40_3_fu_1703_p2;
wire   [31:0] add_ln40_5_fu_1714_p2;
wire   [31:0] add_ln40_4_fu_1709_p2;
wire   [5:0] trunc_ln52_fu_1774_p1;
wire   [25:0] lshr_ln1_fu_1764_p4;
wire   [10:0] trunc_ln52_1_fu_1796_p1;
wire   [20:0] lshr_ln52_1_fu_1786_p4;
wire   [24:0] trunc_ln52_2_fu_1818_p1;
wire   [6:0] lshr_ln52_2_fu_1808_p4;
wire   [31:0] or_ln1_fu_1778_p3;
wire   [31:0] or_ln52_1_fu_1800_p3;
wire   [31:0] xor_ln52_fu_1830_p2;
wire   [31:0] or_ln52_2_fu_1822_p3;
wire   [31:0] xor_ln52_2_fu_1848_p2;
wire   [31:0] and_ln52_1_fu_1854_p2;
wire   [31:0] and_ln52_fu_1842_p2;
wire   [31:0] xor_ln52_1_fu_1836_p2;
wire   [31:0] add_ln52_1_fu_2000_p2;
wire   [31:0] tmp_4_fu_1866_p66;
wire   [31:0] xor_ln53_2_fu_2012_p2;
wire   [31:0] and_ln53_fu_2018_p2;
wire   [31:0] and_ln53_1_fu_2024_p2;
wire   [31:0] add_ln64_fu_2066_p2;
wire   [31:0] add_ln65_fu_2071_p2;
wire   [31:0] add_ln66_fu_2076_p2;
wire   [31:0] add_ln67_fu_2081_p2;
wire   [31:0] add_ln68_fu_2086_p2;
wire   [31:0] add_ln69_fu_2091_p2;
wire   [31:0] add_ln70_fu_2096_p2;
wire   [31:0] add_ln71_fu_2101_p2;
wire   [31:0] add_ln52_fu_2154_p2;
wire   [1:0] trunc_ln53_fu_2173_p1;
wire   [29:0] lshr_ln2_fu_2164_p4;
wire   [12:0] trunc_ln53_1_fu_2193_p1;
wire   [18:0] lshr_ln53_1_fu_2184_p4;
wire   [21:0] trunc_ln53_2_fu_2213_p1;
wire   [9:0] lshr_ln53_2_fu_2204_p4;
wire   [31:0] or_ln2_fu_2176_p3;
wire   [31:0] or_ln53_1_fu_2196_p3;
wire   [31:0] xor_ln53_fu_2224_p2;
wire   [31:0] or_ln53_2_fu_2216_p3;
wire   [31:0] t1_fu_2159_p2;
wire   [31:0] xor_ln53_1_fu_2230_p2;
wire   [31:0] add_ln61_fu_2242_p2;
reg   [7:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
end

sha256_sha256_transform_m_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
m_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(m_address0),
    .ce0(m_ce0),
    .we0(m_we0),
    .d0(m_d0),
    .q0(m_q0),
    .address1(m_address1),
    .ce1(m_ce1),
    .we1(m_we1),
    .d1(add_ln40_6_reg_2770),
    .q1(m_q1)
);

sha256_mux_617_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 8 ),
    .din17_WIDTH( 8 ),
    .din18_WIDTH( 8 ),
    .din19_WIDTH( 8 ),
    .din20_WIDTH( 8 ),
    .din21_WIDTH( 8 ),
    .din22_WIDTH( 8 ),
    .din23_WIDTH( 8 ),
    .din24_WIDTH( 8 ),
    .din25_WIDTH( 8 ),
    .din26_WIDTH( 8 ),
    .din27_WIDTH( 8 ),
    .din28_WIDTH( 8 ),
    .din29_WIDTH( 8 ),
    .din30_WIDTH( 8 ),
    .din31_WIDTH( 8 ),
    .din32_WIDTH( 8 ),
    .din33_WIDTH( 8 ),
    .din34_WIDTH( 8 ),
    .din35_WIDTH( 8 ),
    .din36_WIDTH( 8 ),
    .din37_WIDTH( 8 ),
    .din38_WIDTH( 8 ),
    .din39_WIDTH( 8 ),
    .din40_WIDTH( 8 ),
    .din41_WIDTH( 8 ),
    .din42_WIDTH( 8 ),
    .din43_WIDTH( 8 ),
    .din44_WIDTH( 8 ),
    .din45_WIDTH( 8 ),
    .din46_WIDTH( 8 ),
    .din47_WIDTH( 8 ),
    .din48_WIDTH( 8 ),
    .din49_WIDTH( 8 ),
    .din50_WIDTH( 8 ),
    .din51_WIDTH( 8 ),
    .din52_WIDTH( 8 ),
    .din53_WIDTH( 8 ),
    .din54_WIDTH( 8 ),
    .din55_WIDTH( 8 ),
    .din56_WIDTH( 8 ),
    .din57_WIDTH( 8 ),
    .din58_WIDTH( 8 ),
    .din59_WIDTH( 8 ),
    .din60_WIDTH( 8 ),
    .din61_WIDTH( 7 ),
    .dout_WIDTH( 8 ))
mux_617_8_1_1_U130(
    .din0(p_read8),
    .din1(8'd0),
    .din2(8'd0),
    .din3(8'd0),
    .din4(p_read412),
    .din5(8'd0),
    .din6(8'd0),
    .din7(8'd0),
    .din8(p_read816),
    .din9(8'd0),
    .din10(8'd0),
    .din11(8'd0),
    .din12(p_read12),
    .din13(8'd0),
    .din14(8'd0),
    .din15(8'd0),
    .din16(p_read16),
    .din17(8'd0),
    .din18(8'd0),
    .din19(8'd0),
    .din20(p_read20),
    .din21(8'd0),
    .din22(8'd0),
    .din23(8'd0),
    .din24(p_read24),
    .din25(8'd0),
    .din26(8'd0),
    .din27(8'd0),
    .din28(p_read28),
    .din29(8'd0),
    .din30(8'd0),
    .din31(8'd0),
    .din32(p_read32),
    .din33(8'd0),
    .din34(8'd0),
    .din35(8'd0),
    .din36(p_read36),
    .din37(8'd0),
    .din38(8'd0),
    .din39(8'd0),
    .din40(p_read40),
    .din41(8'd0),
    .din42(8'd0),
    .din43(8'd0),
    .din44(p_read44),
    .din45(8'd0),
    .din46(8'd0),
    .din47(8'd0),
    .din48(p_read48),
    .din49(8'd0),
    .din50(8'd0),
    .din51(8'd0),
    .din52(p_read52),
    .din53(8'd0),
    .din54(8'd0),
    .din55(8'd0),
    .din56(p_read56),
    .din57(8'd0),
    .din58(8'd0),
    .din59(8'd0),
    .din60(p_read60),
    .din61(j_fu_404),
    .dout(tmp_fu_985_p63)
);

sha256_mux_617_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 8 ),
    .din17_WIDTH( 8 ),
    .din18_WIDTH( 8 ),
    .din19_WIDTH( 8 ),
    .din20_WIDTH( 8 ),
    .din21_WIDTH( 8 ),
    .din22_WIDTH( 8 ),
    .din23_WIDTH( 8 ),
    .din24_WIDTH( 8 ),
    .din25_WIDTH( 8 ),
    .din26_WIDTH( 8 ),
    .din27_WIDTH( 8 ),
    .din28_WIDTH( 8 ),
    .din29_WIDTH( 8 ),
    .din30_WIDTH( 8 ),
    .din31_WIDTH( 8 ),
    .din32_WIDTH( 8 ),
    .din33_WIDTH( 8 ),
    .din34_WIDTH( 8 ),
    .din35_WIDTH( 8 ),
    .din36_WIDTH( 8 ),
    .din37_WIDTH( 8 ),
    .din38_WIDTH( 8 ),
    .din39_WIDTH( 8 ),
    .din40_WIDTH( 8 ),
    .din41_WIDTH( 8 ),
    .din42_WIDTH( 8 ),
    .din43_WIDTH( 8 ),
    .din44_WIDTH( 8 ),
    .din45_WIDTH( 8 ),
    .din46_WIDTH( 8 ),
    .din47_WIDTH( 8 ),
    .din48_WIDTH( 8 ),
    .din49_WIDTH( 8 ),
    .din50_WIDTH( 8 ),
    .din51_WIDTH( 8 ),
    .din52_WIDTH( 8 ),
    .din53_WIDTH( 8 ),
    .din54_WIDTH( 8 ),
    .din55_WIDTH( 8 ),
    .din56_WIDTH( 8 ),
    .din57_WIDTH( 8 ),
    .din58_WIDTH( 8 ),
    .din59_WIDTH( 8 ),
    .din60_WIDTH( 8 ),
    .din61_WIDTH( 7 ),
    .dout_WIDTH( 8 ))
mux_617_8_1_1_U131(
    .din0(p_read19),
    .din1(8'd0),
    .din2(8'd0),
    .din3(8'd0),
    .din4(p_read513),
    .din5(8'd0),
    .din6(8'd0),
    .din7(8'd0),
    .din8(p_read9),
    .din9(8'd0),
    .din10(8'd0),
    .din11(8'd0),
    .din12(p_read13),
    .din13(8'd0),
    .din14(8'd0),
    .din15(8'd0),
    .din16(p_read17),
    .din17(8'd0),
    .din18(8'd0),
    .din19(8'd0),
    .din20(p_read21),
    .din21(8'd0),
    .din22(8'd0),
    .din23(8'd0),
    .din24(p_read25),
    .din25(8'd0),
    .din26(8'd0),
    .din27(8'd0),
    .din28(p_read29),
    .din29(8'd0),
    .din30(8'd0),
    .din31(8'd0),
    .din32(p_read33),
    .din33(8'd0),
    .din34(8'd0),
    .din35(8'd0),
    .din36(p_read37),
    .din37(8'd0),
    .din38(8'd0),
    .din39(8'd0),
    .din40(p_read41),
    .din41(8'd0),
    .din42(8'd0),
    .din43(8'd0),
    .din44(p_read45),
    .din45(8'd0),
    .din46(8'd0),
    .din47(8'd0),
    .din48(p_read49),
    .din49(8'd0),
    .din50(8'd0),
    .din51(8'd0),
    .din52(p_read53),
    .din53(8'd0),
    .din54(8'd0),
    .din55(8'd0),
    .din56(p_read57),
    .din57(8'd0),
    .din58(8'd0),
    .din59(8'd0),
    .din60(p_read61),
    .din61(j_fu_404),
    .dout(tmp_1_fu_1097_p63)
);

sha256_mux_617_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 8 ),
    .din17_WIDTH( 8 ),
    .din18_WIDTH( 8 ),
    .din19_WIDTH( 8 ),
    .din20_WIDTH( 8 ),
    .din21_WIDTH( 8 ),
    .din22_WIDTH( 8 ),
    .din23_WIDTH( 8 ),
    .din24_WIDTH( 8 ),
    .din25_WIDTH( 8 ),
    .din26_WIDTH( 8 ),
    .din27_WIDTH( 8 ),
    .din28_WIDTH( 8 ),
    .din29_WIDTH( 8 ),
    .din30_WIDTH( 8 ),
    .din31_WIDTH( 8 ),
    .din32_WIDTH( 8 ),
    .din33_WIDTH( 8 ),
    .din34_WIDTH( 8 ),
    .din35_WIDTH( 8 ),
    .din36_WIDTH( 8 ),
    .din37_WIDTH( 8 ),
    .din38_WIDTH( 8 ),
    .din39_WIDTH( 8 ),
    .din40_WIDTH( 8 ),
    .din41_WIDTH( 8 ),
    .din42_WIDTH( 8 ),
    .din43_WIDTH( 8 ),
    .din44_WIDTH( 8 ),
    .din45_WIDTH( 8 ),
    .din46_WIDTH( 8 ),
    .din47_WIDTH( 8 ),
    .din48_WIDTH( 8 ),
    .din49_WIDTH( 8 ),
    .din50_WIDTH( 8 ),
    .din51_WIDTH( 8 ),
    .din52_WIDTH( 8 ),
    .din53_WIDTH( 8 ),
    .din54_WIDTH( 8 ),
    .din55_WIDTH( 8 ),
    .din56_WIDTH( 8 ),
    .din57_WIDTH( 8 ),
    .din58_WIDTH( 8 ),
    .din59_WIDTH( 8 ),
    .din60_WIDTH( 8 ),
    .din61_WIDTH( 7 ),
    .dout_WIDTH( 8 ))
mux_617_8_1_1_U132(
    .din0(p_read210),
    .din1(8'd0),
    .din2(8'd0),
    .din3(8'd0),
    .din4(p_read614),
    .din5(8'd0),
    .din6(8'd0),
    .din7(8'd0),
    .din8(p_read10),
    .din9(8'd0),
    .din10(8'd0),
    .din11(8'd0),
    .din12(p_read14),
    .din13(8'd0),
    .din14(8'd0),
    .din15(8'd0),
    .din16(p_read18),
    .din17(8'd0),
    .din18(8'd0),
    .din19(8'd0),
    .din20(p_read22),
    .din21(8'd0),
    .din22(8'd0),
    .din23(8'd0),
    .din24(p_read26),
    .din25(8'd0),
    .din26(8'd0),
    .din27(8'd0),
    .din28(p_read30),
    .din29(8'd0),
    .din30(8'd0),
    .din31(8'd0),
    .din32(p_read34),
    .din33(8'd0),
    .din34(8'd0),
    .din35(8'd0),
    .din36(p_read38),
    .din37(8'd0),
    .din38(8'd0),
    .din39(8'd0),
    .din40(p_read42),
    .din41(8'd0),
    .din42(8'd0),
    .din43(8'd0),
    .din44(p_read46),
    .din45(8'd0),
    .din46(8'd0),
    .din47(8'd0),
    .din48(p_read50),
    .din49(8'd0),
    .din50(8'd0),
    .din51(8'd0),
    .din52(p_read54),
    .din53(8'd0),
    .din54(8'd0),
    .din55(8'd0),
    .din56(p_read58),
    .din57(8'd0),
    .din58(8'd0),
    .din59(8'd0),
    .din60(p_read62),
    .din61(j_fu_404),
    .dout(tmp_2_fu_1209_p63)
);

sha256_mux_617_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 8 ),
    .din17_WIDTH( 8 ),
    .din18_WIDTH( 8 ),
    .din19_WIDTH( 8 ),
    .din20_WIDTH( 8 ),
    .din21_WIDTH( 8 ),
    .din22_WIDTH( 8 ),
    .din23_WIDTH( 8 ),
    .din24_WIDTH( 8 ),
    .din25_WIDTH( 8 ),
    .din26_WIDTH( 8 ),
    .din27_WIDTH( 8 ),
    .din28_WIDTH( 8 ),
    .din29_WIDTH( 8 ),
    .din30_WIDTH( 8 ),
    .din31_WIDTH( 8 ),
    .din32_WIDTH( 8 ),
    .din33_WIDTH( 8 ),
    .din34_WIDTH( 8 ),
    .din35_WIDTH( 8 ),
    .din36_WIDTH( 8 ),
    .din37_WIDTH( 8 ),
    .din38_WIDTH( 8 ),
    .din39_WIDTH( 8 ),
    .din40_WIDTH( 8 ),
    .din41_WIDTH( 8 ),
    .din42_WIDTH( 8 ),
    .din43_WIDTH( 8 ),
    .din44_WIDTH( 8 ),
    .din45_WIDTH( 8 ),
    .din46_WIDTH( 8 ),
    .din47_WIDTH( 8 ),
    .din48_WIDTH( 8 ),
    .din49_WIDTH( 8 ),
    .din50_WIDTH( 8 ),
    .din51_WIDTH( 8 ),
    .din52_WIDTH( 8 ),
    .din53_WIDTH( 8 ),
    .din54_WIDTH( 8 ),
    .din55_WIDTH( 8 ),
    .din56_WIDTH( 8 ),
    .din57_WIDTH( 8 ),
    .din58_WIDTH( 8 ),
    .din59_WIDTH( 8 ),
    .din60_WIDTH( 8 ),
    .din61_WIDTH( 7 ),
    .dout_WIDTH( 8 ))
mux_617_8_1_1_U133(
    .din0(p_read311),
    .din1(8'd0),
    .din2(8'd0),
    .din3(8'd0),
    .din4(p_read715),
    .din5(8'd0),
    .din6(8'd0),
    .din7(8'd0),
    .din8(p_read11),
    .din9(8'd0),
    .din10(8'd0),
    .din11(8'd0),
    .din12(p_read15),
    .din13(8'd0),
    .din14(8'd0),
    .din15(8'd0),
    .din16(p_read1917),
    .din17(8'd0),
    .din18(8'd0),
    .din19(8'd0),
    .din20(p_read23),
    .din21(8'd0),
    .din22(8'd0),
    .din23(8'd0),
    .din24(p_read27),
    .din25(8'd0),
    .din26(8'd0),
    .din27(8'd0),
    .din28(p_read31),
    .din29(8'd0),
    .din30(8'd0),
    .din31(8'd0),
    .din32(p_read35),
    .din33(8'd0),
    .din34(8'd0),
    .din35(8'd0),
    .din36(p_read39),
    .din37(8'd0),
    .din38(8'd0),
    .din39(8'd0),
    .din40(p_read43),
    .din41(8'd0),
    .din42(8'd0),
    .din43(8'd0),
    .din44(p_read47),
    .din45(8'd0),
    .din46(8'd0),
    .din47(8'd0),
    .din48(p_read51),
    .din49(8'd0),
    .din50(8'd0),
    .din51(8'd0),
    .din52(p_read55),
    .din53(8'd0),
    .din54(8'd0),
    .din55(8'd0),
    .din56(p_read59),
    .din57(8'd0),
    .din58(8'd0),
    .din59(8'd0),
    .din60(p_read63),
    .din61(j_fu_404),
    .dout(tmp_3_fu_1321_p63)
);

sha256_mux_647_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 32 ),
    .din17_WIDTH( 32 ),
    .din18_WIDTH( 32 ),
    .din19_WIDTH( 32 ),
    .din20_WIDTH( 32 ),
    .din21_WIDTH( 32 ),
    .din22_WIDTH( 32 ),
    .din23_WIDTH( 32 ),
    .din24_WIDTH( 32 ),
    .din25_WIDTH( 32 ),
    .din26_WIDTH( 32 ),
    .din27_WIDTH( 32 ),
    .din28_WIDTH( 32 ),
    .din29_WIDTH( 32 ),
    .din30_WIDTH( 32 ),
    .din31_WIDTH( 32 ),
    .din32_WIDTH( 32 ),
    .din33_WIDTH( 32 ),
    .din34_WIDTH( 32 ),
    .din35_WIDTH( 32 ),
    .din36_WIDTH( 32 ),
    .din37_WIDTH( 32 ),
    .din38_WIDTH( 32 ),
    .din39_WIDTH( 32 ),
    .din40_WIDTH( 32 ),
    .din41_WIDTH( 32 ),
    .din42_WIDTH( 32 ),
    .din43_WIDTH( 32 ),
    .din44_WIDTH( 32 ),
    .din45_WIDTH( 32 ),
    .din46_WIDTH( 32 ),
    .din47_WIDTH( 32 ),
    .din48_WIDTH( 32 ),
    .din49_WIDTH( 32 ),
    .din50_WIDTH( 32 ),
    .din51_WIDTH( 32 ),
    .din52_WIDTH( 32 ),
    .din53_WIDTH( 32 ),
    .din54_WIDTH( 32 ),
    .din55_WIDTH( 32 ),
    .din56_WIDTH( 32 ),
    .din57_WIDTH( 32 ),
    .din58_WIDTH( 32 ),
    .din59_WIDTH( 32 ),
    .din60_WIDTH( 32 ),
    .din61_WIDTH( 32 ),
    .din62_WIDTH( 32 ),
    .din63_WIDTH( 32 ),
    .din64_WIDTH( 7 ),
    .dout_WIDTH( 32 ))
mux_647_32_1_1_U134(
    .din0(32'd1116352408),
    .din1(32'd1899447441),
    .din2(32'd3049323471),
    .din3(32'd3921009573),
    .din4(32'd961987163),
    .din5(32'd1508970993),
    .din6(32'd2453635748),
    .din7(32'd2870763221),
    .din8(32'd3624381080),
    .din9(32'd310598401),
    .din10(32'd607225278),
    .din11(32'd1426881987),
    .din12(32'd1925078388),
    .din13(32'd2162078206),
    .din14(32'd2614888103),
    .din15(32'd3248222580),
    .din16(32'd3835390401),
    .din17(32'd4022224774),
    .din18(32'd264347078),
    .din19(32'd604807628),
    .din20(32'd770255983),
    .din21(32'd1249150122),
    .din22(32'd1555081692),
    .din23(32'd1996064986),
    .din24(32'd2554220882),
    .din25(32'd2821834349),
    .din26(32'd2952996808),
    .din27(32'd3210313671),
    .din28(32'd3336571891),
    .din29(32'd3584528711),
    .din30(32'd113926993),
    .din31(32'd338241895),
    .din32(32'd666307205),
    .din33(32'd773529912),
    .din34(32'd1294757372),
    .din35(32'd1396182291),
    .din36(32'd1695183700),
    .din37(32'd1986661051),
    .din38(32'd2177026350),
    .din39(32'd2456956037),
    .din40(32'd2730485921),
    .din41(32'd2820302411),
    .din42(32'd3259730800),
    .din43(32'd3345764771),
    .din44(32'd3516065817),
    .din45(32'd3600352804),
    .din46(32'd4094571909),
    .din47(32'd275423344),
    .din48(32'd430227734),
    .din49(32'd506948616),
    .din50(32'd659060556),
    .din51(32'd883997877),
    .din52(32'd958139571),
    .din53(32'd1322822218),
    .din54(32'd1537002063),
    .din55(32'd1747873779),
    .din56(32'd1955562222),
    .din57(32'd2024104815),
    .din58(32'd2227730452),
    .din59(32'd2361852424),
    .din60(32'd2428436474),
    .din61(32'd2756734187),
    .din62(32'd3204031479),
    .din63(32'd3329325298),
    .din64(i_2_fu_428),
    .dout(tmp_4_fu_1866_p66)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln39_fu_1474_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        b_fu_452 <= ctx_state_0_read;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        b_fu_452 <= a_1_fu_2248_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln39_fu_1474_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        c_fu_448 <= ctx_state_1_read;
    end else if (((icmp_ln51_fu_1752_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        c_fu_448 <= b_fu_452;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln39_fu_1474_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        d_1_fu_444 <= ctx_state_2_read;
    end else if (((icmp_ln51_fu_1752_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        d_1_fu_444 <= c_fu_448;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln39_fu_1474_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        d_fu_424 <= ctx_state_3_read;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        d_fu_424 <= c_3_reg_2775;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln39_fu_1474_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        f_fu_440 <= ctx_state_4_read;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        f_fu_440 <= e_1_fu_2236_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln39_fu_1474_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        g_fu_436 <= ctx_state_5_read;
    end else if (((icmp_ln51_fu_1752_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        g_fu_436 <= f_fu_440;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln39_fu_1474_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        h_1_fu_432 <= ctx_state_6_read;
    end else if (((icmp_ln51_fu_1752_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        h_1_fu_432 <= g_fu_436;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln39_fu_1474_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        h_fu_420 <= ctx_state_7_read;
    end else if (((icmp_ln51_fu_1752_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        h_fu_420 <= h_1_fu_432;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln37_fu_970_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_1_fu_416 <= 7'd16;
    end else if (((icmp_ln39_fu_1474_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        i_1_fu_416 <= add_ln39_fu_1506_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln39_fu_1474_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_2_fu_428 <= 7'd0;
    end else if (((icmp_ln51_fu_1752_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        i_2_fu_428 <= add_ln51_fu_1758_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_fu_408 <= 5'd0;
    end else if (((icmp_ln37_fu_970_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_fu_408 <= add_ln37_fu_976_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        j_fu_404 <= 7'd0;
    end else if (((icmp_ln37_fu_970_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_fu_404 <= add_ln37_1_fu_1446_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln40_6_reg_2770 <= add_ln40_6_fu_1720_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln51_fu_1752_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        add_ln52_2_reg_2796 <= add_ln52_2_fu_2006_p2;
        xor_ln52_3_reg_2786 <= xor_ln52_3_fu_1860_p2;
        xor_ln53_3_reg_2801 <= xor_ln53_3_fu_2030_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        c_3_reg_2775 <= d_1_fu_444;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        m_load_1_reg_2755 <= m_q0;
        m_load_reg_2746 <= m_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln39_fu_1474_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        trunc_ln39_reg_2667 <= trunc_ln39_fu_1480_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        zext_ln39_reg_2659[6 : 0] <= zext_ln39_fu_1470_p1[6 : 0];
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

always @ (*) begin
    if ((((icmp_ln51_fu_1752_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln51_fu_1752_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        m_address0 = zext_ln51_fu_1747_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        m_address0 = zext_ln40_2_fu_1559_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        m_address0 = zext_ln40_1_fu_1501_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        m_address0 = zext_ln37_fu_965_p1;
    end else begin
        m_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        m_address1 = zext_ln39_reg_2659;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        m_address1 = zext_ln40_3_fu_1569_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        m_address1 = zext_ln40_fu_1490_p1;
    end else begin
        m_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        m_ce0 = 1'b1;
    end else begin
        m_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        m_ce1 = 1'b1;
    end else begin
        m_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln37_fu_970_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        m_we0 = 1'b1;
    end else begin
        m_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        m_we1 = 1'b1;
    end else begin
        m_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln37_fu_970_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln39_fu_1474_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state7 : begin
            if (((icmp_ln51_fu_1752_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_1_fu_2248_p2 = (add_ln61_fu_2242_p2 + xor_ln53_3_reg_2801);

assign add_ln37_1_fu_1446_p2 = (j_fu_404 + 7'd4);

assign add_ln37_fu_976_p2 = (i_fu_408 + 5'd1);

assign add_ln39_fu_1506_p2 = (i_1_fu_416 + 7'd1);

assign add_ln40_1_fu_1495_p2 = ($signed(trunc_ln39_fu_1480_p1) + $signed(6'd57));

assign add_ln40_2_fu_1554_p2 = ($signed(trunc_ln39_reg_2667) + $signed(6'd49));

assign add_ln40_3_fu_1564_p2 = ($signed(trunc_ln39_reg_2667) + $signed(6'd48));

assign add_ln40_4_fu_1709_p2 = (m_load_1_reg_2755 + m_q1);

assign add_ln40_5_fu_1714_p2 = (xor_ln40_1_fu_1633_p2 + xor_ln40_3_fu_1703_p2);

assign add_ln40_6_fu_1720_p2 = (add_ln40_5_fu_1714_p2 + add_ln40_4_fu_1709_p2);

assign add_ln40_fu_1484_p2 = ($signed(trunc_ln39_fu_1480_p1) + $signed(6'd62));

assign add_ln51_fu_1758_p2 = (i_2_fu_428 + 7'd1);

assign add_ln52_1_fu_2000_p2 = (h_fu_420 + xor_ln52_1_fu_1836_p2);

assign add_ln52_2_fu_2006_p2 = (add_ln52_1_fu_2000_p2 + tmp_4_fu_1866_p66);

assign add_ln52_fu_2154_p2 = (m_q0 + xor_ln52_3_reg_2786);

assign add_ln61_fu_2242_p2 = (xor_ln53_1_fu_2230_p2 + t1_fu_2159_p2);

assign add_ln64_fu_2066_p2 = (b_fu_452 + ctx_state_0_read);

assign add_ln65_fu_2071_p2 = (c_fu_448 + ctx_state_1_read);

assign add_ln66_fu_2076_p2 = (d_1_fu_444 + ctx_state_2_read);

assign add_ln67_fu_2081_p2 = (d_fu_424 + ctx_state_3_read);

assign add_ln68_fu_2086_p2 = (f_fu_440 + ctx_state_4_read);

assign add_ln69_fu_2091_p2 = (g_fu_436 + ctx_state_5_read);

assign add_ln70_fu_2096_p2 = (h_1_fu_432 + ctx_state_6_read);

assign add_ln71_fu_2101_p2 = (h_fu_420 + ctx_state_7_read);

assign and_ln52_1_fu_1854_p2 = (xor_ln52_2_fu_1848_p2 & h_1_fu_432);

assign and_ln52_fu_1842_p2 = (g_fu_436 & f_fu_440);

assign and_ln53_1_fu_2024_p2 = (d_1_fu_444 & c_fu_448);

assign and_ln53_fu_2018_p2 = (xor_ln53_2_fu_2012_p2 & b_fu_452);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_return_0 = add_ln64_fu_2066_p2;

assign ap_return_1 = add_ln65_fu_2071_p2;

assign ap_return_2 = add_ln66_fu_2076_p2;

assign ap_return_3 = add_ln67_fu_2081_p2;

assign ap_return_4 = add_ln68_fu_2086_p2;

assign ap_return_5 = add_ln69_fu_2091_p2;

assign ap_return_6 = add_ln70_fu_2096_p2;

assign ap_return_7 = add_ln71_fu_2101_p2;

assign e_1_fu_2236_p2 = (t1_fu_2159_p2 + d_fu_424);

assign icmp_ln37_fu_970_p2 = ((i_fu_408 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln39_fu_1474_p2 = ((i_1_fu_416 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln51_fu_1752_p2 = ((i_2_fu_428 == 7'd64) ? 1'b1 : 1'b0);

assign lshr_ln1_fu_1764_p4 = {{f_fu_440[31:6]}};

assign lshr_ln2_fu_2164_p4 = {{b_fu_452[31:2]}};

assign lshr_ln40_1_fu_1594_p4 = {{m_load_reg_2746[31:19]}};

assign lshr_ln40_2_fu_1614_p4 = {{m_load_reg_2746[31:10]}};

assign lshr_ln40_3_fu_1639_p4 = {{m_q0[31:7]}};

assign lshr_ln40_4_fu_1661_p4 = {{m_q0[31:18]}};

assign lshr_ln40_5_fu_1683_p4 = {{m_q0[31:3]}};

assign lshr_ln52_1_fu_1786_p4 = {{f_fu_440[31:11]}};

assign lshr_ln52_2_fu_1808_p4 = {{f_fu_440[31:25]}};

assign lshr_ln53_1_fu_2184_p4 = {{b_fu_452[31:13]}};

assign lshr_ln53_2_fu_2204_p4 = {{b_fu_452[31:22]}};

assign lshr_ln_fu_1574_p4 = {{m_load_reg_2746[31:17]}};

assign m_d0 = {{{{tmp_fu_985_p63}, {tmp_1_fu_1097_p63}}, {tmp_2_fu_1209_p63}}, {tmp_3_fu_1321_p63}};

assign or_ln1_fu_1778_p3 = {{trunc_ln52_fu_1774_p1}, {lshr_ln1_fu_1764_p4}};

assign or_ln2_fu_2176_p3 = {{trunc_ln53_fu_2173_p1}, {lshr_ln2_fu_2164_p4}};

assign or_ln40_1_fu_1606_p3 = {{trunc_ln40_1_fu_1603_p1}, {lshr_ln40_1_fu_1594_p4}};

assign or_ln40_2_fu_1653_p3 = {{trunc_ln40_2_fu_1649_p1}, {lshr_ln40_3_fu_1639_p4}};

assign or_ln40_3_fu_1675_p3 = {{trunc_ln40_3_fu_1671_p1}, {lshr_ln40_4_fu_1661_p4}};

assign or_ln52_1_fu_1800_p3 = {{trunc_ln52_1_fu_1796_p1}, {lshr_ln52_1_fu_1786_p4}};

assign or_ln52_2_fu_1822_p3 = {{trunc_ln52_2_fu_1818_p1}, {lshr_ln52_2_fu_1808_p4}};

assign or_ln53_1_fu_2196_p3 = {{trunc_ln53_1_fu_2193_p1}, {lshr_ln53_1_fu_2184_p4}};

assign or_ln53_2_fu_2216_p3 = {{trunc_ln53_2_fu_2213_p1}, {lshr_ln53_2_fu_2204_p4}};

assign or_ln_fu_1586_p3 = {{trunc_ln40_fu_1583_p1}, {lshr_ln_fu_1574_p4}};

assign t1_fu_2159_p2 = (add_ln52_2_reg_2796 + add_ln52_fu_2154_p2);

assign trunc_ln39_fu_1480_p1 = i_1_fu_416[5:0];

assign trunc_ln40_1_fu_1603_p1 = m_load_reg_2746[18:0];

assign trunc_ln40_2_fu_1649_p1 = m_q0[6:0];

assign trunc_ln40_3_fu_1671_p1 = m_q0[17:0];

assign trunc_ln40_fu_1583_p1 = m_load_reg_2746[16:0];

assign trunc_ln52_1_fu_1796_p1 = f_fu_440[10:0];

assign trunc_ln52_2_fu_1818_p1 = f_fu_440[24:0];

assign trunc_ln52_fu_1774_p1 = f_fu_440[5:0];

assign trunc_ln53_1_fu_2193_p1 = b_fu_452[12:0];

assign trunc_ln53_2_fu_2213_p1 = b_fu_452[21:0];

assign trunc_ln53_fu_2173_p1 = b_fu_452[1:0];

assign xor_ln40_1_fu_1633_p2 = (xor_ln40_fu_1627_p2 ^ or_ln_fu_1586_p3);

assign xor_ln40_2_fu_1697_p2 = (zext_ln40_5_fu_1693_p1 ^ or_ln40_3_fu_1675_p3);

assign xor_ln40_3_fu_1703_p2 = (xor_ln40_2_fu_1697_p2 ^ or_ln40_2_fu_1653_p3);

assign xor_ln40_fu_1627_p2 = (zext_ln40_4_fu_1623_p1 ^ or_ln40_1_fu_1606_p3);

assign xor_ln52_1_fu_1836_p2 = (xor_ln52_fu_1830_p2 ^ or_ln52_2_fu_1822_p3);

assign xor_ln52_2_fu_1848_p2 = (f_fu_440 ^ 32'd4294967295);

assign xor_ln52_3_fu_1860_p2 = (and_ln52_fu_1842_p2 ^ and_ln52_1_fu_1854_p2);

assign xor_ln52_fu_1830_p2 = (or_ln52_1_fu_1800_p3 ^ or_ln1_fu_1778_p3);

assign xor_ln53_1_fu_2230_p2 = (xor_ln53_fu_2224_p2 ^ or_ln53_2_fu_2216_p3);

assign xor_ln53_2_fu_2012_p2 = (d_1_fu_444 ^ c_fu_448);

assign xor_ln53_3_fu_2030_p2 = (and_ln53_fu_2018_p2 ^ and_ln53_1_fu_2024_p2);

assign xor_ln53_fu_2224_p2 = (or_ln53_1_fu_2196_p3 ^ or_ln2_fu_2176_p3);

assign zext_ln37_fu_965_p1 = i_fu_408;

assign zext_ln39_fu_1470_p1 = i_1_fu_416;

assign zext_ln40_1_fu_1501_p1 = add_ln40_1_fu_1495_p2;

assign zext_ln40_2_fu_1559_p1 = add_ln40_2_fu_1554_p2;

assign zext_ln40_3_fu_1569_p1 = add_ln40_3_fu_1564_p2;

assign zext_ln40_4_fu_1623_p1 = lshr_ln40_2_fu_1614_p4;

assign zext_ln40_5_fu_1693_p1 = lshr_ln40_5_fu_1683_p4;

assign zext_ln40_fu_1490_p1 = add_ln40_fu_1484_p2;

assign zext_ln51_fu_1747_p1 = i_2_fu_428;

always @ (posedge ap_clk) begin
    zext_ln39_reg_2659[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
end

endmodule //sha256_sha256_transform
