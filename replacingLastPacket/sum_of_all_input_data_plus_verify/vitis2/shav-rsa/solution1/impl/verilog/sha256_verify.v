// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="sha256_verify_sha256_verify,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu280-fsvh2892-2L-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.209211,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=31255,HLS_SYN_LUT=78031,HLS_VERSION=2022_1}" *)

module sha256_verify (
        ap_clk,
        ap_rst_n,
        input_r_TDATA,
        input_r_TVALID,
        input_r_TREADY,
        output_r_TDATA,
        output_r_TVALID,
        output_r_TREADY
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst_n;
input  [583:0] input_r_TDATA;
input   input_r_TVALID;
output   input_r_TREADY;
output  [7:0] output_r_TDATA;
output   output_r_TVALID;
input   output_r_TREADY;

 reg    ap_rst_n_inv;
reg    output_r_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
reg   [511:0] reg_111;
wire    ap_CS_fsm_state5;
wire   [0:0] tmp_fu_139_p3;
reg   [511:0] hash_tdata_V_reg_233;
wire    ap_CS_fsm_state3;
reg   [511:0] lastPacket_tdata_V_reg_238;
wire   [511:0] grp_productMod_512_s_fu_85_ap_return;
reg   [511:0] processor_rMod_V_reg_243;
wire   [511:0] grp_monProduct_512_s_fu_89_ap_return;
reg   [511:0] P_V_reg_249;
wire    ap_CS_fsm_state4;
reg   [511:0] ref_tmp_i_i_reg_260;
wire    ap_CS_fsm_state6;
wire   [0:0] p_Result_s_fu_182_p2;
reg   [0:0] p_Result_s_reg_265;
wire    grp_sha2561_ver_fu_79_ap_start;
wire    grp_sha2561_ver_fu_79_ap_done;
wire    grp_sha2561_ver_fu_79_ap_idle;
wire    grp_sha2561_ver_fu_79_ap_ready;
wire    grp_sha2561_ver_fu_79_input_r_TREADY;
wire   [511:0] grp_sha2561_ver_fu_79_ap_return_0;
wire   [511:0] grp_sha2561_ver_fu_79_ap_return_1;
wire    grp_productMod_512_s_fu_85_ap_start;
wire    grp_productMod_512_s_fu_85_ap_done;
wire    grp_productMod_512_s_fu_85_ap_idle;
wire    grp_productMod_512_s_fu_85_ap_ready;
wire    grp_monProduct_512_s_fu_89_ap_start;
wire    grp_monProduct_512_s_fu_89_ap_done;
wire    grp_monProduct_512_s_fu_89_ap_idle;
wire    grp_monProduct_512_s_fu_89_ap_ready;
reg   [511:0] grp_monProduct_512_s_fu_89_opA;
reg   [511:0] grp_monProduct_512_s_fu_89_opB;
wire    grp_monProduct_512_s_fu_96_ap_start;
wire    grp_monProduct_512_s_fu_96_ap_done;
wire    grp_monProduct_512_s_fu_96_ap_idle;
wire    grp_monProduct_512_s_fu_96_ap_ready;
wire   [511:0] grp_monProduct_512_s_fu_96_ap_return;
reg    grp_sha2561_ver_fu_79_ap_start_reg;
wire    ap_CS_fsm_state2;
reg    grp_productMod_512_s_fu_85_ap_start_reg;
wire    ap_CS_fsm_state1;
reg   [8:0] ap_NS_fsm;
wire    ap_NS_fsm_state2;
reg    grp_monProduct_512_s_fu_89_ap_start_reg;
reg    ap_block_state3_on_subcall_done;
wire    ap_CS_fsm_state7;
reg    grp_monProduct_512_s_fu_96_ap_start_reg;
reg   [511:0] R_V_1_fu_64;
reg    ap_block_state7_on_subcall_done;
reg    ap_block_state4_on_subcall_done;
reg   [5:0] i_fu_68;
wire   [5:0] i_3_fu_198_p2;
wire   [4:0] trunc_ln825_fu_147_p1;
wire   [19:0] zext_ln825_fu_150_p1;
wire   [19:0] shl_ln825_fu_154_p2;
wire   [0:0] tmp_1_fu_160_p3;
wire   [0:0] trunc_ln825_1_fu_168_p1;
wire   [16:0] and_ln_fu_172_p4;
wire   [0:0] k_V_fu_208_p2;
wire    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
reg    ap_ST_fsm_state6_blk;
reg    ap_ST_fsm_state7_blk;
reg    ap_ST_fsm_state8_blk;
reg    ap_ST_fsm_state9_blk;
wire    regslice_both_output_r_U_apdone_blk;
reg    ap_block_state9;
wire    regslice_both_input_r_U_apdone_blk;
wire   [583:0] input_r_TDATA_int_regslice;
wire    input_r_TVALID_int_regslice;
reg    input_r_TREADY_int_regslice;
wire    regslice_both_input_r_U_ack_in;
wire   [7:0] output_r_TDATA_int_regslice;
reg    output_r_TVALID_int_regslice;
wire    output_r_TREADY_int_regslice;
wire    regslice_both_output_r_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
#0 grp_sha2561_ver_fu_79_ap_start_reg = 1'b0;
#0 grp_productMod_512_s_fu_85_ap_start_reg = 1'b0;
#0 grp_monProduct_512_s_fu_89_ap_start_reg = 1'b0;
#0 grp_monProduct_512_s_fu_96_ap_start_reg = 1'b0;
end

sha256_verify_sha2561_ver grp_sha2561_ver_fu_79(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_sha2561_ver_fu_79_ap_start),
    .ap_done(grp_sha2561_ver_fu_79_ap_done),
    .ap_idle(grp_sha2561_ver_fu_79_ap_idle),
    .ap_ready(grp_sha2561_ver_fu_79_ap_ready),
    .input_r_TDATA(input_r_TDATA_int_regslice),
    .input_r_TVALID(input_r_TVALID_int_regslice),
    .input_r_TREADY(grp_sha2561_ver_fu_79_input_r_TREADY),
    .ap_return_0(grp_sha2561_ver_fu_79_ap_return_0),
    .ap_return_1(grp_sha2561_ver_fu_79_ap_return_1)
);

sha256_verify_productMod_512_s grp_productMod_512_s_fu_85(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_productMod_512_s_fu_85_ap_start),
    .ap_done(grp_productMod_512_s_fu_85_ap_done),
    .ap_idle(grp_productMod_512_s_fu_85_ap_idle),
    .ap_ready(grp_productMod_512_s_fu_85_ap_ready),
    .ap_return(grp_productMod_512_s_fu_85_ap_return)
);

sha256_verify_monProduct_512_s grp_monProduct_512_s_fu_89(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_monProduct_512_s_fu_89_ap_start),
    .ap_done(grp_monProduct_512_s_fu_89_ap_done),
    .ap_idle(grp_monProduct_512_s_fu_89_ap_idle),
    .ap_ready(grp_monProduct_512_s_fu_89_ap_ready),
    .opA(grp_monProduct_512_s_fu_89_opA),
    .opB(grp_monProduct_512_s_fu_89_opB),
    .ap_return(grp_monProduct_512_s_fu_89_ap_return)
);

sha256_verify_monProduct_512_s grp_monProduct_512_s_fu_96(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_monProduct_512_s_fu_96_ap_start),
    .ap_done(grp_monProduct_512_s_fu_96_ap_done),
    .ap_idle(grp_monProduct_512_s_fu_96_ap_idle),
    .ap_ready(grp_monProduct_512_s_fu_96_ap_ready),
    .opA(processor_rMod_V_reg_243),
    .opB(512'd1),
    .ap_return(grp_monProduct_512_s_fu_96_ap_return)
);

sha256_verify_regslice_both #(
    .DataWidth( 584 ))
regslice_both_input_r_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_r_TDATA),
    .vld_in(input_r_TVALID),
    .ack_in(regslice_both_input_r_U_ack_in),
    .data_out(input_r_TDATA_int_regslice),
    .vld_out(input_r_TVALID_int_regslice),
    .ack_out(input_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_input_r_U_apdone_blk)
);

sha256_verify_regslice_both #(
    .DataWidth( 8 ))
regslice_both_output_r_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(output_r_TDATA_int_regslice),
    .vld_in(output_r_TVALID_int_regslice),
    .ack_in(output_r_TREADY_int_regslice),
    .data_out(output_r_TDATA),
    .vld_out(regslice_both_output_r_U_vld_out),
    .ack_out(output_r_TREADY),
    .apdone_blk(regslice_both_output_r_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_monProduct_512_s_fu_89_ap_start_reg <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state3) & (1'b0 == ap_block_state3_on_subcall_done)) | ((tmp_fu_139_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state5)) | ((tmp_fu_139_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state5)) | ((p_Result_s_fu_182_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6) & (grp_monProduct_512_s_fu_89_ap_done == 1'b1)))) begin
            grp_monProduct_512_s_fu_89_ap_start_reg <= 1'b1;
        end else if ((grp_monProduct_512_s_fu_89_ap_ready == 1'b1)) begin
            grp_monProduct_512_s_fu_89_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_monProduct_512_s_fu_96_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state3) & (1'b0 == ap_block_state3_on_subcall_done))) begin
            grp_monProduct_512_s_fu_96_ap_start_reg <= 1'b1;
        end else if ((grp_monProduct_512_s_fu_96_ap_ready == 1'b1)) begin
            grp_monProduct_512_s_fu_96_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_productMod_512_s_fu_85_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_NS_fsm_state2) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_productMod_512_s_fu_85_ap_start_reg <= 1'b1;
        end else if ((grp_productMod_512_s_fu_85_ap_ready == 1'b1)) begin
            grp_productMod_512_s_fu_85_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_sha2561_ver_fu_79_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            grp_sha2561_ver_fu_79_ap_start_reg <= 1'b1;
        end else if ((grp_sha2561_ver_fu_79_ap_ready == 1'b1)) begin
            grp_sha2561_ver_fu_79_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_block_state4_on_subcall_done))) begin
        R_V_1_fu_64 <= grp_monProduct_512_s_fu_96_ap_return;
    end else if ((((p_Result_s_fu_182_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6) & (grp_monProduct_512_s_fu_89_ap_done == 1'b1)) | ((p_Result_s_reg_265 == 1'd0) & (1'b1 == ap_CS_fsm_state7) & (1'b0 == ap_block_state7_on_subcall_done)))) begin
        R_V_1_fu_64 <= grp_monProduct_512_s_fu_89_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        i_fu_68 <= 6'd19;
    end else if (((1'b1 == ap_CS_fsm_state7) & (1'b0 == ap_block_state7_on_subcall_done))) begin
        i_fu_68 <= i_3_fu_198_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        P_V_reg_249 <= grp_monProduct_512_s_fu_89_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        hash_tdata_V_reg_233 <= grp_sha2561_ver_fu_79_ap_return_0;
        lastPacket_tdata_V_reg_238 <= grp_sha2561_ver_fu_79_ap_return_1;
        processor_rMod_V_reg_243 <= grp_productMod_512_s_fu_85_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        p_Result_s_reg_265 <= p_Result_s_fu_182_p2;
        ref_tmp_i_i_reg_260 <= grp_monProduct_512_s_fu_89_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((((tmp_fu_139_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state5)) | ((tmp_fu_139_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state5)))) begin
        reg_111 <= R_V_1_fu_64;
    end
end

assign ap_ST_fsm_state1_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state3_on_subcall_done)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state4_on_subcall_done)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

assign ap_ST_fsm_state5_blk = 1'b0;

always @ (*) begin
    if ((grp_monProduct_512_s_fu_89_ap_done == 1'b0)) begin
        ap_ST_fsm_state6_blk = 1'b1;
    end else begin
        ap_ST_fsm_state6_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state7_on_subcall_done)) begin
        ap_ST_fsm_state7_blk = 1'b1;
    end else begin
        ap_ST_fsm_state7_blk = 1'b0;
    end
end

always @ (*) begin
    if (((output_r_TREADY_int_regslice == 1'b0) | (grp_monProduct_512_s_fu_89_ap_done == 1'b0))) begin
        ap_ST_fsm_state8_blk = 1'b1;
    end else begin
        ap_ST_fsm_state8_blk = 1'b0;
    end
end

always @ (*) begin
    if (((output_r_TREADY_int_regslice == 1'b0) | (regslice_both_output_r_U_apdone_blk == 1'b1))) begin
        ap_ST_fsm_state9_blk = 1'b1;
    end else begin
        ap_ST_fsm_state9_blk = 1'b0;
    end
end

always @ (*) begin
    if (((p_Result_s_reg_265 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        grp_monProduct_512_s_fu_89_opA = ref_tmp_i_i_reg_260;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8))) begin
        grp_monProduct_512_s_fu_89_opA = reg_111;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_monProduct_512_s_fu_89_opA = processor_rMod_V_reg_243;
    end else begin
        grp_monProduct_512_s_fu_89_opA = 'bx;
    end
end

always @ (*) begin
    if (((p_Result_s_reg_265 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        grp_monProduct_512_s_fu_89_opB = P_V_reg_249;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_monProduct_512_s_fu_89_opB = 512'd1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_monProduct_512_s_fu_89_opB = reg_111;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_monProduct_512_s_fu_89_opB = lastPacket_tdata_V_reg_238;
    end else begin
        grp_monProduct_512_s_fu_89_opB = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        input_r_TREADY_int_regslice = grp_sha2561_ver_fu_79_input_r_TREADY;
    end else begin
        input_r_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8))) begin
        output_r_TDATA_blk_n = output_r_TREADY_int_regslice;
    end else begin
        output_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((output_r_TREADY_int_regslice == 1'b0) | (grp_monProduct_512_s_fu_89_ap_done == 1'b0)) & (1'b1 == ap_CS_fsm_state8))) begin
        output_r_TVALID_int_regslice = 1'b1;
    end else begin
        output_r_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (1'b0 == ap_block_state3_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_block_state4_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((tmp_fu_139_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (grp_monProduct_512_s_fu_89_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (1'b0 == ap_block_state7_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if ((~((output_r_TREADY_int_regslice == 1'b0) | (grp_monProduct_512_s_fu_89_ap_done == 1'b0)) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if ((~((output_r_TREADY_int_regslice == 1'b0) | (regslice_both_output_r_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln_fu_172_p4 = {{{tmp_1_fu_160_p3}, {15'd0}}, {trunc_ln825_1_fu_168_p1}};

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_NS_fsm_state2 = ap_NS_fsm[32'd1];

always @ (*) begin
    ap_block_state3_on_subcall_done = ((grp_productMod_512_s_fu_85_ap_done == 1'b0) | (grp_sha2561_ver_fu_79_ap_done == 1'b0));
end

always @ (*) begin
    ap_block_state4_on_subcall_done = ((grp_monProduct_512_s_fu_96_ap_done == 1'b0) | (grp_monProduct_512_s_fu_89_ap_done == 1'b0));
end

always @ (*) begin
    ap_block_state7_on_subcall_done = ((p_Result_s_reg_265 == 1'd0) & (grp_monProduct_512_s_fu_89_ap_done == 1'b0));
end

always @ (*) begin
    ap_block_state9 = ((output_r_TREADY_int_regslice == 1'b0) | (regslice_both_output_r_U_apdone_blk == 1'b1));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_monProduct_512_s_fu_89_ap_start = grp_monProduct_512_s_fu_89_ap_start_reg;

assign grp_monProduct_512_s_fu_96_ap_start = grp_monProduct_512_s_fu_96_ap_start_reg;

assign grp_productMod_512_s_fu_85_ap_start = grp_productMod_512_s_fu_85_ap_start_reg;

assign grp_sha2561_ver_fu_79_ap_start = grp_sha2561_ver_fu_79_ap_start_reg;

assign i_3_fu_198_p2 = ($signed(i_fu_68) + $signed(6'd63));

assign input_r_TREADY = regslice_both_input_r_U_ack_in;

assign k_V_fu_208_p2 = ((hash_tdata_V_reg_233 == grp_monProduct_512_s_fu_89_ap_return) ? 1'b1 : 1'b0);

assign output_r_TDATA_int_regslice = k_V_fu_208_p2;

assign output_r_TVALID = regslice_both_output_r_U_vld_out;

assign p_Result_s_fu_182_p2 = ((and_ln_fu_172_p4 == 17'd0) ? 1'b1 : 1'b0);

assign shl_ln825_fu_154_p2 = 20'd1 << zext_ln825_fu_150_p1;

assign tmp_1_fu_160_p3 = shl_ln825_fu_154_p2[32'd16];

assign tmp_fu_139_p3 = i_fu_68[32'd5];

assign trunc_ln825_1_fu_168_p1 = shl_ln825_fu_154_p2[0:0];

assign trunc_ln825_fu_147_p1 = i_fu_68[4:0];

assign zext_ln825_fu_150_p1 = trunc_ln825_fu_147_p1;

endmodule //sha256_verify
