-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sha256_verify_monProduct_512_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    opA : IN STD_LOGIC_VECTOR (511 downto 0);
    opB : IN STD_LOGIC_VECTOR (511 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (511 downto 0) );
end;


architecture behav of sha256_verify_monProduct_512_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv513_lc_8 : STD_LOGIC_VECTOR (512 downto 0) := "010000111010101011000011101110101111101110111000010100011000000101101010110110010011001101001000001011101111011111110010001111011110001010011110010011000110011100010011000010101001000111011010010011101101101100010010000010101011001111111010010110100100011000110011000010100100000101110111110011100010001010011011101010000110001101101010000100000101000001011000110100011101111010100110100111101000001011011000001100000110000000010011011001110100011101111110110011011101110010100010101101101111111100010111101011101";
    constant ap_const_lv512_lc_5 : STD_LOGIC_VECTOR (511 downto 0) := "01111000101010100111100010001010000010001000111101011100111111010010101001001101100110010110111110100010000100000001101110000100001110101100001101100111001100011101100111101010110111000100101101100010010010011101101111101010100110000000101101001011011100111001100111101011011111010001000001100011101110101100100010101111001110010010101111011111010111110100111001011100010000101011001011000010111110100100111110011111001111111101100100110001011100010000001001100100010001101011101010010010000000011101000010100011";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_Result_s_fu_40_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_reg_88 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_monProduct_512_Pipeline_MON_PRODUCT_MOD_fu_30_ap_start : STD_LOGIC;
    signal grp_monProduct_512_Pipeline_MON_PRODUCT_MOD_fu_30_ap_done : STD_LOGIC;
    signal grp_monProduct_512_Pipeline_MON_PRODUCT_MOD_fu_30_ap_idle : STD_LOGIC;
    signal grp_monProduct_512_Pipeline_MON_PRODUCT_MOD_fu_30_ap_ready : STD_LOGIC;
    signal grp_monProduct_512_Pipeline_MON_PRODUCT_MOD_fu_30_s_V_2_out : STD_LOGIC_VECTOR (512 downto 0);
    signal grp_monProduct_512_Pipeline_MON_PRODUCT_MOD_fu_30_s_V_2_out_ap_vld : STD_LOGIC;
    signal grp_monProduct_512_Pipeline_MON_PRODUCT_MOD_fu_30_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal trunc_ln887_fu_54_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal icmp_ln1081_fu_48_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln93_fu_58_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component sha256_verify_monProduct_512_Pipeline_MON_PRODUCT_MOD IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        opB : IN STD_LOGIC_VECTOR (511 downto 0);
        p_Result_s : IN STD_LOGIC_VECTOR (0 downto 0);
        opA : IN STD_LOGIC_VECTOR (511 downto 0);
        s_V_2_out : OUT STD_LOGIC_VECTOR (512 downto 0);
        s_V_2_out_ap_vld : OUT STD_LOGIC );
    end component;



begin
    grp_monProduct_512_Pipeline_MON_PRODUCT_MOD_fu_30 : component sha256_verify_monProduct_512_Pipeline_MON_PRODUCT_MOD
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_monProduct_512_Pipeline_MON_PRODUCT_MOD_fu_30_ap_start,
        ap_done => grp_monProduct_512_Pipeline_MON_PRODUCT_MOD_fu_30_ap_done,
        ap_idle => grp_monProduct_512_Pipeline_MON_PRODUCT_MOD_fu_30_ap_idle,
        ap_ready => grp_monProduct_512_Pipeline_MON_PRODUCT_MOD_fu_30_ap_ready,
        opB => opB,
        p_Result_s => p_Result_s_reg_88,
        opA => opA,
        s_V_2_out => grp_monProduct_512_Pipeline_MON_PRODUCT_MOD_fu_30_s_V_2_out,
        s_V_2_out_ap_vld => grp_monProduct_512_Pipeline_MON_PRODUCT_MOD_fu_30_s_V_2_out_ap_vld);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_monProduct_512_Pipeline_MON_PRODUCT_MOD_fu_30_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_monProduct_512_Pipeline_MON_PRODUCT_MOD_fu_30_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_monProduct_512_Pipeline_MON_PRODUCT_MOD_fu_30_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_monProduct_512_Pipeline_MON_PRODUCT_MOD_fu_30_ap_ready = ap_const_logic_1)) then 
                    grp_monProduct_512_Pipeline_MON_PRODUCT_MOD_fu_30_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                p_Result_s_reg_88 <= p_Result_s_fu_40_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_monProduct_512_Pipeline_MON_PRODUCT_MOD_fu_30_ap_done, ap_CS_fsm_state2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_monProduct_512_Pipeline_MON_PRODUCT_MOD_fu_30_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln93_fu_58_p2 <= std_logic_vector(unsigned(trunc_ln887_fu_54_p1) + unsigned(ap_const_lv512_lc_5));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(grp_monProduct_512_Pipeline_MON_PRODUCT_MOD_fu_30_ap_done)
    begin
        if ((grp_monProduct_512_Pipeline_MON_PRODUCT_MOD_fu_30_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= 
        add_ln93_fu_58_p2 when (icmp_ln1081_fu_48_p2(0) = '1') else 
        trunc_ln887_fu_54_p1;
    grp_monProduct_512_Pipeline_MON_PRODUCT_MOD_fu_30_ap_start <= grp_monProduct_512_Pipeline_MON_PRODUCT_MOD_fu_30_ap_start_reg;
    icmp_ln1081_fu_48_p2 <= "1" when (unsigned(grp_monProduct_512_Pipeline_MON_PRODUCT_MOD_fu_30_s_V_2_out) > unsigned(ap_const_lv513_lc_8)) else "0";
    p_Result_s_fu_40_p1 <= opA(1 - 1 downto 0);
    trunc_ln887_fu_54_p1 <= grp_monProduct_512_Pipeline_MON_PRODUCT_MOD_fu_30_s_V_2_out(512 - 1 downto 0);
end behav;
