-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sha256_verify is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    input_r_TDATA : IN STD_LOGIC_VECTOR (583 downto 0);
    input_r_TVALID : IN STD_LOGIC;
    input_r_TREADY : OUT STD_LOGIC;
    output_r_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    output_r_TVALID : OUT STD_LOGIC;
    output_r_TREADY : IN STD_LOGIC );
end;


architecture behav of sha256_verify is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "sha256_verify_sha256_verify,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu280-fsvh2892-2L-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.209211,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=31255,HLS_SYN_LUT=78031,HLS_VERSION=2022_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv512_lc_4 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv6_13 : STD_LOGIC_VECTOR (5 downto 0) := "010011";
    constant ap_const_lv20_1 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";

    signal ap_rst_n_inv : STD_LOGIC;
    signal output_r_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal reg_111 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_fu_139_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal hash_tdata_V_reg_233 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal lastPacket_tdata_V_reg_238 : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_productMod_512_s_fu_85_ap_return : STD_LOGIC_VECTOR (511 downto 0);
    signal processor_rMod_V_reg_243 : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_monProduct_512_s_fu_89_ap_return : STD_LOGIC_VECTOR (511 downto 0);
    signal P_V_reg_249 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ref_tmp_i_i_reg_260 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal p_Result_s_fu_182_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_reg_265 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_sha2561_ver_fu_79_ap_start : STD_LOGIC;
    signal grp_sha2561_ver_fu_79_ap_done : STD_LOGIC;
    signal grp_sha2561_ver_fu_79_ap_idle : STD_LOGIC;
    signal grp_sha2561_ver_fu_79_ap_ready : STD_LOGIC;
    signal grp_sha2561_ver_fu_79_input_r_TREADY : STD_LOGIC;
    signal grp_sha2561_ver_fu_79_ap_return_0 : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_sha2561_ver_fu_79_ap_return_1 : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_productMod_512_s_fu_85_ap_start : STD_LOGIC;
    signal grp_productMod_512_s_fu_85_ap_done : STD_LOGIC;
    signal grp_productMod_512_s_fu_85_ap_idle : STD_LOGIC;
    signal grp_productMod_512_s_fu_85_ap_ready : STD_LOGIC;
    signal grp_monProduct_512_s_fu_89_ap_start : STD_LOGIC;
    signal grp_monProduct_512_s_fu_89_ap_done : STD_LOGIC;
    signal grp_monProduct_512_s_fu_89_ap_idle : STD_LOGIC;
    signal grp_monProduct_512_s_fu_89_ap_ready : STD_LOGIC;
    signal grp_monProduct_512_s_fu_89_opA : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_monProduct_512_s_fu_89_opB : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_monProduct_512_s_fu_96_ap_start : STD_LOGIC;
    signal grp_monProduct_512_s_fu_96_ap_done : STD_LOGIC;
    signal grp_monProduct_512_s_fu_96_ap_idle : STD_LOGIC;
    signal grp_monProduct_512_s_fu_96_ap_ready : STD_LOGIC;
    signal grp_monProduct_512_s_fu_96_ap_return : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_sha2561_ver_fu_79_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_productMod_512_s_fu_85_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_NS_fsm_state2 : STD_LOGIC;
    signal grp_monProduct_512_s_fu_89_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_state3_on_subcall_done : BOOLEAN;
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_monProduct_512_s_fu_96_ap_start_reg : STD_LOGIC := '0';
    signal R_V_1_fu_64 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_block_state7_on_subcall_done : BOOLEAN;
    signal ap_block_state4_on_subcall_done : BOOLEAN;
    signal i_fu_68 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_3_fu_198_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln825_fu_147_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln825_fu_150_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal shl_ln825_fu_154_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_1_fu_160_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln825_1_fu_168_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln_fu_172_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal k_V_fu_208_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal regslice_both_output_r_U_apdone_blk : STD_LOGIC;
    signal ap_block_state9 : BOOLEAN;
    signal regslice_both_input_r_U_apdone_blk : STD_LOGIC;
    signal input_r_TDATA_int_regslice : STD_LOGIC_VECTOR (583 downto 0);
    signal input_r_TVALID_int_regslice : STD_LOGIC;
    signal input_r_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_input_r_U_ack_in : STD_LOGIC;
    signal output_r_TDATA_int_regslice : STD_LOGIC_VECTOR (7 downto 0);
    signal output_r_TVALID_int_regslice : STD_LOGIC;
    signal output_r_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_output_r_U_vld_out : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component sha256_verify_sha2561_ver IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r_TDATA : IN STD_LOGIC_VECTOR (583 downto 0);
        input_r_TVALID : IN STD_LOGIC;
        input_r_TREADY : OUT STD_LOGIC;
        ap_return_0 : OUT STD_LOGIC_VECTOR (511 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (511 downto 0) );
    end component;


    component sha256_verify_productMod_512_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_return : OUT STD_LOGIC_VECTOR (511 downto 0) );
    end component;


    component sha256_verify_monProduct_512_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        opA : IN STD_LOGIC_VECTOR (511 downto 0);
        opB : IN STD_LOGIC_VECTOR (511 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (511 downto 0) );
    end component;


    component sha256_verify_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    grp_sha2561_ver_fu_79 : component sha256_verify_sha2561_ver
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_sha2561_ver_fu_79_ap_start,
        ap_done => grp_sha2561_ver_fu_79_ap_done,
        ap_idle => grp_sha2561_ver_fu_79_ap_idle,
        ap_ready => grp_sha2561_ver_fu_79_ap_ready,
        input_r_TDATA => input_r_TDATA_int_regslice,
        input_r_TVALID => input_r_TVALID_int_regslice,
        input_r_TREADY => grp_sha2561_ver_fu_79_input_r_TREADY,
        ap_return_0 => grp_sha2561_ver_fu_79_ap_return_0,
        ap_return_1 => grp_sha2561_ver_fu_79_ap_return_1);

    grp_productMod_512_s_fu_85 : component sha256_verify_productMod_512_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_productMod_512_s_fu_85_ap_start,
        ap_done => grp_productMod_512_s_fu_85_ap_done,
        ap_idle => grp_productMod_512_s_fu_85_ap_idle,
        ap_ready => grp_productMod_512_s_fu_85_ap_ready,
        ap_return => grp_productMod_512_s_fu_85_ap_return);

    grp_monProduct_512_s_fu_89 : component sha256_verify_monProduct_512_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_monProduct_512_s_fu_89_ap_start,
        ap_done => grp_monProduct_512_s_fu_89_ap_done,
        ap_idle => grp_monProduct_512_s_fu_89_ap_idle,
        ap_ready => grp_monProduct_512_s_fu_89_ap_ready,
        opA => grp_monProduct_512_s_fu_89_opA,
        opB => grp_monProduct_512_s_fu_89_opB,
        ap_return => grp_monProduct_512_s_fu_89_ap_return);

    grp_monProduct_512_s_fu_96 : component sha256_verify_monProduct_512_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_monProduct_512_s_fu_96_ap_start,
        ap_done => grp_monProduct_512_s_fu_96_ap_done,
        ap_idle => grp_monProduct_512_s_fu_96_ap_idle,
        ap_ready => grp_monProduct_512_s_fu_96_ap_ready,
        opA => processor_rMod_V_reg_243,
        opB => ap_const_lv512_lc_4,
        ap_return => grp_monProduct_512_s_fu_96_ap_return);

    regslice_both_input_r_U : component sha256_verify_regslice_both
    generic map (
        DataWidth => 584)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_r_TDATA,
        vld_in => input_r_TVALID,
        ack_in => regslice_both_input_r_U_ack_in,
        data_out => input_r_TDATA_int_regslice,
        vld_out => input_r_TVALID_int_regslice,
        ack_out => input_r_TREADY_int_regslice,
        apdone_blk => regslice_both_input_r_U_apdone_blk);

    regslice_both_output_r_U : component sha256_verify_regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => output_r_TDATA_int_regslice,
        vld_in => output_r_TVALID_int_regslice,
        ack_in => output_r_TREADY_int_regslice,
        data_out => output_r_TDATA,
        vld_out => regslice_both_output_r_U_vld_out,
        ack_out => output_r_TREADY,
        apdone_blk => regslice_both_output_r_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_monProduct_512_s_fu_89_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_monProduct_512_s_fu_89_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_boolean_0 = ap_block_state3_on_subcall_done)) or ((tmp_fu_139_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((tmp_fu_139_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((p_Result_s_fu_182_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6) and (grp_monProduct_512_s_fu_89_ap_done = ap_const_logic_1)))) then 
                    grp_monProduct_512_s_fu_89_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_monProduct_512_s_fu_89_ap_ready = ap_const_logic_1)) then 
                    grp_monProduct_512_s_fu_89_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_monProduct_512_s_fu_96_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_monProduct_512_s_fu_96_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_boolean_0 = ap_block_state3_on_subcall_done))) then 
                    grp_monProduct_512_s_fu_96_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_monProduct_512_s_fu_96_ap_ready = ap_const_logic_1)) then 
                    grp_monProduct_512_s_fu_96_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_productMod_512_s_fu_85_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_productMod_512_s_fu_85_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_NS_fsm_state2) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_productMod_512_s_fu_85_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_productMod_512_s_fu_85_ap_ready = ap_const_logic_1)) then 
                    grp_productMod_512_s_fu_85_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_sha2561_ver_fu_79_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_sha2561_ver_fu_79_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    grp_sha2561_ver_fu_79_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sha2561_ver_fu_79_ap_ready = ap_const_logic_1)) then 
                    grp_sha2561_ver_fu_79_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    R_V_1_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4_on_subcall_done))) then 
                R_V_1_fu_64 <= grp_monProduct_512_s_fu_96_ap_return;
            elsif ((((p_Result_s_fu_182_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6) and (grp_monProduct_512_s_fu_89_ap_done = ap_const_logic_1)) or ((p_Result_s_reg_265 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_boolean_0 = ap_block_state7_on_subcall_done)))) then 
                R_V_1_fu_64 <= grp_monProduct_512_s_fu_89_ap_return;
            end if; 
        end if;
    end process;

    i_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                i_fu_68 <= ap_const_lv6_13;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_boolean_0 = ap_block_state7_on_subcall_done))) then 
                i_fu_68 <= i_3_fu_198_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                P_V_reg_249 <= grp_monProduct_512_s_fu_89_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                hash_tdata_V_reg_233 <= grp_sha2561_ver_fu_79_ap_return_0;
                lastPacket_tdata_V_reg_238 <= grp_sha2561_ver_fu_79_ap_return_1;
                processor_rMod_V_reg_243 <= grp_productMod_512_s_fu_85_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                p_Result_s_reg_265 <= p_Result_s_fu_182_p2;
                ref_tmp_i_i_reg_260 <= grp_monProduct_512_s_fu_89_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((tmp_fu_139_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((tmp_fu_139_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then
                reg_111 <= R_V_1_fu_64;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state5, tmp_fu_139_p3, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state6, grp_monProduct_512_s_fu_89_ap_done, ap_block_state3_on_subcall_done, ap_CS_fsm_state7, ap_block_state7_on_subcall_done, ap_block_state4_on_subcall_done, regslice_both_output_r_U_apdone_blk, output_r_TREADY_int_regslice)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_boolean_0 = ap_block_state3_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((tmp_fu_139_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_monProduct_512_s_fu_89_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_boolean_0 = ap_block_state7_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if ((not(((output_r_TREADY_int_regslice = ap_const_logic_0) or (grp_monProduct_512_s_fu_89_ap_done = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if ((not(((output_r_TREADY_int_regslice = ap_const_logic_0) or (regslice_both_output_r_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    and_ln_fu_172_p4 <= ((tmp_1_fu_160_p3 & ap_const_lv15_0) & trunc_ln825_1_fu_168_p1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_NS_fsm_state2 <= ap_NS_fsm(1);
    ap_ST_fsm_state1_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(ap_block_state3_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state3_on_subcall_done)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state4_blk_assign_proc : process(ap_block_state4_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state4_on_subcall_done)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state5_blk <= ap_const_logic_0;

    ap_ST_fsm_state6_blk_assign_proc : process(grp_monProduct_512_s_fu_89_ap_done)
    begin
        if ((grp_monProduct_512_s_fu_89_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state7_blk_assign_proc : process(ap_block_state7_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state7_on_subcall_done)) then 
            ap_ST_fsm_state7_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state7_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state8_blk_assign_proc : process(grp_monProduct_512_s_fu_89_ap_done, output_r_TREADY_int_regslice)
    begin
        if (((output_r_TREADY_int_regslice = ap_const_logic_0) or (grp_monProduct_512_s_fu_89_ap_done = ap_const_logic_0))) then 
            ap_ST_fsm_state8_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state8_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state9_blk_assign_proc : process(regslice_both_output_r_U_apdone_blk, output_r_TREADY_int_regslice)
    begin
        if (((output_r_TREADY_int_regslice = ap_const_logic_0) or (regslice_both_output_r_U_apdone_blk = ap_const_logic_1))) then 
            ap_ST_fsm_state9_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state9_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state3_on_subcall_done_assign_proc : process(grp_sha2561_ver_fu_79_ap_done, grp_productMod_512_s_fu_85_ap_done)
    begin
                ap_block_state3_on_subcall_done <= ((grp_productMod_512_s_fu_85_ap_done = ap_const_logic_0) or (grp_sha2561_ver_fu_79_ap_done = ap_const_logic_0));
    end process;


    ap_block_state4_on_subcall_done_assign_proc : process(grp_monProduct_512_s_fu_89_ap_done, grp_monProduct_512_s_fu_96_ap_done)
    begin
                ap_block_state4_on_subcall_done <= ((grp_monProduct_512_s_fu_96_ap_done = ap_const_logic_0) or (grp_monProduct_512_s_fu_89_ap_done = ap_const_logic_0));
    end process;


    ap_block_state7_on_subcall_done_assign_proc : process(p_Result_s_reg_265, grp_monProduct_512_s_fu_89_ap_done)
    begin
                ap_block_state7_on_subcall_done <= ((p_Result_s_reg_265 = ap_const_lv1_0) and (grp_monProduct_512_s_fu_89_ap_done = ap_const_logic_0));
    end process;


    ap_block_state9_assign_proc : process(regslice_both_output_r_U_apdone_blk, output_r_TREADY_int_regslice)
    begin
                ap_block_state9 <= ((output_r_TREADY_int_regslice = ap_const_logic_0) or (regslice_both_output_r_U_apdone_blk = ap_const_logic_1));
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    grp_monProduct_512_s_fu_89_ap_start <= grp_monProduct_512_s_fu_89_ap_start_reg;

    grp_monProduct_512_s_fu_89_opA_assign_proc : process(ap_CS_fsm_state8, reg_111, processor_rMod_V_reg_243, ap_CS_fsm_state4, ref_tmp_i_i_reg_260, ap_CS_fsm_state6, p_Result_s_reg_265, ap_CS_fsm_state7)
    begin
        if (((p_Result_s_reg_265 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            grp_monProduct_512_s_fu_89_opA <= ref_tmp_i_i_reg_260;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            grp_monProduct_512_s_fu_89_opA <= reg_111;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_monProduct_512_s_fu_89_opA <= processor_rMod_V_reg_243;
        else 
            grp_monProduct_512_s_fu_89_opA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_monProduct_512_s_fu_89_opB_assign_proc : process(ap_CS_fsm_state8, reg_111, lastPacket_tdata_V_reg_238, P_V_reg_249, ap_CS_fsm_state4, ap_CS_fsm_state6, p_Result_s_reg_265, ap_CS_fsm_state7)
    begin
        if (((p_Result_s_reg_265 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            grp_monProduct_512_s_fu_89_opB <= P_V_reg_249;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_monProduct_512_s_fu_89_opB <= ap_const_lv512_lc_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_monProduct_512_s_fu_89_opB <= reg_111;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_monProduct_512_s_fu_89_opB <= lastPacket_tdata_V_reg_238;
        else 
            grp_monProduct_512_s_fu_89_opB <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_monProduct_512_s_fu_96_ap_start <= grp_monProduct_512_s_fu_96_ap_start_reg;
    grp_productMod_512_s_fu_85_ap_start <= grp_productMod_512_s_fu_85_ap_start_reg;
    grp_sha2561_ver_fu_79_ap_start <= grp_sha2561_ver_fu_79_ap_start_reg;
    i_3_fu_198_p2 <= std_logic_vector(unsigned(i_fu_68) + unsigned(ap_const_lv6_3F));
    input_r_TREADY <= regslice_both_input_r_U_ack_in;

    input_r_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_state3, grp_sha2561_ver_fu_79_input_r_TREADY)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            input_r_TREADY_int_regslice <= grp_sha2561_ver_fu_79_input_r_TREADY;
        else 
            input_r_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    k_V_fu_208_p2 <= "1" when (hash_tdata_V_reg_233 = grp_monProduct_512_s_fu_89_ap_return) else "0";

    output_r_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9, output_r_TREADY_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            output_r_TDATA_blk_n <= output_r_TREADY_int_regslice;
        else 
            output_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    output_r_TDATA_int_regslice <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_V_fu_208_p2),8));
    output_r_TVALID <= regslice_both_output_r_U_vld_out;

    output_r_TVALID_int_regslice_assign_proc : process(ap_CS_fsm_state8, grp_monProduct_512_s_fu_89_ap_done, output_r_TREADY_int_regslice)
    begin
        if ((not(((output_r_TREADY_int_regslice = ap_const_logic_0) or (grp_monProduct_512_s_fu_89_ap_done = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            output_r_TVALID_int_regslice <= ap_const_logic_1;
        else 
            output_r_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_s_fu_182_p2 <= "1" when (and_ln_fu_172_p4 = ap_const_lv17_0) else "0";
    shl_ln825_fu_154_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv20_1),to_integer(unsigned('0' & zext_ln825_fu_150_p1(20-1 downto 0)))));
    tmp_1_fu_160_p3 <= shl_ln825_fu_154_p2(16 downto 16);
    tmp_fu_139_p3 <= i_fu_68(5 downto 5);
    trunc_ln825_1_fu_168_p1 <= shl_ln825_fu_154_p2(1 - 1 downto 0);
    trunc_ln825_fu_147_p1 <= i_fu_68(5 - 1 downto 0);
    zext_ln825_fu_150_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln825_fu_147_p1),20));
end behav;
