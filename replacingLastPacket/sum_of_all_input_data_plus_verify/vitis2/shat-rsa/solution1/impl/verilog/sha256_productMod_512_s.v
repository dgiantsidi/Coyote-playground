// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module sha256_productMod_512_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [511:0] ap_return;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_subdone;
wire   [0:0] tmp_49_fu_479_p3;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [511:0] trunc_ln150_fu_518_p1;
reg   [511:0] trunc_ln150_reg_2289;
wire    ap_block_pp0_stage1_11001;
wire   [8:0] trunc_ln825_fu_522_p1;
reg   [8:0] trunc_ln825_reg_2295;
wire   [512:0] tmp_V_3_fu_526_p2;
reg   [512:0] tmp_V_3_reg_2300;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
reg   [511:0] tmp_V_fu_458;
wire   [511:0] tmp_V_5_fu_2256_p3;
wire    ap_block_pp0_stage0_11001;
wire    ap_loop_init;
wire    ap_block_pp0_stage1;
reg   [9:0] i_fu_462;
wire   [9:0] i_11_fu_532_p2;
wire    ap_block_pp0_stage0;
wire   [512:0] tmp_V_1_fu_490_p3;
wire   [0:0] icmp_ln1077_fu_498_p2;
wire   [512:0] add_ln887_fu_504_p2;
wire   [512:0] tmp_V_2_fu_510_p3;
wire   [511:0] zext_ln825_fu_543_p1;
wire   [511:0] shl_ln825_fu_546_p2;
wire   [3:0] tmp_fu_552_p4;
wire   [0:0] tmp_50_fu_562_p3;
wire   [0:0] tmp_51_fu_570_p3;
wire   [0:0] tmp_52_fu_578_p3;
wire   [0:0] tmp_53_fu_586_p3;
wire   [3:0] tmp_s_fu_594_p4;
wire   [0:0] tmp_54_fu_604_p3;
wire   [0:0] tmp_55_fu_612_p3;
wire   [0:0] tmp_56_fu_620_p3;
wire   [0:0] tmp_57_fu_628_p3;
wire   [0:0] tmp_58_fu_636_p3;
wire   [3:0] tmp_59_fu_644_p4;
wire   [0:0] tmp_60_fu_654_p3;
wire   [2:0] tmp_61_fu_662_p4;
wire   [5:0] tmp_62_fu_672_p4;
wire   [0:0] tmp_63_fu_682_p3;
wire   [0:0] tmp_64_fu_690_p3;
wire   [0:0] tmp_65_fu_698_p3;
wire   [0:0] tmp_66_fu_706_p3;
wire   [0:0] tmp_67_fu_714_p3;
wire   [1:0] tmp_68_fu_722_p4;
wire   [1:0] tmp_69_fu_732_p4;
wire   [1:0] tmp_70_fu_742_p4;
wire   [0:0] tmp_71_fu_752_p3;
wire   [1:0] tmp_72_fu_760_p4;
wire   [4:0] tmp_73_fu_770_p4;
wire   [0:0] tmp_74_fu_780_p3;
wire   [0:0] tmp_75_fu_788_p3;
wire   [0:0] tmp_76_fu_796_p3;
wire   [1:0] tmp_77_fu_804_p4;
wire   [2:0] tmp_78_fu_814_p4;
wire   [0:0] tmp_79_fu_824_p3;
wire   [2:0] tmp_80_fu_832_p4;
wire   [0:0] tmp_81_fu_842_p3;
wire   [1:0] tmp_82_fu_850_p4;
wire   [1:0] tmp_83_fu_860_p4;
wire   [1:0] tmp_84_fu_870_p4;
wire   [2:0] tmp_85_fu_880_p4;
wire   [1:0] tmp_86_fu_890_p4;
wire   [2:0] tmp_87_fu_900_p4;
wire   [1:0] tmp_88_fu_910_p4;
wire   [3:0] tmp_89_fu_920_p4;
wire   [0:0] tmp_90_fu_930_p3;
wire   [0:0] tmp_91_fu_938_p3;
wire   [1:0] tmp_92_fu_946_p4;
wire   [2:0] tmp_93_fu_956_p4;
wire   [0:0] tmp_94_fu_966_p3;
wire   [0:0] tmp_95_fu_974_p3;
wire   [1:0] tmp_96_fu_982_p4;
wire   [1:0] tmp_97_fu_992_p4;
wire   [0:0] tmp_98_fu_1002_p3;
wire   [0:0] tmp_99_fu_1010_p3;
wire   [0:0] tmp_100_fu_1018_p3;
wire   [2:0] tmp_101_fu_1026_p4;
wire   [1:0] tmp_102_fu_1036_p4;
wire   [4:0] tmp_103_fu_1046_p4;
wire   [0:0] tmp_104_fu_1056_p3;
wire   [0:0] tmp_105_fu_1064_p3;
wire   [0:0] tmp_106_fu_1072_p3;
wire   [1:0] tmp_107_fu_1080_p4;
wire   [0:0] tmp_108_fu_1090_p3;
wire   [1:0] tmp_109_fu_1098_p4;
wire   [0:0] tmp_110_fu_1108_p3;
wire   [0:0] tmp_111_fu_1116_p3;
wire   [1:0] tmp_112_fu_1124_p4;
wire   [2:0] tmp_113_fu_1134_p4;
wire   [2:0] tmp_114_fu_1144_p4;
wire   [1:0] tmp_115_fu_1154_p4;
wire   [3:0] tmp_116_fu_1164_p4;
wire   [0:0] tmp_117_fu_1174_p3;
wire   [1:0] tmp_118_fu_1182_p4;
wire   [4:0] tmp_119_fu_1192_p4;
wire   [0:0] tmp_120_fu_1202_p3;
wire   [0:0] tmp_121_fu_1210_p3;
wire   [1:0] tmp_122_fu_1218_p4;
wire   [2:0] tmp_123_fu_1228_p4;
wire   [2:0] tmp_124_fu_1238_p4;
wire   [0:0] tmp_125_fu_1248_p3;
wire   [1:0] tmp_126_fu_1256_p4;
wire   [0:0] tmp_127_fu_1266_p3;
wire   [0:0] tmp_128_fu_1274_p3;
wire   [0:0] tmp_129_fu_1282_p3;
wire   [3:0] tmp_130_fu_1290_p4;
wire   [2:0] tmp_131_fu_1300_p4;
wire   [0:0] tmp_132_fu_1310_p3;
wire   [0:0] tmp_133_fu_1318_p3;
wire   [0:0] tmp_134_fu_1326_p3;
wire   [3:0] tmp_135_fu_1334_p4;
wire   [4:0] tmp_136_fu_1344_p4;
wire   [0:0] tmp_137_fu_1354_p3;
wire   [4:0] tmp_138_fu_1362_p4;
wire   [0:0] tmp_139_fu_1372_p3;
wire   [2:0] tmp_140_fu_1380_p4;
wire   [0:0] tmp_141_fu_1390_p3;
wire   [2:0] tmp_142_fu_1398_p4;
wire   [0:0] tmp_143_fu_1408_p3;
wire   [0:0] tmp_144_fu_1416_p3;
wire   [0:0] tmp_145_fu_1424_p3;
wire   [1:0] tmp_146_fu_1432_p4;
wire   [0:0] tmp_147_fu_1442_p3;
wire   [1:0] tmp_148_fu_1450_p4;
wire   [0:0] tmp_149_fu_1460_p3;
wire   [4:0] tmp_150_fu_1468_p4;
wire   [0:0] tmp_151_fu_1478_p3;
wire   [0:0] tmp_152_fu_1486_p3;
wire   [4:0] tmp_153_fu_1494_p4;
wire   [4:0] tmp_154_fu_1504_p4;
wire   [7:0] tmp_155_fu_1514_p4;
wire   [1:0] tmp_156_fu_1524_p4;
wire   [0:0] tmp_157_fu_1534_p3;
wire   [1:0] tmp_158_fu_1542_p4;
wire   [0:0] tmp_159_fu_1552_p3;
wire   [2:0] tmp_160_fu_1560_p4;
wire   [0:0] tmp_161_fu_1570_p3;
wire   [0:0] tmp_162_fu_1578_p3;
wire   [1:0] tmp_163_fu_1586_p4;
wire   [0:0] tmp_164_fu_1596_p3;
wire   [0:0] tmp_165_fu_1604_p3;
wire   [1:0] tmp_166_fu_1612_p4;
wire   [0:0] tmp_167_fu_1622_p3;
wire   [2:0] tmp_168_fu_1630_p4;
wire   [0:0] tmp_169_fu_1640_p3;
wire   [0:0] tmp_170_fu_1648_p3;
wire   [0:0] tmp_171_fu_1656_p3;
wire   [0:0] tmp_172_fu_1664_p3;
wire   [2:0] tmp_173_fu_1672_p4;
wire   [0:0] tmp_174_fu_1682_p3;
wire   [0:0] tmp_175_fu_1690_p3;
wire   [0:0] tmp_176_fu_1698_p3;
wire   [1:0] trunc_ln825_2_fu_1706_p1;
wire   [510:0] and_ln_fu_1710_p260;
wire   [0:0] icmp_ln1077_1_fu_2238_p2;
wire   [511:0] select_ln160_fu_2243_p3;
wire   [0:0] p_Result_s_fu_2232_p2;
wire   [511:0] tmp_V_4_fu_2251_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

sha256_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_exit_pp0_iter0_stage1) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_fu_462 <= 10'd511;
    end else if (((tmp_49_fu_479_p3 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        i_fu_462 <= i_11_fu_532_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            tmp_V_fu_458 <= 512'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            tmp_V_fu_458 <= tmp_V_5_fu_2256_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_49_fu_479_p3 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tmp_V_3_reg_2300 <= tmp_V_3_fu_526_p2;
        trunc_ln150_reg_2289 <= trunc_ln150_fu_518_p1;
        trunc_ln825_reg_2295 <= trunc_ln825_fu_522_p1;
    end
end

always @ (*) begin
    if (((tmp_49_fu_479_p3 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln887_fu_504_p2 = ($signed(tmp_V_1_fu_490_p3) + $signed(513'd19727594003333235269646697027623977721376384649763278145921010040966182744210154362434480689965903971878058203395059683927758924012310850395658867443880099));

assign and_ln_fu_1710_p260 = {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{tmp_fu_552_p4}, {3'd0}}, {tmp_50_fu_562_p3}}, {1'd0}}, {tmp_51_fu_570_p3}}, {1'd0}}, {tmp_52_fu_578_p3}}, {1'd0}}, {tmp_53_fu_586_p3}}, {2'd0}}, {tmp_s_fu_594_p4}}, {3'd0}}, {tmp_54_fu_604_p3}}, {3'd0}}, {tmp_55_fu_612_p3}}, {1'd0}}, {tmp_56_fu_620_p3}}, {5'd0}}, {tmp_57_fu_628_p3}}, {3'd0}}, {tmp_58_fu_636_p3}}, {3'd0}}, {tmp_59_fu_644_p4}}, {1'd0}}, {tmp_60_fu_654_p3}}, {1'd0}}, {tmp_61_fu_662_p4}}, {2'd0}}, {tmp_62_fu_672_p4}}, {1'd0}}, {tmp_63_fu_682_p3}}, {2'd0}}, {tmp_64_fu_690_p3}}, {1'd0}}, {tmp_65_fu_698_p3}}, {1'd0}}, {tmp_66_fu_706_p3}}, {2'd0}}, {tmp_67_fu_714_p3}}, {2'd0}}, {tmp_68_fu_722_p4}}, {1'd0}}, {tmp_69_fu_732_p4}}, {2'd0}}, {tmp_70_fu_742_p4}}, {2'd0}}, {tmp_71_fu_752_p3}}, {1'd0}}, {tmp_72_fu_760_p4}}, {1'd0}}, {tmp_73_fu_770_p4}}, {1'd0}}, {tmp_74_fu_780_p3}}, {3'd0}}, {tmp_75_fu_788_p3}}, {4'd0}}, {tmp_76_fu_796_p3}}, {7'd0}}, {tmp_77_fu_804_p4}}, {1'd0}}, {tmp_78_fu_814_p4}}, {4'd0}}, {tmp_79_fu_824_p3}}, {4'd0}}, {tmp_80_fu_832_p4}}, {1'd0}}, {tmp_81_fu_842_p3}}, {1'd0}}, {tmp_82_fu_850_p4}}, {4'd0}}, {tmp_83_fu_860_p4}}, {1'd0}}, {tmp_84_fu_870_p4}}, {2'd0}}, {tmp_85_fu_880_p4}}, {2'd0}}, {tmp_86_fu_890_p4}}, {3'd0}}, {tmp_87_fu_900_p4}}, {1'd0}}, {tmp_88_fu_910_p4}}, {2'd0}}, {tmp_89_fu_920_p4}}, {1'd0}}, {tmp_90_fu_930_p3}}, {1'd0}}, {tmp_91_fu_938_p3}}, {1'd0}}, {tmp_92_fu_946_p4}}, {1'd0}}, {tmp_93_fu_956_p4}}, {3'd0}}, {tmp_94_fu_966_p3}}, {2'd0}}, {tmp_95_fu_974_p3}}, {1'd0}}, {tmp_96_fu_982_p4}}, {1'd0}}, {tmp_97_fu_992_p4}}, {3'd0}}, {tmp_98_fu_1002_p3}}, {2'd0}}, {tmp_99_fu_1010_p3}}, {2'd0}}, {tmp_100_fu_1018_p3}}, {2'd0}}, {tmp_101_fu_1026_p4}}, {1'd0}}, {tmp_102_fu_1036_p4}}, {1'd0}}, {tmp_103_fu_1046_p4}}, {1'd0}}, {tmp_104_fu_1056_p3}}, {1'd0}}, {tmp_105_fu_1064_p3}}, {1'd0}}, {tmp_106_fu_1072_p3}}, {2'd0}}, {tmp_107_fu_1080_p4}}, {7'd0}}, {tmp_108_fu_1090_p3}}, {1'd0}}, {tmp_109_fu_1098_p4}}, {1'd0}}, {tmp_110_fu_1108_p3}}, {2'd0}}, {tmp_111_fu_1116_p3}}, {1'd0}}, {tmp_112_fu_1124_p4}}, {1'd0}}, {tmp_113_fu_1134_p4}}, {2'd0}}, {tmp_114_fu_1144_p4}}, {2'd0}}, {tmp_115_fu_1154_p4}}, {2'd0}}, {tmp_116_fu_1164_p4}}, {1'd0}}, {tmp_117_fu_1174_p3}}, {1'd0}}, {tmp_118_fu_1182_p4}}, {1'd0}}, {tmp_119_fu_1192_p4}}, {1'd0}}, {tmp_120_fu_1202_p3}}, {3'd0}}, {tmp_121_fu_1210_p3}}, {5'd0}}, {tmp_122_fu_1218_p4}}, {3'd0}}, {tmp_123_fu_1228_p4}}, {1'd0}}, {tmp_124_fu_1238_p4}}, {1'd0}}, {tmp_125_fu_1248_p3}}, {1'd0}}, {tmp_126_fu_1256_p4}}, {2'd0}}, {tmp_127_fu_1266_p3}}, {3'd0}}, {tmp_128_fu_1274_p3}}, {1'd0}}, {tmp_129_fu_1282_p3}}, {1'd0}}, {tmp_130_fu_1290_p4}}, {2'd0}}, {tmp_131_fu_1300_p4}}, {2'd0}}, {tmp_132_fu_1310_p3}}, {2'd0}}, {tmp_133_fu_1318_p3}}, {1'd0}}, {tmp_134_fu_1326_p3}}, {1'd0}}, {tmp_135_fu_1334_p4}}, {1'd0}}, {tmp_136_fu_1344_p4}}, {1'd0}}, {tmp_137_fu_1354_p3}}, {1'd0}}, {tmp_138_fu_1362_p4}}, {1'd0}}, {tmp_139_fu_1372_p3}}, {2'd0}}, {tmp_140_fu_1380_p4}}, {2'd0}}, {tmp_141_fu_1390_p3}}, {1'd0}}, {tmp_142_fu_1398_p4}}, {3'd0}}, {tmp_143_fu_1408_p3}}, {4'd0}}, {tmp_144_fu_1416_p3}}, {1'd0}}, {tmp_145_fu_1424_p3}}, {1'd0}}, {tmp_146_fu_1432_p4}}, {2'd0}}, {tmp_147_fu_1442_p3}}, {1'd0}}, {tmp_148_fu_1450_p4}}, {4'd0}}, {tmp_149_fu_1460_p3}}, {1'd0}}, {tmp_150_fu_1468_p4}}, {1'd0}}, {tmp_151_fu_1478_p3}}, {2'd0}}, {tmp_152_fu_1486_p3}}, {2'd0}}, {tmp_153_fu_1494_p4}}, {2'd0}}, {tmp_154_fu_1504_p4}}, {2'd0}}, {tmp_155_fu_1514_p4}}, {1'd0}}, {tmp_156_fu_1524_p4}}, {2'd0}}, {tmp_157_fu_1534_p3}}, {2'd0}}, {tmp_158_fu_1542_p4}}, {3'd0}}, {tmp_159_fu_1552_p3}}, {1'd0}}, {tmp_160_fu_1560_p4}}, {3'd0}}, {tmp_161_fu_1570_p3}}, {6'd0}}, {tmp_162_fu_1578_p3}}, {2'd0}}, {tmp_163_fu_1586_p4}}, {2'd0}}, {tmp_164_fu_1596_p3}}, {3'd0}}, {tmp_165_fu_1604_p3}}, {3'd0}}, {tmp_166_fu_1612_p4}}, {1'd0}}, {tmp_167_fu_1622_p3}}, {1'd0}}, {tmp_168_fu_1630_p4}}, {1'd0}}, {tmp_169_fu_1640_p3}}, {1'd0}}, {tmp_170_fu_1648_p3}}, {2'd0}}, {tmp_171_fu_1656_p3}}, {2'd0}}, {tmp_172_fu_1664_p3}}, {8'd0}}, {tmp_173_fu_1672_p4}}, {1'd0}}, {tmp_174_fu_1682_p3}}, {4'd0}}, {tmp_175_fu_1690_p3}}, {1'd0}}, {tmp_176_fu_1698_p3}}, {3'd0}}, {trunc_ln825_2_fu_1706_p1}};

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign ap_return = tmp_V_fu_458;

assign i_11_fu_532_p2 = ($signed(i_fu_462) + $signed(10'd1023));

assign icmp_ln1077_1_fu_2238_p2 = ((tmp_V_3_reg_2300 > 513'd7088021856551958929501352968787714533582346991421508609526112846477345315936939591169267906367902883502005512977912417779748841611582289497208430568288092) ? 1'b1 : 1'b0);

assign icmp_ln1077_fu_498_p2 = ((tmp_V_fu_458 > 512'd3544010928275979464750676484393857266791173495710754304763056423238672657968469795584633953183951441751002756488956208889874420805791144748604215284144046) ? 1'b1 : 1'b0);

assign p_Result_s_fu_2232_p2 = ((and_ln_fu_1710_p260 == 511'd0) ? 1'b1 : 1'b0);

assign select_ln160_fu_2243_p3 = ((icmp_ln1077_1_fu_2238_p2[0:0] == 1'b1) ? 512'd12639572146781276340145344058836263187794037658341769536394897194488837428273214771265212783598001088376052690417147266148010082400728560898450436875592006 : 512'd6319786073390638170072672029418131593897018829170884768197448597244418714136607385632606391799000544188026345208573633074005041200364280449225218437796003);

assign shl_ln825_fu_546_p2 = 512'd1 << zext_ln825_fu_543_p1;

assign tmp_100_fu_1018_p3 = shl_ln825_fu_546_p2[32'd307];

assign tmp_101_fu_1026_p4 = {{shl_ln825_fu_546_p2[304:302]}};

assign tmp_102_fu_1036_p4 = {{shl_ln825_fu_546_p2[300:299]}};

assign tmp_103_fu_1046_p4 = {{shl_ln825_fu_546_p2[297:293]}};

assign tmp_104_fu_1056_p3 = shl_ln825_fu_546_p2[32'd291];

assign tmp_105_fu_1064_p3 = shl_ln825_fu_546_p2[32'd289];

assign tmp_106_fu_1072_p3 = shl_ln825_fu_546_p2[32'd287];

assign tmp_107_fu_1080_p4 = {{shl_ln825_fu_546_p2[284:283]}};

assign tmp_108_fu_1090_p3 = shl_ln825_fu_546_p2[32'd275];

assign tmp_109_fu_1098_p4 = {{shl_ln825_fu_546_p2[273:272]}};

assign tmp_110_fu_1108_p3 = shl_ln825_fu_546_p2[32'd270];

assign tmp_111_fu_1116_p3 = shl_ln825_fu_546_p2[32'd267];

assign tmp_112_fu_1124_p4 = {{shl_ln825_fu_546_p2[265:264]}};

assign tmp_113_fu_1134_p4 = {{shl_ln825_fu_546_p2[262:260]}};

assign tmp_114_fu_1144_p4 = {{shl_ln825_fu_546_p2[257:255]}};

assign tmp_115_fu_1154_p4 = {{shl_ln825_fu_546_p2[252:251]}};

assign tmp_116_fu_1164_p4 = {{shl_ln825_fu_546_p2[248:245]}};

assign tmp_117_fu_1174_p3 = shl_ln825_fu_546_p2[32'd243];

assign tmp_118_fu_1182_p4 = {{shl_ln825_fu_546_p2[241:240]}};

assign tmp_119_fu_1192_p4 = {{shl_ln825_fu_546_p2[238:234]}};

assign tmp_120_fu_1202_p3 = shl_ln825_fu_546_p2[32'd232];

assign tmp_121_fu_1210_p3 = shl_ln825_fu_546_p2[32'd228];

assign tmp_122_fu_1218_p4 = {{shl_ln825_fu_546_p2[222:221]}};

assign tmp_123_fu_1228_p4 = {{shl_ln825_fu_546_p2[217:215]}};

assign tmp_124_fu_1238_p4 = {{shl_ln825_fu_546_p2[213:211]}};

assign tmp_125_fu_1248_p3 = shl_ln825_fu_546_p2[32'd209];

assign tmp_126_fu_1256_p4 = {{shl_ln825_fu_546_p2[207:206]}};

assign tmp_127_fu_1266_p3 = shl_ln825_fu_546_p2[32'd203];

assign tmp_128_fu_1274_p3 = shl_ln825_fu_546_p2[32'd199];

assign tmp_129_fu_1282_p3 = shl_ln825_fu_546_p2[32'd197];

assign tmp_130_fu_1290_p4 = {{shl_ln825_fu_546_p2[195:192]}};

assign tmp_131_fu_1300_p4 = {{shl_ln825_fu_546_p2[189:187]}};

assign tmp_132_fu_1310_p3 = shl_ln825_fu_546_p2[32'd184];

assign tmp_133_fu_1318_p3 = shl_ln825_fu_546_p2[32'd181];

assign tmp_134_fu_1326_p3 = shl_ln825_fu_546_p2[32'd179];

assign tmp_135_fu_1334_p4 = {{shl_ln825_fu_546_p2[177:174]}};

assign tmp_136_fu_1344_p4 = {{shl_ln825_fu_546_p2[172:168]}};

assign tmp_137_fu_1354_p3 = shl_ln825_fu_546_p2[32'd166];

assign tmp_138_fu_1362_p4 = {{shl_ln825_fu_546_p2[164:160]}};

assign tmp_139_fu_1372_p3 = shl_ln825_fu_546_p2[32'd158];

assign tmp_140_fu_1380_p4 = {{shl_ln825_fu_546_p2[155:153]}};

assign tmp_141_fu_1390_p3 = shl_ln825_fu_546_p2[32'd150];

assign tmp_142_fu_1398_p4 = {{shl_ln825_fu_546_p2[148:146]}};

assign tmp_143_fu_1408_p3 = shl_ln825_fu_546_p2[32'd142];

assign tmp_144_fu_1416_p3 = shl_ln825_fu_546_p2[32'd137];

assign tmp_145_fu_1424_p3 = shl_ln825_fu_546_p2[32'd135];

assign tmp_146_fu_1432_p4 = {{shl_ln825_fu_546_p2[133:132]}};

assign tmp_147_fu_1442_p3 = shl_ln825_fu_546_p2[32'd129];

assign tmp_148_fu_1450_p4 = {{shl_ln825_fu_546_p2[127:126]}};

assign tmp_149_fu_1460_p3 = shl_ln825_fu_546_p2[32'd121];

assign tmp_150_fu_1468_p4 = {{shl_ln825_fu_546_p2[119:115]}};

assign tmp_151_fu_1478_p3 = shl_ln825_fu_546_p2[32'd113];

assign tmp_152_fu_1486_p3 = shl_ln825_fu_546_p2[32'd110];

assign tmp_153_fu_1494_p4 = {{shl_ln825_fu_546_p2[107:103]}};

assign tmp_154_fu_1504_p4 = {{shl_ln825_fu_546_p2[100:96]}};

assign tmp_155_fu_1514_p4 = {{shl_ln825_fu_546_p2[93:86]}};

assign tmp_156_fu_1524_p4 = {{shl_ln825_fu_546_p2[84:83]}};

assign tmp_157_fu_1534_p3 = shl_ln825_fu_546_p2[32'd80];

assign tmp_158_fu_1542_p4 = {{shl_ln825_fu_546_p2[77:76]}};

assign tmp_159_fu_1552_p3 = shl_ln825_fu_546_p2[32'd72];

assign tmp_160_fu_1560_p4 = {{shl_ln825_fu_546_p2[70:68]}};

assign tmp_161_fu_1570_p3 = shl_ln825_fu_546_p2[32'd64];

assign tmp_162_fu_1578_p3 = shl_ln825_fu_546_p2[32'd57];

assign tmp_163_fu_1586_p4 = {{shl_ln825_fu_546_p2[54:53]}};

assign tmp_164_fu_1596_p3 = shl_ln825_fu_546_p2[32'd50];

assign tmp_165_fu_1604_p3 = shl_ln825_fu_546_p2[32'd46];

assign tmp_166_fu_1612_p4 = {{shl_ln825_fu_546_p2[42:41]}};

assign tmp_167_fu_1622_p3 = shl_ln825_fu_546_p2[32'd39];

assign tmp_168_fu_1630_p4 = {{shl_ln825_fu_546_p2[37:35]}};

assign tmp_169_fu_1640_p3 = shl_ln825_fu_546_p2[32'd33];

assign tmp_170_fu_1648_p3 = shl_ln825_fu_546_p2[32'd31];

assign tmp_171_fu_1656_p3 = shl_ln825_fu_546_p2[32'd28];

assign tmp_172_fu_1664_p3 = shl_ln825_fu_546_p2[32'd25];

assign tmp_173_fu_1672_p4 = {{shl_ln825_fu_546_p2[16:14]}};

assign tmp_174_fu_1682_p3 = shl_ln825_fu_546_p2[32'd12];

assign tmp_175_fu_1690_p3 = shl_ln825_fu_546_p2[32'd7];

assign tmp_176_fu_1698_p3 = shl_ln825_fu_546_p2[32'd5];

assign tmp_49_fu_479_p3 = i_fu_462[32'd9];

assign tmp_50_fu_562_p3 = shl_ln825_fu_546_p2[32'd503];

assign tmp_51_fu_570_p3 = shl_ln825_fu_546_p2[32'd501];

assign tmp_52_fu_578_p3 = shl_ln825_fu_546_p2[32'd499];

assign tmp_53_fu_586_p3 = shl_ln825_fu_546_p2[32'd497];

assign tmp_54_fu_604_p3 = shl_ln825_fu_546_p2[32'd487];

assign tmp_55_fu_612_p3 = shl_ln825_fu_546_p2[32'd483];

assign tmp_56_fu_620_p3 = shl_ln825_fu_546_p2[32'd481];

assign tmp_57_fu_628_p3 = shl_ln825_fu_546_p2[32'd475];

assign tmp_58_fu_636_p3 = shl_ln825_fu_546_p2[32'd471];

assign tmp_59_fu_644_p4 = {{shl_ln825_fu_546_p2[467:464]}};

assign tmp_60_fu_654_p3 = shl_ln825_fu_546_p2[32'd462];

assign tmp_61_fu_662_p4 = {{shl_ln825_fu_546_p2[460:458]}};

assign tmp_62_fu_672_p4 = {{shl_ln825_fu_546_p2[455:450]}};

assign tmp_63_fu_682_p3 = shl_ln825_fu_546_p2[32'd448];

assign tmp_64_fu_690_p3 = shl_ln825_fu_546_p2[32'd445];

assign tmp_65_fu_698_p3 = shl_ln825_fu_546_p2[32'd443];

assign tmp_66_fu_706_p3 = shl_ln825_fu_546_p2[32'd441];

assign tmp_67_fu_714_p3 = shl_ln825_fu_546_p2[32'd438];

assign tmp_68_fu_722_p4 = {{shl_ln825_fu_546_p2[435:434]}};

assign tmp_69_fu_732_p4 = {{shl_ln825_fu_546_p2[432:431]}};

assign tmp_70_fu_742_p4 = {{shl_ln825_fu_546_p2[428:427]}};

assign tmp_71_fu_752_p3 = shl_ln825_fu_546_p2[32'd424];

assign tmp_72_fu_760_p4 = {{shl_ln825_fu_546_p2[422:421]}};

assign tmp_73_fu_770_p4 = {{shl_ln825_fu_546_p2[419:415]}};

assign tmp_74_fu_780_p3 = shl_ln825_fu_546_p2[32'd413];

assign tmp_75_fu_788_p3 = shl_ln825_fu_546_p2[32'd409];

assign tmp_76_fu_796_p3 = shl_ln825_fu_546_p2[32'd404];

assign tmp_77_fu_804_p4 = {{shl_ln825_fu_546_p2[396:395]}};

assign tmp_78_fu_814_p4 = {{shl_ln825_fu_546_p2[393:391]}};

assign tmp_79_fu_824_p3 = shl_ln825_fu_546_p2[32'd386];

assign tmp_80_fu_832_p4 = {{shl_ln825_fu_546_p2[381:379]}};

assign tmp_81_fu_842_p3 = shl_ln825_fu_546_p2[32'd377];

assign tmp_82_fu_850_p4 = {{shl_ln825_fu_546_p2[375:374]}};

assign tmp_83_fu_860_p4 = {{shl_ln825_fu_546_p2[369:368]}};

assign tmp_84_fu_870_p4 = {{shl_ln825_fu_546_p2[366:365]}};

assign tmp_85_fu_880_p4 = {{shl_ln825_fu_546_p2[362:360]}};

assign tmp_86_fu_890_p4 = {{shl_ln825_fu_546_p2[357:356]}};

assign tmp_87_fu_900_p4 = {{shl_ln825_fu_546_p2[352:350]}};

assign tmp_88_fu_910_p4 = {{shl_ln825_fu_546_p2[348:347]}};

assign tmp_89_fu_920_p4 = {{shl_ln825_fu_546_p2[344:341]}};

assign tmp_90_fu_930_p3 = shl_ln825_fu_546_p2[32'd339];

assign tmp_91_fu_938_p3 = shl_ln825_fu_546_p2[32'd337];

assign tmp_92_fu_946_p4 = {{shl_ln825_fu_546_p2[335:334]}};

assign tmp_93_fu_956_p4 = {{shl_ln825_fu_546_p2[332:330]}};

assign tmp_94_fu_966_p3 = shl_ln825_fu_546_p2[32'd326];

assign tmp_95_fu_974_p3 = shl_ln825_fu_546_p2[32'd323];

assign tmp_96_fu_982_p4 = {{shl_ln825_fu_546_p2[321:320]}};

assign tmp_97_fu_992_p4 = {{shl_ln825_fu_546_p2[318:317]}};

assign tmp_98_fu_1002_p3 = shl_ln825_fu_546_p2[32'd313];

assign tmp_99_fu_1010_p3 = shl_ln825_fu_546_p2[32'd310];

assign tmp_V_1_fu_490_p3 = {{tmp_V_fu_458}, {1'd0}};

assign tmp_V_2_fu_510_p3 = ((icmp_ln1077_fu_498_p2[0:0] == 1'b1) ? add_ln887_fu_504_p2 : tmp_V_1_fu_490_p3);

assign tmp_V_3_fu_526_p2 = (tmp_V_2_fu_510_p3 + 513'd6319786073390638170072672029418131593897018829170884768197448597244418714136607385632606391799000544188026345208573633074005041200364280449225218437796003);

assign tmp_V_4_fu_2251_p2 = (trunc_ln150_reg_2289 + select_ln160_fu_2243_p3);

assign tmp_V_5_fu_2256_p3 = ((p_Result_s_fu_2232_p2[0:0] == 1'b1) ? trunc_ln150_reg_2289 : tmp_V_4_fu_2251_p2);

assign tmp_fu_552_p4 = {{shl_ln825_fu_546_p2[510:507]}};

assign tmp_s_fu_594_p4 = {{shl_ln825_fu_546_p2[494:491]}};

assign trunc_ln150_fu_518_p1 = tmp_V_2_fu_510_p3[511:0];

assign trunc_ln825_2_fu_1706_p1 = shl_ln825_fu_546_p2[1:0];

assign trunc_ln825_fu_522_p1 = i_fu_462[8:0];

assign zext_ln825_fu_543_p1 = trunc_ln825_reg_2295;

endmodule //sha256_productMod_512_s
