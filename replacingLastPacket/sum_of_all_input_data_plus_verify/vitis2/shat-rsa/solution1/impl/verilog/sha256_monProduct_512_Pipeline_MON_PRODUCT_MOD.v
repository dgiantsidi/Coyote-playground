// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module sha256_monProduct_512_Pipeline_MON_PRODUCT_MOD (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        opB,
        p_Result_s,
        opA,
        s_V_2_out,
        s_V_2_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [511:0] opB;
input  [0:0] p_Result_s;
input  [511:0] opA;
output  [512:0] s_V_2_out;
output   s_V_2_out_ap_vld;

reg ap_idle;
reg s_V_2_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln85_fu_96_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [512:0] p_Val2_s_fu_50;
wire    ap_loop_init;
wire    ap_block_pp0_stage0;
reg   [9:0] i_2_fu_54;
wire   [9:0] i_12_fu_102_p2;
wire    ap_block_pp0_stage0_01001;
wire   [31:0] i_2_cast_fu_115_p1;
wire   [0:0] p_Result_2_fu_119_p3;
wire   [0:0] trunc_ln1545_fu_131_p1;
wire   [0:0] ret_V_3_fu_126_p2;
wire   [511:0] addA_V_fu_141_p3;
wire   [0:0] ret_V_4_fu_135_p2;
wire   [512:0] select_ln1541_fu_152_p3;
wire   [512:0] zext_ln232_fu_148_p1;
wire   [512:0] ret_V_fu_160_p2;
wire   [513:0] s_V_4_cast_fu_111_p1;
wire   [513:0] zext_ln886_fu_166_p1;
wire   [513:0] s_V_fu_170_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

sha256_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_2_fu_54 <= 10'd0;
        end else if (((icmp_ln85_fu_96_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            i_2_fu_54 <= i_12_fu_102_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            p_Val2_s_fu_50 <= 513'd0;
        end else if (((icmp_ln85_fu_96_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            p_Val2_s_fu_50 <= {{s_V_fu_170_p2[513:1]}};
        end
    end
end

always @ (*) begin
    if (((icmp_ln85_fu_96_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln85_fu_96_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        s_V_2_out_ap_vld = 1'b1;
    end else begin
        s_V_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign addA_V_fu_141_p3 = ((p_Result_2_fu_119_p3[0:0] == 1'b1) ? opA : 512'd0);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign i_12_fu_102_p2 = (i_2_fu_54 + 10'd1);

assign i_2_cast_fu_115_p1 = i_2_fu_54;

assign icmp_ln85_fu_96_p2 = ((i_2_fu_54 == 10'd512) ? 1'b1 : 1'b0);

assign p_Result_2_fu_119_p3 = opB[i_2_cast_fu_115_p1];

assign ret_V_3_fu_126_p2 = (p_Result_s & p_Result_2_fu_119_p3);

assign ret_V_4_fu_135_p2 = (trunc_ln1545_fu_131_p1 ^ ret_V_3_fu_126_p2);

assign ret_V_fu_160_p2 = (select_ln1541_fu_152_p3 + zext_ln232_fu_148_p1);

assign s_V_2_out = p_Val2_s_fu_50;

assign s_V_4_cast_fu_111_p1 = p_Val2_s_fu_50;

assign s_V_fu_170_p2 = (s_V_4_cast_fu_111_p1 + zext_ln886_fu_166_p1);

assign select_ln1541_fu_152_p3 = ((ret_V_4_fu_135_p2[0:0] == 1'b1) ? 513'd7088021856551958929501352968787714533582346991421508609526112846477345315936939591169267906367902883502005512977912417779748841611582289497208430568288093 : 513'd0);

assign trunc_ln1545_fu_131_p1 = p_Val2_s_fu_50[0:0];

assign zext_ln232_fu_148_p1 = addA_V_fu_141_p3;

assign zext_ln886_fu_166_p1 = ret_V_fu_160_p2;

endmodule //sha256_monProduct_512_Pipeline_MON_PRODUCT_MOD
