// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module sha256_sha256_Pipeline_VITIS_LOOP_64_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        hash_tdata_V,
        signature_address0,
        signature_ce0,
        signature_we0,
        signature_d0
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [511:0] hash_tdata_V;
output  [5:0] signature_address0;
output   signature_ce0;
output   signature_we0;
output  [7:0] signature_d0;

reg ap_idle;
reg signature_ce0;
reg signature_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln64_fu_79_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [63:0] i_cast_fu_91_p1;
reg   [5:0] i_fu_48;
wire   [5:0] i_10_fu_85_p2;
wire    ap_loop_init;
reg   [5:0] ap_sig_allocacmp_i_9;
wire   [4:0] trunc_ln65_fu_96_p1;
wire   [4:0] add_ln65_2_fu_100_p2;
wire   [7:0] shl_ln65_1_fu_106_p3;
wire   [7:0] shl_ln_fu_120_p3;
wire   [7:0] add_ln65_3_fu_114_p2;
wire   [9:0] zext_ln714_fu_134_p1;
wire   [9:0] zext_ln714_1_fu_138_p1;
wire   [0:0] icmp_ln714_fu_128_p2;
wire   [9:0] sub_ln714_fu_152_p2;
wire   [9:0] sub_ln714_1_fu_164_p2;
reg   [511:0] tmp_fu_142_p4;
wire   [9:0] xor_ln714_fu_158_p2;
wire   [9:0] select_ln714_fu_170_p3;
wire   [9:0] select_ln714_2_fu_186_p3;
wire   [9:0] sub_ln714_2_fu_194_p2;
wire   [511:0] select_ln714_1_fu_178_p3;
wire   [511:0] zext_ln714_2_fu_200_p1;
wire   [511:0] zext_ln714_3_fu_204_p1;
wire   [511:0] lshr_ln714_fu_208_p2;
wire   [511:0] lshr_ln714_1_fu_214_p2;
wire   [511:0] p_Result_s_fu_220_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_done_reg = 1'b0;
end

sha256_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        if ((icmp_ln64_fu_79_p2 == 1'd0)) begin
            i_fu_48 <= i_10_fu_85_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_48 <= 6'd0;
        end
    end
end

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln64_fu_79_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_i_9 = 6'd0;
    end else begin
        ap_sig_allocacmp_i_9 = i_fu_48;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        signature_ce0 = 1'b1;
    end else begin
        signature_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln64_fu_79_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        signature_we0 = 1'b1;
    end else begin
        signature_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln65_2_fu_100_p2 = (trunc_ln65_fu_96_p1 + 5'd1);

assign add_ln65_3_fu_114_p2 = ($signed(shl_ln65_1_fu_106_p3) + $signed(8'd255));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign i_10_fu_85_p2 = (ap_sig_allocacmp_i_9 + 6'd1);

assign i_cast_fu_91_p1 = ap_sig_allocacmp_i_9;

assign icmp_ln64_fu_79_p2 = ((ap_sig_allocacmp_i_9 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln714_fu_128_p2 = ((shl_ln_fu_120_p3 > add_ln65_3_fu_114_p2) ? 1'b1 : 1'b0);

assign lshr_ln714_1_fu_214_p2 = 512'd13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095 >> zext_ln714_3_fu_204_p1;

assign lshr_ln714_fu_208_p2 = select_ln714_1_fu_178_p3 >> zext_ln714_2_fu_200_p1;

assign p_Result_s_fu_220_p2 = (lshr_ln714_fu_208_p2 & lshr_ln714_1_fu_214_p2);

assign select_ln714_1_fu_178_p3 = ((icmp_ln714_fu_128_p2[0:0] == 1'b1) ? tmp_fu_142_p4 : hash_tdata_V);

assign select_ln714_2_fu_186_p3 = ((icmp_ln714_fu_128_p2[0:0] == 1'b1) ? xor_ln714_fu_158_p2 : zext_ln714_fu_134_p1);

assign select_ln714_fu_170_p3 = ((icmp_ln714_fu_128_p2[0:0] == 1'b1) ? sub_ln714_fu_152_p2 : sub_ln714_1_fu_164_p2);

assign shl_ln65_1_fu_106_p3 = {{add_ln65_2_fu_100_p2}, {3'd0}};

assign shl_ln_fu_120_p3 = {{trunc_ln65_fu_96_p1}, {3'd0}};

assign signature_address0 = i_cast_fu_91_p1;

assign signature_d0 = p_Result_s_fu_220_p2[7:0];

assign sub_ln714_1_fu_164_p2 = (zext_ln714_1_fu_138_p1 - zext_ln714_fu_134_p1);

assign sub_ln714_2_fu_194_p2 = (10'd511 - select_ln714_fu_170_p3);

assign sub_ln714_fu_152_p2 = (zext_ln714_fu_134_p1 - zext_ln714_1_fu_138_p1);

integer ap_tvar_int_0;

always @ (hash_tdata_V) begin
    for (ap_tvar_int_0 = 512 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 511 - 0) begin
            tmp_fu_142_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_fu_142_p4[ap_tvar_int_0] = hash_tdata_V[511 - ap_tvar_int_0];
        end
    end
end

assign trunc_ln65_fu_96_p1 = ap_sig_allocacmp_i_9[4:0];

assign xor_ln714_fu_158_p2 = (zext_ln714_fu_134_p1 ^ 10'd511);

assign zext_ln714_1_fu_138_p1 = add_ln65_3_fu_114_p2;

assign zext_ln714_2_fu_200_p1 = select_ln714_2_fu_186_p3;

assign zext_ln714_3_fu_204_p1 = sub_ln714_2_fu_194_p2;

assign zext_ln714_fu_134_p1 = shl_ln_fu_120_p3;

endmodule //sha256_sha256_Pipeline_VITIS_LOOP_64_1
