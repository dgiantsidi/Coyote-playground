-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sha256_sha256_Pipeline_VITIS_LOOP_89_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    signature_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    signature_ce0 : OUT STD_LOGIC;
    signature_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    p_Val2_1_out : OUT STD_LOGIC_VECTOR (511 downto 0);
    p_Val2_1_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of sha256_sha256_Pipeline_VITIS_LOOP_89_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv512_lc_1 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";
    constant ap_const_lv10_1FF : STD_LOGIC_VECTOR (9 downto 0) := "0111111111";
    constant ap_const_lv32_1FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111111";
    constant ap_const_lv512_lc_2 : STD_LOGIC_VECTOR (511 downto 0) := "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln89_fu_91_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal trunc_ln90_fu_108_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln90_reg_310 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_8_cast_fu_103_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal p_Val2_s_fu_50 : STD_LOGIC_VECTOR (511 downto 0);
    signal p_Result_s_fu_272_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal i_fu_54 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_8_fu_97_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_allocacmp_i_7 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal add_ln90_1_fu_120_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln90_1_fu_125_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln3_fu_139_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln90_2_fu_133_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln388_fu_156_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln388_fu_150_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln388_1_fu_160_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal xor_ln388_fu_164_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln388_fu_170_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln388_2_fu_186_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln388_1_fu_178_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal xor_ln388_1_fu_194_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln257_fu_146_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal zext_ln388_2_fu_200_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal shl_ln388_fu_212_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal tmp_fu_218_p4 : STD_LOGIC_VECTOR (511 downto 0);
    signal zext_ln388_3_fu_204_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal zext_ln388_4_fu_208_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal shl_ln388_1_fu_236_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal lshr_ln388_fu_242_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal and_ln388_fu_248_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal xor_ln388_2_fu_254_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal select_ln388_3_fu_228_p3 : STD_LOGIC_VECTOR (511 downto 0);
    signal and_ln388_1_fu_260_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal and_ln388_2_fu_266_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component sha256_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component sha256_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    i_fu_54_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln89_fu_91_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_54 <= i_8_fu_97_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_54 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;

    p_Val2_s_fu_50_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    p_Val2_s_fu_50 <= ap_const_lv512_lc_1;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    p_Val2_s_fu_50 <= p_Result_s_fu_272_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln89_fu_91_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                trunc_ln90_reg_310 <= trunc_ln90_fu_108_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln90_1_fu_120_p2 <= std_logic_vector(unsigned(trunc_ln90_reg_310) + unsigned(ap_const_lv6_1));
    add_ln90_2_fu_133_p2 <= std_logic_vector(unsigned(shl_ln90_1_fu_125_p3) + unsigned(ap_const_lv9_1FF));
    and_ln388_1_fu_260_p2 <= (xor_ln388_2_fu_254_p2 and p_Val2_s_fu_50);
    and_ln388_2_fu_266_p2 <= (select_ln388_3_fu_228_p3 and and_ln388_fu_248_p2);
    and_ln388_fu_248_p2 <= (shl_ln388_1_fu_236_p2 and lshr_ln388_fu_242_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln89_fu_91_p2)
    begin
        if (((icmp_ln89_fu_91_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_7_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_fu_54)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_7 <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_i_7 <= i_fu_54;
        end if; 
    end process;

    i_8_cast_fu_103_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_7),64));
    i_8_fu_97_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_7) + unsigned(ap_const_lv7_1));
    icmp_ln388_fu_150_p2 <= "1" when (unsigned(shl_ln3_fu_139_p3) > unsigned(add_ln90_2_fu_133_p2)) else "0";
    icmp_ln89_fu_91_p2 <= "1" when (ap_sig_allocacmp_i_7 = ap_const_lv7_40) else "0";
    lshr_ln388_fu_242_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv512_lc_2),to_integer(unsigned('0' & zext_ln388_4_fu_208_p1(31-1 downto 0)))));
    p_Result_s_fu_272_p2 <= (and_ln388_2_fu_266_p2 or and_ln388_1_fu_260_p2);
    p_Val2_1_out <= p_Val2_s_fu_50;

    p_Val2_1_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln89_fu_91_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln89_fu_91_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_Val2_1_out_ap_vld <= ap_const_logic_1;
        else 
            p_Val2_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    select_ln388_1_fu_178_p3 <= 
        zext_ln388_1_fu_160_p1 when (icmp_ln388_fu_150_p2(0) = '1') else 
        zext_ln388_fu_156_p1;
    select_ln388_2_fu_186_p3 <= 
        xor_ln388_fu_164_p2 when (icmp_ln388_fu_150_p2(0) = '1') else 
        zext_ln388_fu_156_p1;
    select_ln388_3_fu_228_p3 <= 
        tmp_fu_218_p4 when (icmp_ln388_fu_150_p2(0) = '1') else 
        shl_ln388_fu_212_p2;
    select_ln388_fu_170_p3 <= 
        zext_ln388_fu_156_p1 when (icmp_ln388_fu_150_p2(0) = '1') else 
        zext_ln388_1_fu_160_p1;
    shl_ln388_1_fu_236_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv512_lc_2),to_integer(unsigned('0' & zext_ln388_3_fu_204_p1(31-1 downto 0)))));
    shl_ln388_fu_212_p2 <= std_logic_vector(shift_left(unsigned(zext_ln257_fu_146_p1),to_integer(unsigned('0' & zext_ln388_2_fu_200_p1(31-1 downto 0)))));
    shl_ln3_fu_139_p3 <= (trunc_ln90_reg_310 & ap_const_lv3_0);
    shl_ln90_1_fu_125_p3 <= (add_ln90_1_fu_120_p2 & ap_const_lv3_0);
    signature_address0 <= i_8_cast_fu_103_p1(6 - 1 downto 0);

    signature_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            signature_ce0 <= ap_const_logic_1;
        else 
            signature_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    
    tmp_fu_218_p4_proc : process(shl_ln388_fu_212_p2)
    variable vlo_cpy : STD_LOGIC_VECTOR(512+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(512+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(512 - 1 downto 0);
    variable tmp_fu_218_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(512 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(512 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(512 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(9 - 1 downto 0) := ap_const_lv32_1FF(9 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(9 - 1 downto 0) := ap_const_lv32_0(9 - 1 downto 0);
        v0_cpy := shl_ln388_fu_212_p2;
        if (vlo_cpy(9 - 1 downto 0) > vhi_cpy(9 - 1 downto 0)) then
            vhi_cpy(9-1 downto 0) := std_logic_vector(512-1-unsigned(ap_const_lv32_0(9-1 downto 0)));
            vlo_cpy(9-1 downto 0) := std_logic_vector(512-1-unsigned(ap_const_lv32_1FF(9-1 downto 0)));
            for tmp_fu_218_p4_i in 0 to 512-1 loop
                v0_cpy(tmp_fu_218_p4_i) := shl_ln388_fu_212_p2(512-1-tmp_fu_218_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(9-1 downto 0)))));

        section := (others=>'0');
        section(9-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(9-1 downto 0)) - unsigned(vlo_cpy(9-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(512-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_fu_218_p4 <= resvalue(512-1 downto 0);
    end process;

    trunc_ln90_fu_108_p1 <= ap_sig_allocacmp_i_7(6 - 1 downto 0);
    xor_ln388_1_fu_194_p2 <= (select_ln388_fu_170_p3 xor ap_const_lv10_1FF);
    xor_ln388_2_fu_254_p2 <= (ap_const_lv512_lc_2 xor and_ln388_fu_248_p2);
    xor_ln388_fu_164_p2 <= (zext_ln388_fu_156_p1 xor ap_const_lv10_1FF);
    zext_ln257_fu_146_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(signature_q0),512));
    zext_ln388_1_fu_160_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln90_2_fu_133_p2),10));
    zext_ln388_2_fu_200_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln388_2_fu_186_p3),512));
    zext_ln388_3_fu_204_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln388_1_fu_178_p3),512));
    zext_ln388_4_fu_208_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln388_1_fu_194_p2),512));
    zext_ln388_fu_156_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln3_fu_139_p3),10));
end behav;
