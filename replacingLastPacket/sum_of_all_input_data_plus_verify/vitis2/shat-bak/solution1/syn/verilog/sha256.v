// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="sha256_sha256,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu280-fsvh2892-2L-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.175000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=23473,HLS_SYN_LUT=125196,HLS_VERSION=2022_1}" *)

module sha256 (
        ap_clk,
        ap_rst_n,
        input_r_TDATA,
        input_r_TVALID,
        input_r_TREADY,
        output_r_TDATA,
        output_r_TVALID,
        output_r_TREADY
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst_n;
input  [583:0] input_r_TDATA;
input   input_r_TVALID;
output   input_r_TREADY;
output  [583:0] output_r_TDATA;
output   output_r_TVALID;
input   output_r_TREADY;

 reg    ap_rst_n_inv;
reg    output_r_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
reg   [511:0] hash_tdata_V_reg_149;
wire    ap_CS_fsm_state3;
reg   [5:0] buf_tid_V_reg_154;
wire   [583:0] zext_ln174_fu_138_p1;
reg   [5:0] signature_address0;
reg    signature_ce0;
reg    signature_we0;
reg   [7:0] signature_d0;
wire   [7:0] signature_q0;
wire    grp_sha2561_fu_69_ap_start;
wire    grp_sha2561_fu_69_ap_done;
wire    grp_sha2561_fu_69_ap_idle;
wire    grp_sha2561_fu_69_ap_ready;
wire    grp_sha2561_fu_69_input_r_TREADY;
wire   [583:0] grp_sha2561_fu_69_output_r_TDATA;
wire    grp_sha2561_fu_69_output_r_TVALID;
wire    grp_sha2561_fu_69_output_r_TREADY;
wire   [511:0] grp_sha2561_fu_69_ap_return_0;
wire   [5:0] grp_sha2561_fu_69_ap_return_1;
wire    grp_sha256_Pipeline_1_fu_77_ap_start;
wire    grp_sha256_Pipeline_1_fu_77_ap_done;
wire    grp_sha256_Pipeline_1_fu_77_ap_idle;
wire    grp_sha256_Pipeline_1_fu_77_ap_ready;
wire   [5:0] grp_sha256_Pipeline_1_fu_77_signature_address0;
wire    grp_sha256_Pipeline_1_fu_77_signature_ce0;
wire    grp_sha256_Pipeline_1_fu_77_signature_we0;
wire   [7:0] grp_sha256_Pipeline_1_fu_77_signature_d0;
wire    grp_sha256_Pipeline_VITIS_LOOP_64_1_fu_82_ap_start;
wire    grp_sha256_Pipeline_VITIS_LOOP_64_1_fu_82_ap_done;
wire    grp_sha256_Pipeline_VITIS_LOOP_64_1_fu_82_ap_idle;
wire    grp_sha256_Pipeline_VITIS_LOOP_64_1_fu_82_ap_ready;
wire   [5:0] grp_sha256_Pipeline_VITIS_LOOP_64_1_fu_82_signature_address0;
wire    grp_sha256_Pipeline_VITIS_LOOP_64_1_fu_82_signature_ce0;
wire    grp_sha256_Pipeline_VITIS_LOOP_64_1_fu_82_signature_we0;
wire   [7:0] grp_sha256_Pipeline_VITIS_LOOP_64_1_fu_82_signature_d0;
wire    grp_sha256_Pipeline_VITIS_LOOP_89_3_fu_88_ap_start;
wire    grp_sha256_Pipeline_VITIS_LOOP_89_3_fu_88_ap_done;
wire    grp_sha256_Pipeline_VITIS_LOOP_89_3_fu_88_ap_idle;
wire    grp_sha256_Pipeline_VITIS_LOOP_89_3_fu_88_ap_ready;
wire   [5:0] grp_sha256_Pipeline_VITIS_LOOP_89_3_fu_88_signature_address0;
wire    grp_sha256_Pipeline_VITIS_LOOP_89_3_fu_88_signature_ce0;
wire   [511:0] grp_sha256_Pipeline_VITIS_LOOP_89_3_fu_88_p_Val2_1_out;
wire    grp_sha256_Pipeline_VITIS_LOOP_89_3_fu_88_p_Val2_1_out_ap_vld;
reg    grp_sha2561_fu_69_ap_start_reg;
wire    ap_CS_fsm_state2;
reg    grp_sha256_Pipeline_1_fu_77_ap_start_reg;
reg    grp_sha256_Pipeline_VITIS_LOOP_64_1_fu_82_ap_start_reg;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
reg    grp_sha256_Pipeline_VITIS_LOOP_89_3_fu_88_ap_start_reg;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire   [581:0] shl_ln2_fu_105_p3;
wire   [581:0] or_ln174_fu_112_p2;
wire   [69:0] tmp_fu_118_p4;
wire   [582:0] zext_ln174_cast_fu_128_p4;
reg   [8:0] ap_NS_fsm;
wire    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_block_state3_on_subcall_done;
reg    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
reg    ap_ST_fsm_state7_blk;
reg    ap_ST_fsm_state8_blk;
reg    ap_ST_fsm_state9_blk;
wire    regslice_both_output_r_U_apdone_blk;
reg    ap_block_state9;
wire    regslice_both_input_r_U_apdone_blk;
wire   [583:0] input_r_TDATA_int_regslice;
wire    input_r_TVALID_int_regslice;
reg    input_r_TREADY_int_regslice;
wire    regslice_both_input_r_U_ack_in;
reg   [583:0] output_r_TDATA_int_regslice;
reg    output_r_TVALID_int_regslice;
wire    output_r_TREADY_int_regslice;
wire    regslice_both_output_r_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
#0 grp_sha2561_fu_69_ap_start_reg = 1'b0;
#0 grp_sha256_Pipeline_1_fu_77_ap_start_reg = 1'b0;
#0 grp_sha256_Pipeline_VITIS_LOOP_64_1_fu_82_ap_start_reg = 1'b0;
#0 grp_sha256_Pipeline_VITIS_LOOP_89_3_fu_88_ap_start_reg = 1'b0;
end

sha256_signature_RAM_AUTO_1R1W #(
    .DataWidth( 8 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
signature_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(signature_address0),
    .ce0(signature_ce0),
    .we0(signature_we0),
    .d0(signature_d0),
    .q0(signature_q0)
);

sha256_sha2561 grp_sha2561_fu_69(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_sha2561_fu_69_ap_start),
    .ap_done(grp_sha2561_fu_69_ap_done),
    .ap_idle(grp_sha2561_fu_69_ap_idle),
    .ap_ready(grp_sha2561_fu_69_ap_ready),
    .input_r_TDATA(input_r_TDATA_int_regslice),
    .input_r_TVALID(input_r_TVALID_int_regslice),
    .input_r_TREADY(grp_sha2561_fu_69_input_r_TREADY),
    .output_r_TDATA(grp_sha2561_fu_69_output_r_TDATA),
    .output_r_TVALID(grp_sha2561_fu_69_output_r_TVALID),
    .output_r_TREADY(grp_sha2561_fu_69_output_r_TREADY),
    .ap_return_0(grp_sha2561_fu_69_ap_return_0),
    .ap_return_1(grp_sha2561_fu_69_ap_return_1)
);

sha256_sha256_Pipeline_1 grp_sha256_Pipeline_1_fu_77(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_sha256_Pipeline_1_fu_77_ap_start),
    .ap_done(grp_sha256_Pipeline_1_fu_77_ap_done),
    .ap_idle(grp_sha256_Pipeline_1_fu_77_ap_idle),
    .ap_ready(grp_sha256_Pipeline_1_fu_77_ap_ready),
    .signature_address0(grp_sha256_Pipeline_1_fu_77_signature_address0),
    .signature_ce0(grp_sha256_Pipeline_1_fu_77_signature_ce0),
    .signature_we0(grp_sha256_Pipeline_1_fu_77_signature_we0),
    .signature_d0(grp_sha256_Pipeline_1_fu_77_signature_d0)
);

sha256_sha256_Pipeline_VITIS_LOOP_64_1 grp_sha256_Pipeline_VITIS_LOOP_64_1_fu_82(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_sha256_Pipeline_VITIS_LOOP_64_1_fu_82_ap_start),
    .ap_done(grp_sha256_Pipeline_VITIS_LOOP_64_1_fu_82_ap_done),
    .ap_idle(grp_sha256_Pipeline_VITIS_LOOP_64_1_fu_82_ap_idle),
    .ap_ready(grp_sha256_Pipeline_VITIS_LOOP_64_1_fu_82_ap_ready),
    .hash_tdata_V(hash_tdata_V_reg_149),
    .signature_address0(grp_sha256_Pipeline_VITIS_LOOP_64_1_fu_82_signature_address0),
    .signature_ce0(grp_sha256_Pipeline_VITIS_LOOP_64_1_fu_82_signature_ce0),
    .signature_we0(grp_sha256_Pipeline_VITIS_LOOP_64_1_fu_82_signature_we0),
    .signature_d0(grp_sha256_Pipeline_VITIS_LOOP_64_1_fu_82_signature_d0)
);

sha256_sha256_Pipeline_VITIS_LOOP_89_3 grp_sha256_Pipeline_VITIS_LOOP_89_3_fu_88(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_sha256_Pipeline_VITIS_LOOP_89_3_fu_88_ap_start),
    .ap_done(grp_sha256_Pipeline_VITIS_LOOP_89_3_fu_88_ap_done),
    .ap_idle(grp_sha256_Pipeline_VITIS_LOOP_89_3_fu_88_ap_idle),
    .ap_ready(grp_sha256_Pipeline_VITIS_LOOP_89_3_fu_88_ap_ready),
    .signature_address0(grp_sha256_Pipeline_VITIS_LOOP_89_3_fu_88_signature_address0),
    .signature_ce0(grp_sha256_Pipeline_VITIS_LOOP_89_3_fu_88_signature_ce0),
    .signature_q0(signature_q0),
    .p_Val2_1_out(grp_sha256_Pipeline_VITIS_LOOP_89_3_fu_88_p_Val2_1_out),
    .p_Val2_1_out_ap_vld(grp_sha256_Pipeline_VITIS_LOOP_89_3_fu_88_p_Val2_1_out_ap_vld)
);

sha256_regslice_both #(
    .DataWidth( 584 ))
regslice_both_input_r_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input_r_TDATA),
    .vld_in(input_r_TVALID),
    .ack_in(regslice_both_input_r_U_ack_in),
    .data_out(input_r_TDATA_int_regslice),
    .vld_out(input_r_TVALID_int_regslice),
    .ack_out(input_r_TREADY_int_regslice),
    .apdone_blk(regslice_both_input_r_U_apdone_blk)
);

sha256_regslice_both #(
    .DataWidth( 584 ))
regslice_both_output_r_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(output_r_TDATA_int_regslice),
    .vld_in(output_r_TVALID_int_regslice),
    .ack_in(output_r_TREADY_int_regslice),
    .data_out(output_r_TDATA),
    .vld_out(regslice_both_output_r_U_vld_out),
    .ack_out(output_r_TREADY),
    .apdone_blk(regslice_both_output_r_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_sha2561_fu_69_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            grp_sha2561_fu_69_ap_start_reg <= 1'b1;
        end else if ((grp_sha2561_fu_69_ap_ready == 1'b1)) begin
            grp_sha2561_fu_69_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_sha256_Pipeline_1_fu_77_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            grp_sha256_Pipeline_1_fu_77_ap_start_reg <= 1'b1;
        end else if ((grp_sha256_Pipeline_1_fu_77_ap_ready == 1'b1)) begin
            grp_sha256_Pipeline_1_fu_77_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_sha256_Pipeline_VITIS_LOOP_64_1_fu_82_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            grp_sha256_Pipeline_VITIS_LOOP_64_1_fu_82_ap_start_reg <= 1'b1;
        end else if ((grp_sha256_Pipeline_VITIS_LOOP_64_1_fu_82_ap_ready == 1'b1)) begin
            grp_sha256_Pipeline_VITIS_LOOP_64_1_fu_82_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_sha256_Pipeline_VITIS_LOOP_89_3_fu_88_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state6)) begin
            grp_sha256_Pipeline_VITIS_LOOP_89_3_fu_88_ap_start_reg <= 1'b1;
        end else if ((grp_sha256_Pipeline_VITIS_LOOP_89_3_fu_88_ap_ready == 1'b1)) begin
            grp_sha256_Pipeline_VITIS_LOOP_89_3_fu_88_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        buf_tid_V_reg_154 <= grp_sha2561_fu_69_ap_return_1;
        hash_tdata_V_reg_149 <= grp_sha2561_fu_69_ap_return_0;
    end
end

assign ap_ST_fsm_state1_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state3_on_subcall_done)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((grp_sha256_Pipeline_VITIS_LOOP_64_1_fu_82_ap_done == 1'b0)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

assign ap_ST_fsm_state6_blk = 1'b0;

always @ (*) begin
    if ((grp_sha256_Pipeline_VITIS_LOOP_89_3_fu_88_ap_done == 1'b0)) begin
        ap_ST_fsm_state7_blk = 1'b1;
    end else begin
        ap_ST_fsm_state7_blk = 1'b0;
    end
end

always @ (*) begin
    if ((output_r_TREADY_int_regslice == 1'b0)) begin
        ap_ST_fsm_state8_blk = 1'b1;
    end else begin
        ap_ST_fsm_state8_blk = 1'b0;
    end
end

always @ (*) begin
    if (((output_r_TREADY_int_regslice == 1'b0) | (regslice_both_output_r_U_apdone_blk == 1'b1))) begin
        ap_ST_fsm_state9_blk = 1'b1;
    end else begin
        ap_ST_fsm_state9_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        input_r_TREADY_int_regslice = grp_sha2561_fu_69_input_r_TREADY;
    end else begin
        input_r_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8))) begin
        output_r_TDATA_blk_n = output_r_TREADY_int_regslice;
    end else begin
        output_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((output_r_TREADY_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
        output_r_TDATA_int_regslice = zext_ln174_fu_138_p1;
    end else if (((grp_sha2561_fu_69_output_r_TVALID == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        output_r_TDATA_int_regslice = grp_sha2561_fu_69_output_r_TDATA;
    end else begin
        output_r_TDATA_int_regslice = 'bx;
    end
end

always @ (*) begin
    if (((output_r_TREADY_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
        output_r_TVALID_int_regslice = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        output_r_TVALID_int_regslice = grp_sha2561_fu_69_output_r_TVALID;
    end else begin
        output_r_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        signature_address0 = grp_sha256_Pipeline_VITIS_LOOP_89_3_fu_88_signature_address0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        signature_address0 = grp_sha256_Pipeline_VITIS_LOOP_64_1_fu_82_signature_address0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        signature_address0 = grp_sha256_Pipeline_1_fu_77_signature_address0;
    end else begin
        signature_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        signature_ce0 = grp_sha256_Pipeline_VITIS_LOOP_89_3_fu_88_signature_ce0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        signature_ce0 = grp_sha256_Pipeline_VITIS_LOOP_64_1_fu_82_signature_ce0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        signature_ce0 = grp_sha256_Pipeline_1_fu_77_signature_ce0;
    end else begin
        signature_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        signature_d0 = grp_sha256_Pipeline_VITIS_LOOP_64_1_fu_82_signature_d0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        signature_d0 = grp_sha256_Pipeline_1_fu_77_signature_d0;
    end else begin
        signature_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        signature_we0 = grp_sha256_Pipeline_VITIS_LOOP_64_1_fu_82_signature_we0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        signature_we0 = grp_sha256_Pipeline_1_fu_77_signature_we0;
    end else begin
        signature_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b0 == ap_block_state3_on_subcall_done) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((grp_sha256_Pipeline_VITIS_LOOP_64_1_fu_82_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((grp_sha256_Pipeline_VITIS_LOOP_89_3_fu_88_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((output_r_TREADY_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if ((~((output_r_TREADY_int_regslice == 1'b0) | (regslice_both_output_r_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state3_on_subcall_done = ((grp_sha256_Pipeline_1_fu_77_ap_done == 1'b0) | (grp_sha2561_fu_69_ap_done == 1'b0));
end

always @ (*) begin
    ap_block_state9 = ((output_r_TREADY_int_regslice == 1'b0) | (regslice_both_output_r_U_apdone_blk == 1'b1));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_sha2561_fu_69_ap_start = grp_sha2561_fu_69_ap_start_reg;

assign grp_sha2561_fu_69_output_r_TREADY = (output_r_TREADY_int_regslice & ap_CS_fsm_state3);

assign grp_sha256_Pipeline_1_fu_77_ap_start = grp_sha256_Pipeline_1_fu_77_ap_start_reg;

assign grp_sha256_Pipeline_VITIS_LOOP_64_1_fu_82_ap_start = grp_sha256_Pipeline_VITIS_LOOP_64_1_fu_82_ap_start_reg;

assign grp_sha256_Pipeline_VITIS_LOOP_89_3_fu_88_ap_start = grp_sha256_Pipeline_VITIS_LOOP_89_3_fu_88_ap_start_reg;

assign input_r_TREADY = regslice_both_input_r_U_ack_in;

assign or_ln174_fu_112_p2 = (shl_ln2_fu_105_p3 | 582'd247330401473104534047094713089704592935557324103005993786583690272304831728808305726594637031169498012795797127849235911661333176120265159113792272289946597970173123142615040);

assign output_r_TVALID = regslice_both_output_r_U_vld_out;

assign shl_ln2_fu_105_p3 = {{buf_tid_V_reg_154}, {576'd0}};

assign tmp_fu_118_p4 = {{or_ln174_fu_112_p2[581:512]}};

assign zext_ln174_cast_fu_128_p4 = {{{{1'd1}, {tmp_fu_118_p4}}}, {grp_sha256_Pipeline_VITIS_LOOP_89_3_fu_88_p_Val2_1_out}};

assign zext_ln174_fu_138_p1 = zext_ln174_cast_fu_128_p4;

endmodule //sha256
