// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module sha256_sha2561_Pipeline_VITIS_LOOP_90_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        conv73_reload,
        conv71_reload,
        conv69_reload,
        conv67_reload,
        conv65_reload,
        conv63_reload,
        conv61_reload,
        conv59_reload,
        conv57_reload,
        conv55_reload,
        conv53_reload,
        conv51_reload,
        conv49_reload,
        conv47_reload,
        conv45_reload,
        conv43_reload,
        conv41_reload,
        conv39_reload,
        conv37_reload,
        conv35_reload,
        conv33_reload,
        conv31_reload,
        conv29_reload,
        conv27_reload,
        conv25_reload,
        conv23_reload,
        conv21_reload,
        conv19_reload,
        conv17_reload,
        conv15_reload,
        conv13_reload,
        conv11_reload,
        seg_buf_96_reload,
        seg_buf_97_reload,
        seg_buf_98_reload,
        seg_buf_99_reload,
        seg_buf_100_reload,
        seg_buf_101_reload,
        seg_buf_102_reload,
        seg_buf_103_reload,
        seg_buf_104_reload,
        seg_buf_105_reload,
        seg_buf_106_reload,
        seg_buf_107_reload,
        seg_buf_108_reload,
        seg_buf_109_reload,
        seg_buf_110_reload,
        seg_buf_111_reload,
        seg_buf_112_reload,
        seg_buf_113_reload,
        seg_buf_114_reload,
        seg_buf_115_reload,
        seg_buf_116_reload,
        seg_buf_117_reload,
        seg_buf_118_reload,
        seg_buf_119_reload,
        seg_buf_120_reload,
        seg_buf_121_reload,
        seg_buf_122_reload,
        seg_buf_123_reload,
        seg_buf_124_reload,
        seg_buf_125_reload,
        seg_buf_126_reload,
        seg_buf_127_reload,
        sha256ctx_data_address0,
        sha256ctx_data_ce0,
        sha256ctx_data_we0,
        sha256ctx_data_d0,
        sha256ctx_data_q0,
        sha256ctx_data_address1,
        sha256ctx_data_ce1,
        sha256ctx_data_q1,
        sha256ctx_state_5_1_out_i,
        sha256ctx_state_5_1_out_o,
        sha256ctx_state_5_1_out_o_ap_vld,
        sha256ctx_state_4_1_out_i,
        sha256ctx_state_4_1_out_o,
        sha256ctx_state_4_1_out_o_ap_vld,
        sha256ctx_state_3_1_out_i,
        sha256ctx_state_3_1_out_o,
        sha256ctx_state_3_1_out_o_ap_vld,
        sha256ctx_state_2_1_out_i,
        sha256ctx_state_2_1_out_o,
        sha256ctx_state_2_1_out_o_ap_vld,
        sha256ctx_state_1_1_out_i,
        sha256ctx_state_1_1_out_o,
        sha256ctx_state_1_1_out_o_ap_vld,
        sha256ctx_state_0_1_out_i,
        sha256ctx_state_0_1_out_o,
        sha256ctx_state_0_1_out_o_ap_vld,
        sha256ctx_state_6_1_out_i,
        sha256ctx_state_6_1_out_o,
        sha256ctx_state_6_1_out_o_ap_vld,
        sha256ctx_state_7_1_out_i,
        sha256ctx_state_7_1_out_o,
        sha256ctx_state_7_1_out_o_ap_vld,
        p_out_i,
        p_out_o,
        p_out_o_ap_vld,
        p_out1_i,
        p_out1_o,
        p_out1_o_ap_vld,
        p_out2_i,
        p_out2_o,
        p_out2_o_ap_vld
);

parameter    ap_ST_fsm_state1 = 52'd1;
parameter    ap_ST_fsm_state2 = 52'd2;
parameter    ap_ST_fsm_state3 = 52'd4;
parameter    ap_ST_fsm_state4 = 52'd8;
parameter    ap_ST_fsm_state5 = 52'd16;
parameter    ap_ST_fsm_state6 = 52'd32;
parameter    ap_ST_fsm_state7 = 52'd64;
parameter    ap_ST_fsm_state8 = 52'd128;
parameter    ap_ST_fsm_state9 = 52'd256;
parameter    ap_ST_fsm_state10 = 52'd512;
parameter    ap_ST_fsm_state11 = 52'd1024;
parameter    ap_ST_fsm_state12 = 52'd2048;
parameter    ap_ST_fsm_state13 = 52'd4096;
parameter    ap_ST_fsm_state14 = 52'd8192;
parameter    ap_ST_fsm_state15 = 52'd16384;
parameter    ap_ST_fsm_state16 = 52'd32768;
parameter    ap_ST_fsm_state17 = 52'd65536;
parameter    ap_ST_fsm_state18 = 52'd131072;
parameter    ap_ST_fsm_state19 = 52'd262144;
parameter    ap_ST_fsm_state20 = 52'd524288;
parameter    ap_ST_fsm_state21 = 52'd1048576;
parameter    ap_ST_fsm_state22 = 52'd2097152;
parameter    ap_ST_fsm_state23 = 52'd4194304;
parameter    ap_ST_fsm_state24 = 52'd8388608;
parameter    ap_ST_fsm_state25 = 52'd16777216;
parameter    ap_ST_fsm_state26 = 52'd33554432;
parameter    ap_ST_fsm_state27 = 52'd67108864;
parameter    ap_ST_fsm_state28 = 52'd134217728;
parameter    ap_ST_fsm_state29 = 52'd268435456;
parameter    ap_ST_fsm_state30 = 52'd536870912;
parameter    ap_ST_fsm_state31 = 52'd1073741824;
parameter    ap_ST_fsm_state32 = 52'd2147483648;
parameter    ap_ST_fsm_state33 = 52'd4294967296;
parameter    ap_ST_fsm_state34 = 52'd8589934592;
parameter    ap_ST_fsm_state35 = 52'd17179869184;
parameter    ap_ST_fsm_state36 = 52'd34359738368;
parameter    ap_ST_fsm_state37 = 52'd68719476736;
parameter    ap_ST_fsm_state38 = 52'd137438953472;
parameter    ap_ST_fsm_state39 = 52'd274877906944;
parameter    ap_ST_fsm_state40 = 52'd549755813888;
parameter    ap_ST_fsm_state41 = 52'd1099511627776;
parameter    ap_ST_fsm_state42 = 52'd2199023255552;
parameter    ap_ST_fsm_state43 = 52'd4398046511104;
parameter    ap_ST_fsm_state44 = 52'd8796093022208;
parameter    ap_ST_fsm_state45 = 52'd17592186044416;
parameter    ap_ST_fsm_state46 = 52'd35184372088832;
parameter    ap_ST_fsm_state47 = 52'd70368744177664;
parameter    ap_ST_fsm_state48 = 52'd140737488355328;
parameter    ap_ST_fsm_state49 = 52'd281474976710656;
parameter    ap_ST_fsm_state50 = 52'd562949953421312;
parameter    ap_ST_fsm_state51 = 52'd1125899906842624;
parameter    ap_ST_fsm_state52 = 52'd2251799813685248;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] conv73_reload;
input  [7:0] conv71_reload;
input  [7:0] conv69_reload;
input  [7:0] conv67_reload;
input  [7:0] conv65_reload;
input  [7:0] conv63_reload;
input  [7:0] conv61_reload;
input  [7:0] conv59_reload;
input  [7:0] conv57_reload;
input  [7:0] conv55_reload;
input  [7:0] conv53_reload;
input  [7:0] conv51_reload;
input  [7:0] conv49_reload;
input  [7:0] conv47_reload;
input  [7:0] conv45_reload;
input  [7:0] conv43_reload;
input  [7:0] conv41_reload;
input  [7:0] conv39_reload;
input  [7:0] conv37_reload;
input  [7:0] conv35_reload;
input  [7:0] conv33_reload;
input  [7:0] conv31_reload;
input  [7:0] conv29_reload;
input  [7:0] conv27_reload;
input  [7:0] conv25_reload;
input  [7:0] conv23_reload;
input  [7:0] conv21_reload;
input  [7:0] conv19_reload;
input  [7:0] conv17_reload;
input  [7:0] conv15_reload;
input  [7:0] conv13_reload;
input  [7:0] conv11_reload;
input  [7:0] seg_buf_96_reload;
input  [7:0] seg_buf_97_reload;
input  [7:0] seg_buf_98_reload;
input  [7:0] seg_buf_99_reload;
input  [7:0] seg_buf_100_reload;
input  [7:0] seg_buf_101_reload;
input  [7:0] seg_buf_102_reload;
input  [7:0] seg_buf_103_reload;
input  [7:0] seg_buf_104_reload;
input  [7:0] seg_buf_105_reload;
input  [7:0] seg_buf_106_reload;
input  [7:0] seg_buf_107_reload;
input  [7:0] seg_buf_108_reload;
input  [7:0] seg_buf_109_reload;
input  [7:0] seg_buf_110_reload;
input  [7:0] seg_buf_111_reload;
input  [7:0] seg_buf_112_reload;
input  [7:0] seg_buf_113_reload;
input  [7:0] seg_buf_114_reload;
input  [7:0] seg_buf_115_reload;
input  [7:0] seg_buf_116_reload;
input  [7:0] seg_buf_117_reload;
input  [7:0] seg_buf_118_reload;
input  [7:0] seg_buf_119_reload;
input  [7:0] seg_buf_120_reload;
input  [7:0] seg_buf_121_reload;
input  [7:0] seg_buf_122_reload;
input  [7:0] seg_buf_123_reload;
input  [7:0] seg_buf_124_reload;
input  [7:0] seg_buf_125_reload;
input  [7:0] seg_buf_126_reload;
input  [7:0] seg_buf_127_reload;
output  [5:0] sha256ctx_data_address0;
output   sha256ctx_data_ce0;
output   sha256ctx_data_we0;
output  [7:0] sha256ctx_data_d0;
input  [7:0] sha256ctx_data_q0;
output  [5:0] sha256ctx_data_address1;
output   sha256ctx_data_ce1;
input  [7:0] sha256ctx_data_q1;
input  [31:0] sha256ctx_state_5_1_out_i;
output  [31:0] sha256ctx_state_5_1_out_o;
output   sha256ctx_state_5_1_out_o_ap_vld;
input  [31:0] sha256ctx_state_4_1_out_i;
output  [31:0] sha256ctx_state_4_1_out_o;
output   sha256ctx_state_4_1_out_o_ap_vld;
input  [31:0] sha256ctx_state_3_1_out_i;
output  [31:0] sha256ctx_state_3_1_out_o;
output   sha256ctx_state_3_1_out_o_ap_vld;
input  [31:0] sha256ctx_state_2_1_out_i;
output  [31:0] sha256ctx_state_2_1_out_o;
output   sha256ctx_state_2_1_out_o_ap_vld;
input  [31:0] sha256ctx_state_1_1_out_i;
output  [31:0] sha256ctx_state_1_1_out_o;
output   sha256ctx_state_1_1_out_o_ap_vld;
input  [31:0] sha256ctx_state_0_1_out_i;
output  [31:0] sha256ctx_state_0_1_out_o;
output   sha256ctx_state_0_1_out_o_ap_vld;
input  [31:0] sha256ctx_state_6_1_out_i;
output  [31:0] sha256ctx_state_6_1_out_o;
output   sha256ctx_state_6_1_out_o_ap_vld;
input  [31:0] sha256ctx_state_7_1_out_i;
output  [31:0] sha256ctx_state_7_1_out_o;
output   sha256ctx_state_7_1_out_o_ap_vld;
input  [31:0] p_out_i;
output  [31:0] p_out_o;
output   p_out_o_ap_vld;
input  [31:0] p_out1_i;
output  [31:0] p_out1_o;
output   p_out1_o_ap_vld;
input  [31:0] p_out2_i;
output  [31:0] p_out2_o;
output   p_out2_o_ap_vld;

reg ap_idle;
reg[5:0] sha256ctx_data_address0;
reg sha256ctx_data_ce0;
reg sha256ctx_data_we0;
reg sha256ctx_data_ce1;
reg[31:0] sha256ctx_state_5_1_out_o;
reg sha256ctx_state_5_1_out_o_ap_vld;
reg[31:0] sha256ctx_state_4_1_out_o;
reg sha256ctx_state_4_1_out_o_ap_vld;
reg[31:0] sha256ctx_state_3_1_out_o;
reg sha256ctx_state_3_1_out_o_ap_vld;
reg[31:0] sha256ctx_state_2_1_out_o;
reg sha256ctx_state_2_1_out_o_ap_vld;
reg[31:0] sha256ctx_state_1_1_out_o;
reg sha256ctx_state_1_1_out_o_ap_vld;
reg[31:0] sha256ctx_state_0_1_out_o;
reg sha256ctx_state_0_1_out_o_ap_vld;
reg[31:0] sha256ctx_state_6_1_out_o;
reg sha256ctx_state_6_1_out_o_ap_vld;
reg[31:0] sha256ctx_state_7_1_out_o;
reg sha256ctx_state_7_1_out_o_ap_vld;
reg[31:0] p_out_o;
reg p_out_o_ap_vld;
reg[31:0] p_out1_o;
reg p_out1_o_ap_vld;
reg[31:0] p_out2_o;
reg p_out2_o_ap_vld;

(* fsm_encoding = "none" *) reg   [51:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln90_fu_613_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_state52;
wire    ap_block_state52_pp0_stage51_iter0;
reg   [0:0] icmp_ln90_reg_970;
wire   [6:0] add_ln90_fu_619_p2;
reg   [6:0] add_ln90_reg_974;
wire   [0:0] icmp_ln93_fu_775_p2;
reg   [0:0] icmp_ln93_reg_979;
wire    ap_CS_fsm_state2;
wire    ap_block_state2_pp0_stage1_iter0;
wire    grp_sha256_transform_fu_591_ap_start;
wire    grp_sha256_transform_fu_591_ap_done;
wire    grp_sha256_transform_fu_591_ap_idle;
wire    grp_sha256_transform_fu_591_ap_ready;
wire   [5:0] grp_sha256_transform_fu_591_data_address0;
wire    grp_sha256_transform_fu_591_data_ce0;
wire   [5:0] grp_sha256_transform_fu_591_data_address1;
wire    grp_sha256_transform_fu_591_data_ce1;
wire   [31:0] grp_sha256_transform_fu_591_ap_return_0;
wire   [31:0] grp_sha256_transform_fu_591_ap_return_1;
wire   [31:0] grp_sha256_transform_fu_591_ap_return_2;
wire   [31:0] grp_sha256_transform_fu_591_ap_return_3;
wire   [31:0] grp_sha256_transform_fu_591_ap_return_4;
wire   [31:0] grp_sha256_transform_fu_591_ap_return_5;
wire   [31:0] grp_sha256_transform_fu_591_ap_return_6;
wire   [31:0] grp_sha256_transform_fu_591_ap_return_7;
reg    grp_sha256_transform_fu_591_ap_start_reg;
reg    ap_predicate_op149_call_state2_state1;
reg   [51:0] ap_NS_fsm;
wire    ap_NS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state34;
wire   [63:0] zext_ln91_fu_764_p1;
wire   [31:0] select_ln95_fu_847_p3;
wire   [31:0] add_ln95_1_fu_855_p2;
wire   [31:0] add_ln92_fu_769_p2;
reg   [6:0] i_5_fu_190;
wire    ap_loop_init;
reg   [6:0] ap_sig_allocacmp_i;
wire   [7:0] tmp_2_fu_629_p66;
wire   [0:0] icmp_ln95_fu_835_p2;
wire   [31:0] add_ln95_fu_841_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_ST_fsm_state3_blk;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_ST_fsm_state4_blk;
wire    ap_block_state5_pp0_stage4_iter0;
wire    ap_ST_fsm_state5_blk;
wire    ap_block_state6_pp0_stage5_iter0;
wire    ap_ST_fsm_state6_blk;
wire    ap_block_state7_pp0_stage6_iter0;
wire    ap_ST_fsm_state7_blk;
wire    ap_block_state8_pp0_stage7_iter0;
wire    ap_ST_fsm_state8_blk;
wire    ap_block_state9_pp0_stage8_iter0;
wire    ap_ST_fsm_state9_blk;
wire    ap_block_state10_pp0_stage9_iter0;
wire    ap_ST_fsm_state10_blk;
wire    ap_block_state11_pp0_stage10_iter0;
wire    ap_ST_fsm_state11_blk;
wire    ap_block_state12_pp0_stage11_iter0;
wire    ap_ST_fsm_state12_blk;
wire    ap_block_state13_pp0_stage12_iter0;
wire    ap_ST_fsm_state13_blk;
wire    ap_block_state14_pp0_stage13_iter0;
wire    ap_ST_fsm_state14_blk;
wire    ap_block_state15_pp0_stage14_iter0;
wire    ap_ST_fsm_state15_blk;
wire    ap_block_state16_pp0_stage15_iter0;
wire    ap_ST_fsm_state16_blk;
wire    ap_block_state17_pp0_stage16_iter0;
wire    ap_ST_fsm_state17_blk;
wire    ap_block_state18_pp0_stage17_iter0;
wire    ap_ST_fsm_state18_blk;
wire    ap_block_state19_pp0_stage18_iter0;
wire    ap_ST_fsm_state19_blk;
wire    ap_block_state20_pp0_stage19_iter0;
wire    ap_ST_fsm_state20_blk;
wire    ap_block_state21_pp0_stage20_iter0;
wire    ap_ST_fsm_state21_blk;
wire    ap_block_state22_pp0_stage21_iter0;
wire    ap_ST_fsm_state22_blk;
wire    ap_block_state23_pp0_stage22_iter0;
wire    ap_ST_fsm_state23_blk;
wire    ap_block_state24_pp0_stage23_iter0;
wire    ap_ST_fsm_state24_blk;
wire    ap_block_state25_pp0_stage24_iter0;
wire    ap_ST_fsm_state25_blk;
wire    ap_block_state26_pp0_stage25_iter0;
wire    ap_ST_fsm_state26_blk;
wire    ap_block_state27_pp0_stage26_iter0;
wire    ap_ST_fsm_state27_blk;
wire    ap_block_state28_pp0_stage27_iter0;
wire    ap_ST_fsm_state28_blk;
wire    ap_block_state29_pp0_stage28_iter0;
wire    ap_ST_fsm_state29_blk;
wire    ap_block_state30_pp0_stage29_iter0;
wire    ap_ST_fsm_state30_blk;
wire    ap_block_state31_pp0_stage30_iter0;
wire    ap_ST_fsm_state31_blk;
wire    ap_block_state32_pp0_stage31_iter0;
wire    ap_ST_fsm_state32_blk;
wire    ap_block_state33_pp0_stage32_iter0;
wire    ap_ST_fsm_state33_blk;
wire    ap_block_state34_pp0_stage33_iter0;
wire    ap_ST_fsm_state34_blk;
wire    ap_block_state35_pp0_stage34_iter0;
wire    ap_ST_fsm_state35_blk;
wire    ap_block_state36_pp0_stage35_iter0;
wire    ap_ST_fsm_state36_blk;
wire    ap_block_state37_pp0_stage36_iter0;
wire    ap_ST_fsm_state37_blk;
wire    ap_block_state38_pp0_stage37_iter0;
wire    ap_ST_fsm_state38_blk;
wire    ap_block_state39_pp0_stage38_iter0;
wire    ap_ST_fsm_state39_blk;
wire    ap_block_state40_pp0_stage39_iter0;
wire    ap_ST_fsm_state40_blk;
wire    ap_block_state41_pp0_stage40_iter0;
wire    ap_ST_fsm_state41_blk;
wire    ap_block_state42_pp0_stage41_iter0;
wire    ap_ST_fsm_state42_blk;
wire    ap_block_state43_pp0_stage42_iter0;
wire    ap_ST_fsm_state43_blk;
wire    ap_block_state44_pp0_stage43_iter0;
wire    ap_ST_fsm_state44_blk;
wire    ap_block_state45_pp0_stage44_iter0;
wire    ap_ST_fsm_state45_blk;
wire    ap_block_state46_pp0_stage45_iter0;
wire    ap_ST_fsm_state46_blk;
wire    ap_block_state47_pp0_stage46_iter0;
wire    ap_ST_fsm_state47_blk;
wire    ap_block_state48_pp0_stage47_iter0;
wire    ap_ST_fsm_state48_blk;
wire    ap_block_state49_pp0_stage48_iter0;
wire    ap_ST_fsm_state49_blk;
wire    ap_block_state50_pp0_stage49_iter0;
wire    ap_ST_fsm_state50_blk;
wire    ap_block_state51_pp0_stage50_iter0;
wire    ap_ST_fsm_state51_blk;
wire    ap_ST_fsm_state52_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 52'd1;
#0 grp_sha256_transform_fu_591_ap_start_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

sha256_sha256_transform grp_sha256_transform_fu_591(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_sha256_transform_fu_591_ap_start),
    .ap_done(grp_sha256_transform_fu_591_ap_done),
    .ap_idle(grp_sha256_transform_fu_591_ap_idle),
    .ap_ready(grp_sha256_transform_fu_591_ap_ready),
    .ap_ce(1'b1),
    .ctx_state_0_read(sha256ctx_state_0_1_out_i),
    .ctx_state_1_read(sha256ctx_state_1_1_out_i),
    .ctx_state_2_read(sha256ctx_state_2_1_out_i),
    .ctx_state_3_read(sha256ctx_state_3_1_out_i),
    .ctx_state_4_read(sha256ctx_state_4_1_out_i),
    .ctx_state_5_read(sha256ctx_state_5_1_out_i),
    .ctx_state_6_read(sha256ctx_state_6_1_out_i),
    .ctx_state_7_read(sha256ctx_state_7_1_out_i),
    .data_address0(grp_sha256_transform_fu_591_data_address0),
    .data_ce0(grp_sha256_transform_fu_591_data_ce0),
    .data_q0(sha256ctx_data_q0),
    .data_address1(grp_sha256_transform_fu_591_data_address1),
    .data_ce1(grp_sha256_transform_fu_591_data_ce1),
    .data_q1(sha256ctx_data_q1),
    .ap_return_0(grp_sha256_transform_fu_591_ap_return_0),
    .ap_return_1(grp_sha256_transform_fu_591_ap_return_1),
    .ap_return_2(grp_sha256_transform_fu_591_ap_return_2),
    .ap_return_3(grp_sha256_transform_fu_591_ap_return_3),
    .ap_return_4(grp_sha256_transform_fu_591_ap_return_4),
    .ap_return_5(grp_sha256_transform_fu_591_ap_return_5),
    .ap_return_6(grp_sha256_transform_fu_591_ap_return_6),
    .ap_return_7(grp_sha256_transform_fu_591_ap_return_7)
);

sha256_mux_647_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 8 ),
    .din17_WIDTH( 8 ),
    .din18_WIDTH( 8 ),
    .din19_WIDTH( 8 ),
    .din20_WIDTH( 8 ),
    .din21_WIDTH( 8 ),
    .din22_WIDTH( 8 ),
    .din23_WIDTH( 8 ),
    .din24_WIDTH( 8 ),
    .din25_WIDTH( 8 ),
    .din26_WIDTH( 8 ),
    .din27_WIDTH( 8 ),
    .din28_WIDTH( 8 ),
    .din29_WIDTH( 8 ),
    .din30_WIDTH( 8 ),
    .din31_WIDTH( 8 ),
    .din32_WIDTH( 8 ),
    .din33_WIDTH( 8 ),
    .din34_WIDTH( 8 ),
    .din35_WIDTH( 8 ),
    .din36_WIDTH( 8 ),
    .din37_WIDTH( 8 ),
    .din38_WIDTH( 8 ),
    .din39_WIDTH( 8 ),
    .din40_WIDTH( 8 ),
    .din41_WIDTH( 8 ),
    .din42_WIDTH( 8 ),
    .din43_WIDTH( 8 ),
    .din44_WIDTH( 8 ),
    .din45_WIDTH( 8 ),
    .din46_WIDTH( 8 ),
    .din47_WIDTH( 8 ),
    .din48_WIDTH( 8 ),
    .din49_WIDTH( 8 ),
    .din50_WIDTH( 8 ),
    .din51_WIDTH( 8 ),
    .din52_WIDTH( 8 ),
    .din53_WIDTH( 8 ),
    .din54_WIDTH( 8 ),
    .din55_WIDTH( 8 ),
    .din56_WIDTH( 8 ),
    .din57_WIDTH( 8 ),
    .din58_WIDTH( 8 ),
    .din59_WIDTH( 8 ),
    .din60_WIDTH( 8 ),
    .din61_WIDTH( 8 ),
    .din62_WIDTH( 8 ),
    .din63_WIDTH( 8 ),
    .din64_WIDTH( 7 ),
    .dout_WIDTH( 8 ))
mux_647_8_1_1_U139(
    .din0(conv73_reload),
    .din1(conv71_reload),
    .din2(conv69_reload),
    .din3(conv67_reload),
    .din4(conv65_reload),
    .din5(conv63_reload),
    .din6(conv61_reload),
    .din7(conv59_reload),
    .din8(conv57_reload),
    .din9(conv55_reload),
    .din10(conv53_reload),
    .din11(conv51_reload),
    .din12(conv49_reload),
    .din13(conv47_reload),
    .din14(conv45_reload),
    .din15(conv43_reload),
    .din16(conv41_reload),
    .din17(conv39_reload),
    .din18(conv37_reload),
    .din19(conv35_reload),
    .din20(conv33_reload),
    .din21(conv31_reload),
    .din22(conv29_reload),
    .din23(conv27_reload),
    .din24(conv25_reload),
    .din25(conv23_reload),
    .din26(conv21_reload),
    .din27(conv19_reload),
    .din28(conv17_reload),
    .din29(conv15_reload),
    .din30(conv13_reload),
    .din31(conv11_reload),
    .din32(seg_buf_96_reload),
    .din33(seg_buf_97_reload),
    .din34(seg_buf_98_reload),
    .din35(seg_buf_99_reload),
    .din36(seg_buf_100_reload),
    .din37(seg_buf_101_reload),
    .din38(seg_buf_102_reload),
    .din39(seg_buf_103_reload),
    .din40(seg_buf_104_reload),
    .din41(seg_buf_105_reload),
    .din42(seg_buf_106_reload),
    .din43(seg_buf_107_reload),
    .din44(seg_buf_108_reload),
    .din45(seg_buf_109_reload),
    .din46(seg_buf_110_reload),
    .din47(seg_buf_111_reload),
    .din48(seg_buf_112_reload),
    .din49(seg_buf_113_reload),
    .din50(seg_buf_114_reload),
    .din51(seg_buf_115_reload),
    .din52(seg_buf_116_reload),
    .din53(seg_buf_117_reload),
    .din54(seg_buf_118_reload),
    .din55(seg_buf_119_reload),
    .din56(seg_buf_120_reload),
    .din57(seg_buf_121_reload),
    .din58(seg_buf_122_reload),
    .din59(seg_buf_123_reload),
    .din60(seg_buf_124_reload),
    .din61(seg_buf_125_reload),
    .din62(seg_buf_126_reload),
    .din63(seg_buf_127_reload),
    .din64(ap_sig_allocacmp_i),
    .dout(tmp_2_fu_629_p66)
);

sha256_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_sha256_transform_fu_591_ap_start_reg <= 1'b0;
    end else begin
        if (((ap_predicate_op149_call_state2_state1 == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_NS_fsm_state2))) begin
            grp_sha256_transform_fu_591_ap_start_reg <= 1'b1;
        end else if ((grp_sha256_transform_fu_591_ap_ready == 1'b1)) begin
            grp_sha256_transform_fu_591_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        i_5_fu_190 <= 7'd0;
    end else if (((1'b1 == ap_CS_fsm_state52) & (icmp_ln90_reg_970 == 1'd0))) begin
        i_5_fu_190 <= add_ln90_reg_974;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        add_ln90_reg_974 <= add_ln90_fu_619_p2;
        icmp_ln90_reg_970 <= icmp_ln90_fu_613_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln90_fu_613_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        icmp_ln93_reg_979 <= icmp_ln93_fu_775_p2;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state27_blk = 1'b0;

assign ap_ST_fsm_state28_blk = 1'b0;

assign ap_ST_fsm_state29_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state30_blk = 1'b0;

assign ap_ST_fsm_state31_blk = 1'b0;

assign ap_ST_fsm_state32_blk = 1'b0;

assign ap_ST_fsm_state33_blk = 1'b0;

assign ap_ST_fsm_state34_blk = 1'b0;

assign ap_ST_fsm_state35_blk = 1'b0;

assign ap_ST_fsm_state36_blk = 1'b0;

assign ap_ST_fsm_state37_blk = 1'b0;

assign ap_ST_fsm_state38_blk = 1'b0;

assign ap_ST_fsm_state39_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state40_blk = 1'b0;

assign ap_ST_fsm_state41_blk = 1'b0;

assign ap_ST_fsm_state42_blk = 1'b0;

assign ap_ST_fsm_state43_blk = 1'b0;

assign ap_ST_fsm_state44_blk = 1'b0;

assign ap_ST_fsm_state45_blk = 1'b0;

assign ap_ST_fsm_state46_blk = 1'b0;

assign ap_ST_fsm_state47_blk = 1'b0;

assign ap_ST_fsm_state48_blk = 1'b0;

assign ap_ST_fsm_state49_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state50_blk = 1'b0;

assign ap_ST_fsm_state51_blk = 1'b0;

assign ap_ST_fsm_state52_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((icmp_ln90_fu_613_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_i = 7'd0;
    end else begin
        ap_sig_allocacmp_i = i_5_fu_190;
    end
end

always @ (*) begin
    if (((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln90_reg_970 == 1'd0))) begin
        p_out1_o = add_ln95_1_fu_855_p2;
    end else begin
        p_out1_o = p_out1_i;
    end
end

always @ (*) begin
    if (((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln90_reg_970 == 1'd0))) begin
        p_out1_o_ap_vld = 1'b1;
    end else begin
        p_out1_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln90_fu_613_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln93_fu_775_p2 == 1'd0))) begin
        p_out2_o = add_ln92_fu_769_p2;
    end else if (((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln90_reg_970 == 1'd0))) begin
        p_out2_o = 32'd0;
    end else begin
        p_out2_o = p_out2_i;
    end
end

always @ (*) begin
    if ((((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln90_fu_613_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln93_fu_775_p2 == 1'd0) & (ap_start_int == 1'b1)))) begin
        p_out2_o_ap_vld = 1'b1;
    end else begin
        p_out2_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln90_reg_970 == 1'd0))) begin
        p_out_o = select_ln95_fu_847_p3;
    end else begin
        p_out_o = p_out_i;
    end
end

always @ (*) begin
    if (((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln90_reg_970 == 1'd0))) begin
        p_out_o_ap_vld = 1'b1;
    end else begin
        p_out_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln90_fu_613_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        sha256ctx_data_address0 = zext_ln91_fu_764_p1;
    end else if ((((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state34) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state33) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state32) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state31) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state30) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state29) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state28) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state27) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state26) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state25) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state24) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state23) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state22) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state21) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state20) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state19) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state18) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state17) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state16) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state15) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state14) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state13) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state12) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state11) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state10) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state9) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state7) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state6) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state5) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln90_reg_970 == 1'd0)))) begin
        sha256ctx_data_address0 = grp_sha256_transform_fu_591_data_address0;
    end else begin
        sha256ctx_data_address0 = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln90_fu_613_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        sha256ctx_data_ce0 = 1'b1;
    end else if ((((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state34) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state33) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state32) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state31) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state30) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state29) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state28) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state27) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state26) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state25) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state24) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state23) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state22) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state21) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state20) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state19) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state18) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state17) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state16) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state15) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state14) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state13) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state12) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state11) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state10) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state9) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state7) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state6) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state5) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln90_reg_970 == 1'd0)))) begin
        sha256ctx_data_ce0 = grp_sha256_transform_fu_591_data_ce0;
    end else begin
        sha256ctx_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state34) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state33) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state32) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state31) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state30) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state29) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state28) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state27) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state26) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state25) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state24) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state23) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state22) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state21) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state20) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state19) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state18) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state17) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state16) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state15) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state14) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state13) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state12) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state11) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state10) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state9) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state8) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state7) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state6) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state5) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state3) & (icmp_ln90_reg_970 == 1'd0)) | ((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state2) & (icmp_ln90_reg_970 == 1'd0)))) begin
        sha256ctx_data_ce1 = grp_sha256_transform_fu_591_data_ce1;
    end else begin
        sha256ctx_data_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln90_fu_613_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        sha256ctx_data_we0 = 1'b1;
    end else begin
        sha256ctx_data_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state52) & (icmp_ln90_reg_970 == 1'd0))) begin
        sha256ctx_state_0_1_out_o = grp_sha256_transform_fu_591_ap_return_0;
    end else begin
        sha256ctx_state_0_1_out_o = sha256ctx_state_0_1_out_i;
    end
end

always @ (*) begin
    if (((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state52) & (icmp_ln90_reg_970 == 1'd0))) begin
        sha256ctx_state_0_1_out_o_ap_vld = 1'b1;
    end else begin
        sha256ctx_state_0_1_out_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state52) & (icmp_ln90_reg_970 == 1'd0))) begin
        sha256ctx_state_1_1_out_o = grp_sha256_transform_fu_591_ap_return_1;
    end else begin
        sha256ctx_state_1_1_out_o = sha256ctx_state_1_1_out_i;
    end
end

always @ (*) begin
    if (((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state52) & (icmp_ln90_reg_970 == 1'd0))) begin
        sha256ctx_state_1_1_out_o_ap_vld = 1'b1;
    end else begin
        sha256ctx_state_1_1_out_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state52) & (icmp_ln90_reg_970 == 1'd0))) begin
        sha256ctx_state_2_1_out_o = grp_sha256_transform_fu_591_ap_return_2;
    end else begin
        sha256ctx_state_2_1_out_o = sha256ctx_state_2_1_out_i;
    end
end

always @ (*) begin
    if (((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state52) & (icmp_ln90_reg_970 == 1'd0))) begin
        sha256ctx_state_2_1_out_o_ap_vld = 1'b1;
    end else begin
        sha256ctx_state_2_1_out_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state52) & (icmp_ln90_reg_970 == 1'd0))) begin
        sha256ctx_state_3_1_out_o = grp_sha256_transform_fu_591_ap_return_3;
    end else begin
        sha256ctx_state_3_1_out_o = sha256ctx_state_3_1_out_i;
    end
end

always @ (*) begin
    if (((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state52) & (icmp_ln90_reg_970 == 1'd0))) begin
        sha256ctx_state_3_1_out_o_ap_vld = 1'b1;
    end else begin
        sha256ctx_state_3_1_out_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state52) & (icmp_ln90_reg_970 == 1'd0))) begin
        sha256ctx_state_4_1_out_o = grp_sha256_transform_fu_591_ap_return_4;
    end else begin
        sha256ctx_state_4_1_out_o = sha256ctx_state_4_1_out_i;
    end
end

always @ (*) begin
    if (((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state52) & (icmp_ln90_reg_970 == 1'd0))) begin
        sha256ctx_state_4_1_out_o_ap_vld = 1'b1;
    end else begin
        sha256ctx_state_4_1_out_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state52) & (icmp_ln90_reg_970 == 1'd0))) begin
        sha256ctx_state_5_1_out_o = grp_sha256_transform_fu_591_ap_return_5;
    end else begin
        sha256ctx_state_5_1_out_o = sha256ctx_state_5_1_out_i;
    end
end

always @ (*) begin
    if (((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state52) & (icmp_ln90_reg_970 == 1'd0))) begin
        sha256ctx_state_5_1_out_o_ap_vld = 1'b1;
    end else begin
        sha256ctx_state_5_1_out_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state52) & (icmp_ln90_reg_970 == 1'd0))) begin
        sha256ctx_state_6_1_out_o = grp_sha256_transform_fu_591_ap_return_6;
    end else begin
        sha256ctx_state_6_1_out_o = sha256ctx_state_6_1_out_i;
    end
end

always @ (*) begin
    if (((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state52) & (icmp_ln90_reg_970 == 1'd0))) begin
        sha256ctx_state_6_1_out_o_ap_vld = 1'b1;
    end else begin
        sha256ctx_state_6_1_out_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state52) & (icmp_ln90_reg_970 == 1'd0))) begin
        sha256ctx_state_7_1_out_o = grp_sha256_transform_fu_591_ap_return_7;
    end else begin
        sha256ctx_state_7_1_out_o = sha256ctx_state_7_1_out_i;
    end
end

always @ (*) begin
    if (((icmp_ln93_reg_979 == 1'd1) & (1'b1 == ap_CS_fsm_state52) & (icmp_ln90_reg_970 == 1'd0))) begin
        sha256ctx_state_7_1_out_o_ap_vld = 1'b1;
    end else begin
        sha256ctx_state_7_1_out_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((icmp_ln90_fu_613_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln90_fu_619_p2 = (ap_sig_allocacmp_i + 7'd1);

assign add_ln92_fu_769_p2 = (p_out2_i + 32'd1);

assign add_ln95_1_fu_855_p2 = (p_out1_i + 32'd512);

assign add_ln95_fu_841_p2 = (p_out_i + 32'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_NS_fsm_state2 = ap_NS_fsm[32'd1];

assign ap_block_state10_pp0_stage9_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage10_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage11_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage12_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage13_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage14_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage15_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage16_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage17_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage18_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_block_state20_pp0_stage19_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage20_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage21_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage22_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage23_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage24_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage25_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage26_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage27_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage28_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage29_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage30_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage31_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage32_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage33_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp0_stage34_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp0_stage35_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp0_stage36_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp0_stage37_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp0_stage38_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp0_stage39_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp0_stage40_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp0_stage41_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp0_stage42_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp0_stage43_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp0_stage44_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp0_stage45_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state47_pp0_stage46_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state48_pp0_stage47_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp0_stage48_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state50_pp0_stage49_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp0_stage50_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state52_pp0_stage51_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage8_iter0 = ~(1'b1 == 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

always @ (*) begin
    ap_predicate_op149_call_state2_state1 = ((icmp_ln90_fu_613_p2 == 1'd0) & (icmp_ln93_fu_775_p2 == 1'd1));
end

assign grp_sha256_transform_fu_591_ap_start = grp_sha256_transform_fu_591_ap_start_reg;

assign icmp_ln90_fu_613_p2 = ((ap_sig_allocacmp_i == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln93_fu_775_p2 = ((add_ln92_fu_769_p2 == 32'd64) ? 1'b1 : 1'b0);

assign icmp_ln95_fu_835_p2 = ((p_out1_i > 32'd4294966783) ? 1'b1 : 1'b0);

assign select_ln95_fu_847_p3 = ((icmp_ln95_fu_835_p2[0:0] == 1'b1) ? add_ln95_fu_841_p2 : p_out_i);

assign sha256ctx_data_address1 = grp_sha256_transform_fu_591_data_address1;

assign sha256ctx_data_d0 = tmp_2_fu_629_p66;

assign zext_ln91_fu_764_p1 = p_out2_i;

endmodule //sha256_sha2561_Pipeline_VITIS_LOOP_90_1
