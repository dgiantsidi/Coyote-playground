-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sha256 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    input_r_TDATA : IN STD_LOGIC_VECTOR (583 downto 0);
    input_r_TVALID : IN STD_LOGIC;
    input_r_TREADY : OUT STD_LOGIC;
    output_r_TDATA : OUT STD_LOGIC_VECTOR (583 downto 0);
    output_r_TVALID : OUT STD_LOGIC;
    output_r_TREADY : IN STD_LOGIC );
end;


architecture behav of sha256 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "sha256_sha256,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu280-fsvh2892-2L-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.175000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=23473,HLS_SYN_LUT=125196,HLS_VERSION=2022_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv576_lc_1 : STD_LOGIC_VECTOR (575 downto
    constant ap_const_lv582_lc_3 : STD_LOGIC_VECTOR (581 downto 0) := "000000111111111111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_200 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000000000";
    constant ap_const_lv32_245 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;

    signal ap_rst_n_inv : STD_LOGIC;
    signal output_r_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal hash_tdata_V_reg_149 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal buf_tid_V_reg_154 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln174_fu_138_p1 : STD_LOGIC_VECTOR (583 downto 0);
    signal signature_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal signature_ce0 : STD_LOGIC;
    signal signature_we0 : STD_LOGIC;
    signal signature_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal signature_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sha2561_fu_69_ap_start : STD_LOGIC;
    signal grp_sha2561_fu_69_ap_done : STD_LOGIC;
    signal grp_sha2561_fu_69_ap_idle : STD_LOGIC;
    signal grp_sha2561_fu_69_ap_ready : STD_LOGIC;
    signal grp_sha2561_fu_69_input_r_TREADY : STD_LOGIC;
    signal grp_sha2561_fu_69_output_r_TDATA : STD_LOGIC_VECTOR (583 downto 0);
    signal grp_sha2561_fu_69_output_r_TVALID : STD_LOGIC;
    signal grp_sha2561_fu_69_output_r_TREADY : STD_LOGIC;
    signal grp_sha2561_fu_69_ap_return_0 : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_sha2561_fu_69_ap_return_1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_sha256_Pipeline_1_fu_77_ap_start : STD_LOGIC;
    signal grp_sha256_Pipeline_1_fu_77_ap_done : STD_LOGIC;
    signal grp_sha256_Pipeline_1_fu_77_ap_idle : STD_LOGIC;
    signal grp_sha256_Pipeline_1_fu_77_ap_ready : STD_LOGIC;
    signal grp_sha256_Pipeline_1_fu_77_signature_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_sha256_Pipeline_1_fu_77_signature_ce0 : STD_LOGIC;
    signal grp_sha256_Pipeline_1_fu_77_signature_we0 : STD_LOGIC;
    signal grp_sha256_Pipeline_1_fu_77_signature_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sha256_Pipeline_VITIS_LOOP_64_1_fu_82_ap_start : STD_LOGIC;
    signal grp_sha256_Pipeline_VITIS_LOOP_64_1_fu_82_ap_done : STD_LOGIC;
    signal grp_sha256_Pipeline_VITIS_LOOP_64_1_fu_82_ap_idle : STD_LOGIC;
    signal grp_sha256_Pipeline_VITIS_LOOP_64_1_fu_82_ap_ready : STD_LOGIC;
    signal grp_sha256_Pipeline_VITIS_LOOP_64_1_fu_82_signature_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_sha256_Pipeline_VITIS_LOOP_64_1_fu_82_signature_ce0 : STD_LOGIC;
    signal grp_sha256_Pipeline_VITIS_LOOP_64_1_fu_82_signature_we0 : STD_LOGIC;
    signal grp_sha256_Pipeline_VITIS_LOOP_64_1_fu_82_signature_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_sha256_Pipeline_VITIS_LOOP_89_3_fu_88_ap_start : STD_LOGIC;
    signal grp_sha256_Pipeline_VITIS_LOOP_89_3_fu_88_ap_done : STD_LOGIC;
    signal grp_sha256_Pipeline_VITIS_LOOP_89_3_fu_88_ap_idle : STD_LOGIC;
    signal grp_sha256_Pipeline_VITIS_LOOP_89_3_fu_88_ap_ready : STD_LOGIC;
    signal grp_sha256_Pipeline_VITIS_LOOP_89_3_fu_88_signature_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_sha256_Pipeline_VITIS_LOOP_89_3_fu_88_signature_ce0 : STD_LOGIC;
    signal grp_sha256_Pipeline_VITIS_LOOP_89_3_fu_88_p_Val2_1_out : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_sha256_Pipeline_VITIS_LOOP_89_3_fu_88_p_Val2_1_out_ap_vld : STD_LOGIC;
    signal grp_sha2561_fu_69_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_sha256_Pipeline_1_fu_77_ap_start_reg : STD_LOGIC := '0';
    signal grp_sha256_Pipeline_VITIS_LOOP_64_1_fu_82_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_sha256_Pipeline_VITIS_LOOP_89_3_fu_88_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal shl_ln2_fu_105_p3 : STD_LOGIC_VECTOR (581 downto 0);
    signal or_ln174_fu_112_p2 : STD_LOGIC_VECTOR (581 downto 0);
    signal tmp_fu_118_p4 : STD_LOGIC_VECTOR (69 downto 0);
    signal zext_ln174_cast_fu_128_p4 : STD_LOGIC_VECTOR (582 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_block_state3_on_subcall_done : BOOLEAN;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal regslice_both_output_r_U_apdone_blk : STD_LOGIC;
    signal ap_block_state9 : BOOLEAN;
    signal regslice_both_input_r_U_apdone_blk : STD_LOGIC;
    signal input_r_TDATA_int_regslice : STD_LOGIC_VECTOR (583 downto 0);
    signal input_r_TVALID_int_regslice : STD_LOGIC;
    signal input_r_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_input_r_U_ack_in : STD_LOGIC;
    signal output_r_TDATA_int_regslice : STD_LOGIC_VECTOR (583 downto 0);
    signal output_r_TVALID_int_regslice : STD_LOGIC;
    signal output_r_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_output_r_U_vld_out : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component sha256_sha2561 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r_TDATA : IN STD_LOGIC_VECTOR (583 downto 0);
        input_r_TVALID : IN STD_LOGIC;
        input_r_TREADY : OUT STD_LOGIC;
        output_r_TDATA : OUT STD_LOGIC_VECTOR (583 downto 0);
        output_r_TVALID : OUT STD_LOGIC;
        output_r_TREADY : IN STD_LOGIC;
        ap_return_0 : OUT STD_LOGIC_VECTOR (511 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component sha256_sha256_Pipeline_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        signature_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        signature_ce0 : OUT STD_LOGIC;
        signature_we0 : OUT STD_LOGIC;
        signature_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component sha256_sha256_Pipeline_VITIS_LOOP_64_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        hash_tdata_V : IN STD_LOGIC_VECTOR (511 downto 0);
        signature_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        signature_ce0 : OUT STD_LOGIC;
        signature_we0 : OUT STD_LOGIC;
        signature_d0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component sha256_sha256_Pipeline_VITIS_LOOP_89_3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        signature_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        signature_ce0 : OUT STD_LOGIC;
        signature_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        p_Val2_1_out : OUT STD_LOGIC_VECTOR (511 downto 0);
        p_Val2_1_out_ap_vld : OUT STD_LOGIC );
    end component;


    component sha256_signature_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component sha256_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    signature_U : component sha256_signature_RAM_AUTO_1R1W
    generic map (
        DataWidth => 8,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => signature_address0,
        ce0 => signature_ce0,
        we0 => signature_we0,
        d0 => signature_d0,
        q0 => signature_q0);

    grp_sha2561_fu_69 : component sha256_sha2561
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_sha2561_fu_69_ap_start,
        ap_done => grp_sha2561_fu_69_ap_done,
        ap_idle => grp_sha2561_fu_69_ap_idle,
        ap_ready => grp_sha2561_fu_69_ap_ready,
        input_r_TDATA => input_r_TDATA_int_regslice,
        input_r_TVALID => input_r_TVALID_int_regslice,
        input_r_TREADY => grp_sha2561_fu_69_input_r_TREADY,
        output_r_TDATA => grp_sha2561_fu_69_output_r_TDATA,
        output_r_TVALID => grp_sha2561_fu_69_output_r_TVALID,
        output_r_TREADY => grp_sha2561_fu_69_output_r_TREADY,
        ap_return_0 => grp_sha2561_fu_69_ap_return_0,
        ap_return_1 => grp_sha2561_fu_69_ap_return_1);

    grp_sha256_Pipeline_1_fu_77 : component sha256_sha256_Pipeline_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_sha256_Pipeline_1_fu_77_ap_start,
        ap_done => grp_sha256_Pipeline_1_fu_77_ap_done,
        ap_idle => grp_sha256_Pipeline_1_fu_77_ap_idle,
        ap_ready => grp_sha256_Pipeline_1_fu_77_ap_ready,
        signature_address0 => grp_sha256_Pipeline_1_fu_77_signature_address0,
        signature_ce0 => grp_sha256_Pipeline_1_fu_77_signature_ce0,
        signature_we0 => grp_sha256_Pipeline_1_fu_77_signature_we0,
        signature_d0 => grp_sha256_Pipeline_1_fu_77_signature_d0);

    grp_sha256_Pipeline_VITIS_LOOP_64_1_fu_82 : component sha256_sha256_Pipeline_VITIS_LOOP_64_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_sha256_Pipeline_VITIS_LOOP_64_1_fu_82_ap_start,
        ap_done => grp_sha256_Pipeline_VITIS_LOOP_64_1_fu_82_ap_done,
        ap_idle => grp_sha256_Pipeline_VITIS_LOOP_64_1_fu_82_ap_idle,
        ap_ready => grp_sha256_Pipeline_VITIS_LOOP_64_1_fu_82_ap_ready,
        hash_tdata_V => hash_tdata_V_reg_149,
        signature_address0 => grp_sha256_Pipeline_VITIS_LOOP_64_1_fu_82_signature_address0,
        signature_ce0 => grp_sha256_Pipeline_VITIS_LOOP_64_1_fu_82_signature_ce0,
        signature_we0 => grp_sha256_Pipeline_VITIS_LOOP_64_1_fu_82_signature_we0,
        signature_d0 => grp_sha256_Pipeline_VITIS_LOOP_64_1_fu_82_signature_d0);

    grp_sha256_Pipeline_VITIS_LOOP_89_3_fu_88 : component sha256_sha256_Pipeline_VITIS_LOOP_89_3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_sha256_Pipeline_VITIS_LOOP_89_3_fu_88_ap_start,
        ap_done => grp_sha256_Pipeline_VITIS_LOOP_89_3_fu_88_ap_done,
        ap_idle => grp_sha256_Pipeline_VITIS_LOOP_89_3_fu_88_ap_idle,
        ap_ready => grp_sha256_Pipeline_VITIS_LOOP_89_3_fu_88_ap_ready,
        signature_address0 => grp_sha256_Pipeline_VITIS_LOOP_89_3_fu_88_signature_address0,
        signature_ce0 => grp_sha256_Pipeline_VITIS_LOOP_89_3_fu_88_signature_ce0,
        signature_q0 => signature_q0,
        p_Val2_1_out => grp_sha256_Pipeline_VITIS_LOOP_89_3_fu_88_p_Val2_1_out,
        p_Val2_1_out_ap_vld => grp_sha256_Pipeline_VITIS_LOOP_89_3_fu_88_p_Val2_1_out_ap_vld);

    regslice_both_input_r_U : component sha256_regslice_both
    generic map (
        DataWidth => 584)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input_r_TDATA,
        vld_in => input_r_TVALID,
        ack_in => regslice_both_input_r_U_ack_in,
        data_out => input_r_TDATA_int_regslice,
        vld_out => input_r_TVALID_int_regslice,
        ack_out => input_r_TREADY_int_regslice,
        apdone_blk => regslice_both_input_r_U_apdone_blk);

    regslice_both_output_r_U : component sha256_regslice_both
    generic map (
        DataWidth => 584)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => output_r_TDATA_int_regslice,
        vld_in => output_r_TVALID_int_regslice,
        ack_in => output_r_TREADY_int_regslice,
        data_out => output_r_TDATA,
        vld_out => regslice_both_output_r_U_vld_out,
        ack_out => output_r_TREADY,
        apdone_blk => regslice_both_output_r_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_sha2561_fu_69_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_sha2561_fu_69_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    grp_sha2561_fu_69_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sha2561_fu_69_ap_ready = ap_const_logic_1)) then 
                    grp_sha2561_fu_69_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_sha256_Pipeline_1_fu_77_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_sha256_Pipeline_1_fu_77_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    grp_sha256_Pipeline_1_fu_77_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sha256_Pipeline_1_fu_77_ap_ready = ap_const_logic_1)) then 
                    grp_sha256_Pipeline_1_fu_77_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_sha256_Pipeline_VITIS_LOOP_64_1_fu_82_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_sha256_Pipeline_VITIS_LOOP_64_1_fu_82_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    grp_sha256_Pipeline_VITIS_LOOP_64_1_fu_82_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sha256_Pipeline_VITIS_LOOP_64_1_fu_82_ap_ready = ap_const_logic_1)) then 
                    grp_sha256_Pipeline_VITIS_LOOP_64_1_fu_82_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_sha256_Pipeline_VITIS_LOOP_89_3_fu_88_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_sha256_Pipeline_VITIS_LOOP_89_3_fu_88_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    grp_sha256_Pipeline_VITIS_LOOP_89_3_fu_88_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sha256_Pipeline_VITIS_LOOP_89_3_fu_88_ap_ready = ap_const_logic_1)) then 
                    grp_sha256_Pipeline_VITIS_LOOP_89_3_fu_88_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                buf_tid_V_reg_154 <= grp_sha2561_fu_69_ap_return_1;
                hash_tdata_V_reg_149 <= grp_sha2561_fu_69_ap_return_0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state3, grp_sha256_Pipeline_VITIS_LOOP_64_1_fu_82_ap_done, grp_sha256_Pipeline_VITIS_LOOP_89_3_fu_88_ap_done, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_block_state3_on_subcall_done, regslice_both_output_r_U_apdone_blk, output_r_TREADY_int_regslice)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((grp_sha256_Pipeline_VITIS_LOOP_64_1_fu_82_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((grp_sha256_Pipeline_VITIS_LOOP_89_3_fu_88_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if (((output_r_TREADY_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if ((not(((output_r_TREADY_int_regslice = ap_const_logic_0) or (regslice_both_output_r_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state1_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(ap_block_state3_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state3_on_subcall_done)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state4_blk <= ap_const_logic_0;

    ap_ST_fsm_state5_blk_assign_proc : process(grp_sha256_Pipeline_VITIS_LOOP_64_1_fu_82_ap_done)
    begin
        if ((grp_sha256_Pipeline_VITIS_LOOP_64_1_fu_82_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state5_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state5_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state6_blk <= ap_const_logic_0;

    ap_ST_fsm_state7_blk_assign_proc : process(grp_sha256_Pipeline_VITIS_LOOP_89_3_fu_88_ap_done)
    begin
        if ((grp_sha256_Pipeline_VITIS_LOOP_89_3_fu_88_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state7_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state7_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state8_blk_assign_proc : process(output_r_TREADY_int_regslice)
    begin
        if ((output_r_TREADY_int_regslice = ap_const_logic_0)) then 
            ap_ST_fsm_state8_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state8_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state9_blk_assign_proc : process(regslice_both_output_r_U_apdone_blk, output_r_TREADY_int_regslice)
    begin
        if (((output_r_TREADY_int_regslice = ap_const_logic_0) or (regslice_both_output_r_U_apdone_blk = ap_const_logic_1))) then 
            ap_ST_fsm_state9_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state9_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state3_on_subcall_done_assign_proc : process(grp_sha2561_fu_69_ap_done, grp_sha256_Pipeline_1_fu_77_ap_done)
    begin
                ap_block_state3_on_subcall_done <= ((grp_sha256_Pipeline_1_fu_77_ap_done = ap_const_logic_0) or (grp_sha2561_fu_69_ap_done = ap_const_logic_0));
    end process;


    ap_block_state9_assign_proc : process(regslice_both_output_r_U_apdone_blk, output_r_TREADY_int_regslice)
    begin
                ap_block_state9 <= ((output_r_TREADY_int_regslice = ap_const_logic_0) or (regslice_both_output_r_U_apdone_blk = ap_const_logic_1));
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    grp_sha2561_fu_69_ap_start <= grp_sha2561_fu_69_ap_start_reg;
    grp_sha2561_fu_69_output_r_TREADY <= (output_r_TREADY_int_regslice and ap_CS_fsm_state3);
    grp_sha256_Pipeline_1_fu_77_ap_start <= grp_sha256_Pipeline_1_fu_77_ap_start_reg;
    grp_sha256_Pipeline_VITIS_LOOP_64_1_fu_82_ap_start <= grp_sha256_Pipeline_VITIS_LOOP_64_1_fu_82_ap_start_reg;
    grp_sha256_Pipeline_VITIS_LOOP_89_3_fu_88_ap_start <= grp_sha256_Pipeline_VITIS_LOOP_89_3_fu_88_ap_start_reg;
    input_r_TREADY <= regslice_both_input_r_U_ack_in;

    input_r_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_state3, grp_sha2561_fu_69_input_r_TREADY)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            input_r_TREADY_int_regslice <= grp_sha2561_fu_69_input_r_TREADY;
        else 
            input_r_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    or_ln174_fu_112_p2 <= (shl_ln2_fu_105_p3 or ap_const_lv582_lc_3);

    output_r_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9, output_r_TREADY_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            output_r_TDATA_blk_n <= output_r_TREADY_int_regslice;
        else 
            output_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    output_r_TDATA_int_regslice_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state3, zext_ln174_fu_138_p1, grp_sha2561_fu_69_output_r_TDATA, grp_sha2561_fu_69_output_r_TVALID, output_r_TREADY_int_regslice)
    begin
        if (((output_r_TREADY_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            output_r_TDATA_int_regslice <= zext_ln174_fu_138_p1;
        elsif (((grp_sha2561_fu_69_output_r_TVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            output_r_TDATA_int_regslice <= grp_sha2561_fu_69_output_r_TDATA;
        else 
            output_r_TDATA_int_regslice
        end if; 
    end process;

    output_r_TVALID <= regslice_both_output_r_U_vld_out;

    output_r_TVALID_int_regslice_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state3, grp_sha2561_fu_69_output_r_TVALID, output_r_TREADY_int_regslice)
    begin
        if (((output_r_TREADY_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            output_r_TVALID_int_regslice <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            output_r_TVALID_int_regslice <= grp_sha2561_fu_69_output_r_TVALID;
        else 
            output_r_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    shl_ln2_fu_105_p3 <= (buf_tid_V_reg_154 & ap_const_lv576_lc_1);

    signature_address0_assign_proc : process(ap_CS_fsm_state3, grp_sha256_Pipeline_1_fu_77_signature_address0, grp_sha256_Pipeline_VITIS_LOOP_64_1_fu_82_signature_address0, grp_sha256_Pipeline_VITIS_LOOP_89_3_fu_88_signature_address0, ap_CS_fsm_state5, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            signature_address0 <= grp_sha256_Pipeline_VITIS_LOOP_89_3_fu_88_signature_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            signature_address0 <= grp_sha256_Pipeline_VITIS_LOOP_64_1_fu_82_signature_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            signature_address0 <= grp_sha256_Pipeline_1_fu_77_signature_address0;
        else 
            signature_address0 <= "XXXXXX";
        end if; 
    end process;


    signature_ce0_assign_proc : process(ap_CS_fsm_state3, grp_sha256_Pipeline_1_fu_77_signature_ce0, grp_sha256_Pipeline_VITIS_LOOP_64_1_fu_82_signature_ce0, grp_sha256_Pipeline_VITIS_LOOP_89_3_fu_88_signature_ce0, ap_CS_fsm_state5, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            signature_ce0 <= grp_sha256_Pipeline_VITIS_LOOP_89_3_fu_88_signature_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            signature_ce0 <= grp_sha256_Pipeline_VITIS_LOOP_64_1_fu_82_signature_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            signature_ce0 <= grp_sha256_Pipeline_1_fu_77_signature_ce0;
        else 
            signature_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    signature_d0_assign_proc : process(ap_CS_fsm_state3, grp_sha256_Pipeline_1_fu_77_signature_d0, grp_sha256_Pipeline_VITIS_LOOP_64_1_fu_82_signature_d0, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            signature_d0 <= grp_sha256_Pipeline_VITIS_LOOP_64_1_fu_82_signature_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            signature_d0 <= grp_sha256_Pipeline_1_fu_77_signature_d0;
        else 
            signature_d0 <= "XXXXXXXX";
        end if; 
    end process;


    signature_we0_assign_proc : process(ap_CS_fsm_state3, grp_sha256_Pipeline_1_fu_77_signature_we0, grp_sha256_Pipeline_VITIS_LOOP_64_1_fu_82_signature_we0, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            signature_we0 <= grp_sha256_Pipeline_VITIS_LOOP_64_1_fu_82_signature_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            signature_we0 <= grp_sha256_Pipeline_1_fu_77_signature_we0;
        else 
            signature_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_118_p4 <= or_ln174_fu_112_p2(581 downto 512);
    zext_ln174_cast_fu_128_p4 <= ((ap_const_lv1_1 & tmp_fu_118_p4) & grp_sha256_Pipeline_VITIS_LOOP_89_3_fu_88_p_Val2_1_out);
    zext_ln174_fu_138_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln174_cast_fu_128_p4),584));
end behav;
