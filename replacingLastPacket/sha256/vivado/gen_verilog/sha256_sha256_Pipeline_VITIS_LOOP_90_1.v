// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module sha256_sha256_Pipeline_VITIS_LOOP_90_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        sha256ctx_state_5_0,
        sha256ctx_state_4_0,
        sha256ctx_state_3_0,
        sha256ctx_state_2_0,
        sha256ctx_state_1_0,
        sha256ctx_state_0_0,
        sha256ctx_state_6_0,
        sha256ctx_state_7_0,
        p_lcssa175179,
        p_lcssa174177,
        p_lcssa140,
        seg_buf_96_reload,
        seg_buf_95_reload,
        seg_buf_94_reload,
        seg_buf_93_reload,
        seg_buf_92_reload,
        seg_buf_91_reload,
        seg_buf_90_reload,
        seg_buf_89_reload,
        seg_buf_88_reload,
        seg_buf_87_reload,
        seg_buf_86_reload,
        seg_buf_85_reload,
        seg_buf_84_reload,
        seg_buf_83_reload,
        seg_buf_82_reload,
        seg_buf_81_reload,
        seg_buf_80_reload,
        seg_buf_79_reload,
        seg_buf_78_reload,
        seg_buf_77_reload,
        seg_buf_76_reload,
        seg_buf_75_reload,
        seg_buf_74_reload,
        seg_buf_73_reload,
        seg_buf_72_reload,
        seg_buf_71_reload,
        seg_buf_70_reload,
        seg_buf_69_reload,
        seg_buf_68_reload,
        seg_buf_67_reload,
        seg_buf_66_reload,
        seg_buf_65_reload,
        seg_buf_32_reload,
        seg_buf_33_reload,
        seg_buf_34_reload,
        seg_buf_35_reload,
        seg_buf_36_reload,
        seg_buf_37_reload,
        seg_buf_38_reload,
        seg_buf_39_reload,
        seg_buf_40_reload,
        seg_buf_41_reload,
        seg_buf_42_reload,
        seg_buf_43_reload,
        seg_buf_44_reload,
        seg_buf_45_reload,
        seg_buf_46_reload,
        seg_buf_47_reload,
        seg_buf_48_reload,
        seg_buf_49_reload,
        seg_buf_50_reload,
        seg_buf_51_reload,
        seg_buf_52_reload,
        seg_buf_53_reload,
        seg_buf_54_reload,
        seg_buf_55_reload,
        seg_buf_56_reload,
        seg_buf_57_reload,
        seg_buf_58_reload,
        seg_buf_59_reload,
        seg_buf_60_reload,
        seg_buf_61_reload,
        seg_buf_62_reload,
        seg_buf_63_reload,
        sha256ctx_data_address0,
        sha256ctx_data_ce0,
        sha256ctx_data_we0,
        sha256ctx_data_d0,
        sha256ctx_data_q0,
        sha256ctx_data_address1,
        sha256ctx_data_ce1,
        sha256ctx_data_q1,
        sha256ctx_state_5_1_out,
        sha256ctx_state_5_1_out_ap_vld,
        sha256ctx_state_4_1_out,
        sha256ctx_state_4_1_out_ap_vld,
        sha256ctx_state_3_1_out,
        sha256ctx_state_3_1_out_ap_vld,
        sha256ctx_state_2_1_out,
        sha256ctx_state_2_1_out_ap_vld,
        sha256ctx_state_1_1_out,
        sha256ctx_state_1_1_out_ap_vld,
        sha256ctx_state_0_1_out,
        sha256ctx_state_0_1_out_ap_vld,
        sha256ctx_state_6_1_out,
        sha256ctx_state_6_1_out_ap_vld,
        sha256ctx_state_7_1_out,
        sha256ctx_state_7_1_out_ap_vld,
        sha256ctx_bitlen_1_out,
        sha256ctx_bitlen_1_out_ap_vld,
        sha256ctx_bitlen_0_out,
        sha256ctx_bitlen_0_out_ap_vld,
        sha256ctx_datalen_out,
        sha256ctx_datalen_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 52'd1;
parameter    ap_ST_fsm_pp0_stage1 = 52'd2;
parameter    ap_ST_fsm_pp0_stage2 = 52'd4;
parameter    ap_ST_fsm_pp0_stage3 = 52'd8;
parameter    ap_ST_fsm_pp0_stage4 = 52'd16;
parameter    ap_ST_fsm_pp0_stage5 = 52'd32;
parameter    ap_ST_fsm_pp0_stage6 = 52'd64;
parameter    ap_ST_fsm_pp0_stage7 = 52'd128;
parameter    ap_ST_fsm_pp0_stage8 = 52'd256;
parameter    ap_ST_fsm_pp0_stage9 = 52'd512;
parameter    ap_ST_fsm_pp0_stage10 = 52'd1024;
parameter    ap_ST_fsm_pp0_stage11 = 52'd2048;
parameter    ap_ST_fsm_pp0_stage12 = 52'd4096;
parameter    ap_ST_fsm_pp0_stage13 = 52'd8192;
parameter    ap_ST_fsm_pp0_stage14 = 52'd16384;
parameter    ap_ST_fsm_pp0_stage15 = 52'd32768;
parameter    ap_ST_fsm_pp0_stage16 = 52'd65536;
parameter    ap_ST_fsm_pp0_stage17 = 52'd131072;
parameter    ap_ST_fsm_pp0_stage18 = 52'd262144;
parameter    ap_ST_fsm_pp0_stage19 = 52'd524288;
parameter    ap_ST_fsm_pp0_stage20 = 52'd1048576;
parameter    ap_ST_fsm_pp0_stage21 = 52'd2097152;
parameter    ap_ST_fsm_pp0_stage22 = 52'd4194304;
parameter    ap_ST_fsm_pp0_stage23 = 52'd8388608;
parameter    ap_ST_fsm_pp0_stage24 = 52'd16777216;
parameter    ap_ST_fsm_pp0_stage25 = 52'd33554432;
parameter    ap_ST_fsm_pp0_stage26 = 52'd67108864;
parameter    ap_ST_fsm_pp0_stage27 = 52'd134217728;
parameter    ap_ST_fsm_pp0_stage28 = 52'd268435456;
parameter    ap_ST_fsm_pp0_stage29 = 52'd536870912;
parameter    ap_ST_fsm_pp0_stage30 = 52'd1073741824;
parameter    ap_ST_fsm_pp0_stage31 = 52'd2147483648;
parameter    ap_ST_fsm_pp0_stage32 = 52'd4294967296;
parameter    ap_ST_fsm_pp0_stage33 = 52'd8589934592;
parameter    ap_ST_fsm_pp0_stage34 = 52'd17179869184;
parameter    ap_ST_fsm_pp0_stage35 = 52'd34359738368;
parameter    ap_ST_fsm_pp0_stage36 = 52'd68719476736;
parameter    ap_ST_fsm_pp0_stage37 = 52'd137438953472;
parameter    ap_ST_fsm_pp0_stage38 = 52'd274877906944;
parameter    ap_ST_fsm_pp0_stage39 = 52'd549755813888;
parameter    ap_ST_fsm_pp0_stage40 = 52'd1099511627776;
parameter    ap_ST_fsm_pp0_stage41 = 52'd2199023255552;
parameter    ap_ST_fsm_pp0_stage42 = 52'd4398046511104;
parameter    ap_ST_fsm_pp0_stage43 = 52'd8796093022208;
parameter    ap_ST_fsm_pp0_stage44 = 52'd17592186044416;
parameter    ap_ST_fsm_pp0_stage45 = 52'd35184372088832;
parameter    ap_ST_fsm_pp0_stage46 = 52'd70368744177664;
parameter    ap_ST_fsm_pp0_stage47 = 52'd140737488355328;
parameter    ap_ST_fsm_pp0_stage48 = 52'd281474976710656;
parameter    ap_ST_fsm_pp0_stage49 = 52'd562949953421312;
parameter    ap_ST_fsm_pp0_stage50 = 52'd1125899906842624;
parameter    ap_ST_fsm_pp0_stage51 = 52'd2251799813685248;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] sha256ctx_state_5_0;
input  [31:0] sha256ctx_state_4_0;
input  [31:0] sha256ctx_state_3_0;
input  [31:0] sha256ctx_state_2_0;
input  [31:0] sha256ctx_state_1_0;
input  [31:0] sha256ctx_state_0_0;
input  [31:0] sha256ctx_state_6_0;
input  [31:0] sha256ctx_state_7_0;
input  [31:0] p_lcssa175179;
input  [31:0] p_lcssa174177;
input  [31:0] p_lcssa140;
input  [7:0] seg_buf_96_reload;
input  [7:0] seg_buf_95_reload;
input  [7:0] seg_buf_94_reload;
input  [7:0] seg_buf_93_reload;
input  [7:0] seg_buf_92_reload;
input  [7:0] seg_buf_91_reload;
input  [7:0] seg_buf_90_reload;
input  [7:0] seg_buf_89_reload;
input  [7:0] seg_buf_88_reload;
input  [7:0] seg_buf_87_reload;
input  [7:0] seg_buf_86_reload;
input  [7:0] seg_buf_85_reload;
input  [7:0] seg_buf_84_reload;
input  [7:0] seg_buf_83_reload;
input  [7:0] seg_buf_82_reload;
input  [7:0] seg_buf_81_reload;
input  [7:0] seg_buf_80_reload;
input  [7:0] seg_buf_79_reload;
input  [7:0] seg_buf_78_reload;
input  [7:0] seg_buf_77_reload;
input  [7:0] seg_buf_76_reload;
input  [7:0] seg_buf_75_reload;
input  [7:0] seg_buf_74_reload;
input  [7:0] seg_buf_73_reload;
input  [7:0] seg_buf_72_reload;
input  [7:0] seg_buf_71_reload;
input  [7:0] seg_buf_70_reload;
input  [7:0] seg_buf_69_reload;
input  [7:0] seg_buf_68_reload;
input  [7:0] seg_buf_67_reload;
input  [7:0] seg_buf_66_reload;
input  [7:0] seg_buf_65_reload;
input  [7:0] seg_buf_32_reload;
input  [7:0] seg_buf_33_reload;
input  [7:0] seg_buf_34_reload;
input  [7:0] seg_buf_35_reload;
input  [7:0] seg_buf_36_reload;
input  [7:0] seg_buf_37_reload;
input  [7:0] seg_buf_38_reload;
input  [7:0] seg_buf_39_reload;
input  [7:0] seg_buf_40_reload;
input  [7:0] seg_buf_41_reload;
input  [7:0] seg_buf_42_reload;
input  [7:0] seg_buf_43_reload;
input  [7:0] seg_buf_44_reload;
input  [7:0] seg_buf_45_reload;
input  [7:0] seg_buf_46_reload;
input  [7:0] seg_buf_47_reload;
input  [7:0] seg_buf_48_reload;
input  [7:0] seg_buf_49_reload;
input  [7:0] seg_buf_50_reload;
input  [7:0] seg_buf_51_reload;
input  [7:0] seg_buf_52_reload;
input  [7:0] seg_buf_53_reload;
input  [7:0] seg_buf_54_reload;
input  [7:0] seg_buf_55_reload;
input  [7:0] seg_buf_56_reload;
input  [7:0] seg_buf_57_reload;
input  [7:0] seg_buf_58_reload;
input  [7:0] seg_buf_59_reload;
input  [7:0] seg_buf_60_reload;
input  [7:0] seg_buf_61_reload;
input  [7:0] seg_buf_62_reload;
input  [7:0] seg_buf_63_reload;
output  [5:0] sha256ctx_data_address0;
output   sha256ctx_data_ce0;
output   sha256ctx_data_we0;
output  [7:0] sha256ctx_data_d0;
input  [7:0] sha256ctx_data_q0;
output  [5:0] sha256ctx_data_address1;
output   sha256ctx_data_ce1;
input  [7:0] sha256ctx_data_q1;
output  [31:0] sha256ctx_state_5_1_out;
output   sha256ctx_state_5_1_out_ap_vld;
output  [31:0] sha256ctx_state_4_1_out;
output   sha256ctx_state_4_1_out_ap_vld;
output  [31:0] sha256ctx_state_3_1_out;
output   sha256ctx_state_3_1_out_ap_vld;
output  [31:0] sha256ctx_state_2_1_out;
output   sha256ctx_state_2_1_out_ap_vld;
output  [31:0] sha256ctx_state_1_1_out;
output   sha256ctx_state_1_1_out_ap_vld;
output  [31:0] sha256ctx_state_0_1_out;
output   sha256ctx_state_0_1_out_ap_vld;
output  [31:0] sha256ctx_state_6_1_out;
output   sha256ctx_state_6_1_out_ap_vld;
output  [31:0] sha256ctx_state_7_1_out;
output   sha256ctx_state_7_1_out_ap_vld;
output  [31:0] sha256ctx_bitlen_1_out;
output   sha256ctx_bitlen_1_out_ap_vld;
output  [31:0] sha256ctx_bitlen_0_out;
output   sha256ctx_bitlen_0_out_ap_vld;
output  [31:0] sha256ctx_datalen_out;
output   sha256ctx_datalen_out_ap_vld;

reg ap_idle;
reg[5:0] sha256ctx_data_address0;
reg sha256ctx_data_ce0;
reg sha256ctx_data_we0;
reg sha256ctx_data_ce1;
reg sha256ctx_state_5_1_out_ap_vld;
reg sha256ctx_state_4_1_out_ap_vld;
reg sha256ctx_state_3_1_out_ap_vld;
reg sha256ctx_state_2_1_out_ap_vld;
reg sha256ctx_state_1_1_out_ap_vld;
reg sha256ctx_state_0_1_out_ap_vld;
reg sha256ctx_state_6_1_out_ap_vld;
reg sha256ctx_state_7_1_out_ap_vld;
reg sha256ctx_bitlen_1_out_ap_vld;
reg sha256ctx_bitlen_0_out_ap_vld;
reg sha256ctx_datalen_out_ap_vld;

(* fsm_encoding = "none" *) reg   [51:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_subdone;
wire   [0:0] icmp_ln90_fu_881_p2;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage51;
wire    ap_block_state52_pp0_stage51_iter0;
wire    ap_block_pp0_stage51_subdone;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state53_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln90_reg_1604;
wire    ap_block_pp0_stage1_11001;
wire   [6:0] add_ln90_fu_887_p2;
reg   [6:0] add_ln90_reg_1608;
wire   [0:0] icmp_ln93_fu_978_p2;
reg   [0:0] icmp_ln93_reg_1613;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_pp0_stage2_11001;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage0_subdone;
wire    grp_sha256_transform_fu_804_ap_start;
wire    grp_sha256_transform_fu_804_ap_done;
wire    grp_sha256_transform_fu_804_ap_idle;
wire    grp_sha256_transform_fu_804_ap_ready;
wire   [5:0] grp_sha256_transform_fu_804_data_address0;
wire    grp_sha256_transform_fu_804_data_ce0;
wire   [5:0] grp_sha256_transform_fu_804_data_address1;
wire    grp_sha256_transform_fu_804_data_ce1;
wire   [31:0] grp_sha256_transform_fu_804_ap_return_0;
wire   [31:0] grp_sha256_transform_fu_804_ap_return_1;
wire   [31:0] grp_sha256_transform_fu_804_ap_return_2;
wire   [31:0] grp_sha256_transform_fu_804_ap_return_3;
wire   [31:0] grp_sha256_transform_fu_804_ap_return_4;
wire   [31:0] grp_sha256_transform_fu_804_ap_return_5;
wire   [31:0] grp_sha256_transform_fu_804_ap_return_6;
wire   [31:0] grp_sha256_transform_fu_804_ap_return_7;
reg    grp_sha256_transform_fu_804_ap_start_reg;
reg    ap_predicate_op182_call_state3_state2;
wire    ap_block_pp0_stage2;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_pp0_stage4;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_pp0_stage5;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_pp0_stage6;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_pp0_stage7;
wire    ap_CS_fsm_pp0_stage8;
wire    ap_block_pp0_stage8;
wire    ap_CS_fsm_pp0_stage9;
wire    ap_block_pp0_stage9;
wire    ap_CS_fsm_pp0_stage10;
wire    ap_block_pp0_stage10;
wire    ap_CS_fsm_pp0_stage11;
wire    ap_block_pp0_stage11;
wire    ap_CS_fsm_pp0_stage12;
wire    ap_block_pp0_stage12;
wire    ap_CS_fsm_pp0_stage13;
wire    ap_block_pp0_stage13;
wire    ap_CS_fsm_pp0_stage14;
wire    ap_block_pp0_stage14;
wire    ap_CS_fsm_pp0_stage15;
wire    ap_block_pp0_stage15;
wire    ap_CS_fsm_pp0_stage16;
wire    ap_block_pp0_stage16;
wire    ap_CS_fsm_pp0_stage17;
wire    ap_block_pp0_stage17;
wire    ap_CS_fsm_pp0_stage18;
wire    ap_block_pp0_stage18;
wire    ap_CS_fsm_pp0_stage19;
wire    ap_block_pp0_stage19;
wire    ap_CS_fsm_pp0_stage20;
wire    ap_block_pp0_stage20;
wire    ap_CS_fsm_pp0_stage21;
wire    ap_block_pp0_stage21;
wire    ap_CS_fsm_pp0_stage22;
wire    ap_block_pp0_stage22;
wire    ap_CS_fsm_pp0_stage23;
wire    ap_block_pp0_stage23;
wire    ap_CS_fsm_pp0_stage24;
wire    ap_block_pp0_stage24;
wire    ap_CS_fsm_pp0_stage25;
wire    ap_block_pp0_stage25;
wire    ap_CS_fsm_pp0_stage26;
wire    ap_block_pp0_stage26;
wire    ap_CS_fsm_pp0_stage27;
wire    ap_block_pp0_stage27;
wire    ap_CS_fsm_pp0_stage28;
wire    ap_block_pp0_stage28;
wire    ap_CS_fsm_pp0_stage29;
wire    ap_block_pp0_stage29;
wire    ap_CS_fsm_pp0_stage30;
wire    ap_block_pp0_stage30;
wire    ap_CS_fsm_pp0_stage31;
wire    ap_block_pp0_stage31;
wire    ap_CS_fsm_pp0_stage32;
wire    ap_block_pp0_stage32;
wire    ap_CS_fsm_pp0_stage33;
wire    ap_block_pp0_stage33;
wire    ap_CS_fsm_pp0_stage34;
wire    ap_block_pp0_stage34;
wire   [63:0] zext_ln91_fu_967_p1;
wire    ap_block_pp0_stage1;
reg   [31:0] sha256ctx_datalen_fu_216;
wire   [31:0] add_ln92_fu_972_p2;
wire    ap_loop_init;
reg   [6:0] i_5_fu_220;
reg   [31:0] sha256ctx_bitlen_0_fu_224;
wire   [31:0] add_ln95_1_fu_1047_p2;
reg   [31:0] sha256ctx_bitlen_1_fu_228;
wire   [31:0] select_ln95_fu_1039_p3;
reg   [31:0] sha256ctx_state_7_1_fu_232;
reg   [31:0] sha256ctx_state_6_1_fu_236;
reg   [31:0] sha256ctx_state_0_1_fu_240;
reg   [31:0] sha256ctx_state_1_1_fu_244;
reg   [31:0] sha256ctx_state_2_1_fu_248;
reg   [31:0] sha256ctx_state_3_1_fu_252;
reg   [31:0] sha256ctx_state_4_1_fu_256;
reg   [31:0] sha256ctx_state_5_1_fu_260;
wire    ap_block_pp0_stage1_01001;
wire   [7:0] tmp_1_fu_896_p66;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln95_fu_1027_p2;
wire   [31:0] add_ln95_fu_1033_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [51:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_state5_pp0_stage4_iter0;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_state6_pp0_stage5_iter0;
wire    ap_block_pp0_stage5_subdone;
wire    ap_block_state7_pp0_stage6_iter0;
wire    ap_block_pp0_stage6_subdone;
wire    ap_block_state8_pp0_stage7_iter0;
wire    ap_block_pp0_stage7_subdone;
wire    ap_block_state9_pp0_stage8_iter0;
wire    ap_block_pp0_stage8_subdone;
wire    ap_block_state10_pp0_stage9_iter0;
wire    ap_block_pp0_stage9_subdone;
wire    ap_block_state11_pp0_stage10_iter0;
wire    ap_block_pp0_stage10_subdone;
wire    ap_block_state12_pp0_stage11_iter0;
wire    ap_block_pp0_stage11_subdone;
wire    ap_block_state13_pp0_stage12_iter0;
wire    ap_block_pp0_stage12_subdone;
wire    ap_block_state14_pp0_stage13_iter0;
wire    ap_block_pp0_stage13_subdone;
wire    ap_block_state15_pp0_stage14_iter0;
wire    ap_block_pp0_stage14_subdone;
wire    ap_block_state16_pp0_stage15_iter0;
wire    ap_block_pp0_stage15_subdone;
wire    ap_block_state17_pp0_stage16_iter0;
wire    ap_block_pp0_stage16_subdone;
wire    ap_block_state18_pp0_stage17_iter0;
wire    ap_block_pp0_stage17_subdone;
wire    ap_block_state19_pp0_stage18_iter0;
wire    ap_block_pp0_stage18_subdone;
wire    ap_block_state20_pp0_stage19_iter0;
wire    ap_block_pp0_stage19_subdone;
wire    ap_block_state21_pp0_stage20_iter0;
wire    ap_block_pp0_stage20_subdone;
wire    ap_block_state22_pp0_stage21_iter0;
wire    ap_block_pp0_stage21_subdone;
wire    ap_block_state23_pp0_stage22_iter0;
wire    ap_block_pp0_stage22_subdone;
wire    ap_block_state24_pp0_stage23_iter0;
wire    ap_block_pp0_stage23_subdone;
wire    ap_block_state25_pp0_stage24_iter0;
wire    ap_block_pp0_stage24_subdone;
wire    ap_block_state26_pp0_stage25_iter0;
wire    ap_block_pp0_stage25_subdone;
wire    ap_block_state27_pp0_stage26_iter0;
wire    ap_block_pp0_stage26_subdone;
wire    ap_block_state28_pp0_stage27_iter0;
wire    ap_block_pp0_stage27_subdone;
wire    ap_block_state29_pp0_stage28_iter0;
wire    ap_block_pp0_stage28_subdone;
wire    ap_block_state30_pp0_stage29_iter0;
wire    ap_block_pp0_stage29_subdone;
wire    ap_block_state31_pp0_stage30_iter0;
wire    ap_block_pp0_stage30_subdone;
wire    ap_block_state32_pp0_stage31_iter0;
wire    ap_block_pp0_stage31_subdone;
wire    ap_block_state33_pp0_stage32_iter0;
wire    ap_block_pp0_stage32_subdone;
wire    ap_block_state34_pp0_stage33_iter0;
wire    ap_block_pp0_stage33_subdone;
wire    ap_block_state35_pp0_stage34_iter0;
wire    ap_block_pp0_stage34_subdone;
wire    ap_block_state36_pp0_stage35_iter0;
wire    ap_block_pp0_stage35_subdone;
wire    ap_block_state37_pp0_stage36_iter0;
wire    ap_block_pp0_stage36_subdone;
wire    ap_block_state38_pp0_stage37_iter0;
wire    ap_block_pp0_stage37_subdone;
wire    ap_block_state39_pp0_stage38_iter0;
wire    ap_block_pp0_stage38_subdone;
wire    ap_block_state40_pp0_stage39_iter0;
wire    ap_block_pp0_stage39_subdone;
wire    ap_block_state41_pp0_stage40_iter0;
wire    ap_block_pp0_stage40_subdone;
wire    ap_block_state42_pp0_stage41_iter0;
wire    ap_block_pp0_stage41_subdone;
wire    ap_block_state43_pp0_stage42_iter0;
wire    ap_block_pp0_stage42_subdone;
wire    ap_block_state44_pp0_stage43_iter0;
wire    ap_block_pp0_stage43_subdone;
wire    ap_block_state45_pp0_stage44_iter0;
wire    ap_block_pp0_stage44_subdone;
wire    ap_block_state46_pp0_stage45_iter0;
wire    ap_block_pp0_stage45_subdone;
wire    ap_block_state47_pp0_stage46_iter0;
wire    ap_block_pp0_stage46_subdone;
wire    ap_block_state48_pp0_stage47_iter0;
wire    ap_block_pp0_stage47_subdone;
wire    ap_block_state49_pp0_stage48_iter0;
wire    ap_block_pp0_stage48_subdone;
wire    ap_block_state50_pp0_stage49_iter0;
wire    ap_block_pp0_stage49_subdone;
wire    ap_block_state51_pp0_stage50_iter0;
wire    ap_block_pp0_stage50_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_1441;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 52'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 grp_sha256_transform_fu_804_ap_start_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

sha256_sha256_transform grp_sha256_transform_fu_804(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_sha256_transform_fu_804_ap_start),
    .ap_done(grp_sha256_transform_fu_804_ap_done),
    .ap_idle(grp_sha256_transform_fu_804_ap_idle),
    .ap_ready(grp_sha256_transform_fu_804_ap_ready),
    .ap_ce(1'b1),
    .ctx_state_0_read(sha256ctx_state_0_1_fu_240),
    .ctx_state_1_read(sha256ctx_state_1_1_fu_244),
    .ctx_state_2_read(sha256ctx_state_2_1_fu_248),
    .ctx_state_3_read(sha256ctx_state_3_1_fu_252),
    .ctx_state_4_read(sha256ctx_state_4_1_fu_256),
    .ctx_state_5_read(sha256ctx_state_5_1_fu_260),
    .ctx_state_6_read(sha256ctx_state_6_1_fu_236),
    .ctx_state_7_read(sha256ctx_state_7_1_fu_232),
    .data_address0(grp_sha256_transform_fu_804_data_address0),
    .data_ce0(grp_sha256_transform_fu_804_data_ce0),
    .data_q0(sha256ctx_data_q0),
    .data_address1(grp_sha256_transform_fu_804_data_address1),
    .data_ce1(grp_sha256_transform_fu_804_data_ce1),
    .data_q1(sha256ctx_data_q1),
    .ap_return_0(grp_sha256_transform_fu_804_ap_return_0),
    .ap_return_1(grp_sha256_transform_fu_804_ap_return_1),
    .ap_return_2(grp_sha256_transform_fu_804_ap_return_2),
    .ap_return_3(grp_sha256_transform_fu_804_ap_return_3),
    .ap_return_4(grp_sha256_transform_fu_804_ap_return_4),
    .ap_return_5(grp_sha256_transform_fu_804_ap_return_5),
    .ap_return_6(grp_sha256_transform_fu_804_ap_return_6),
    .ap_return_7(grp_sha256_transform_fu_804_ap_return_7)
);

sha256_mux_647_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 8 ),
    .din5_WIDTH( 8 ),
    .din6_WIDTH( 8 ),
    .din7_WIDTH( 8 ),
    .din8_WIDTH( 8 ),
    .din9_WIDTH( 8 ),
    .din10_WIDTH( 8 ),
    .din11_WIDTH( 8 ),
    .din12_WIDTH( 8 ),
    .din13_WIDTH( 8 ),
    .din14_WIDTH( 8 ),
    .din15_WIDTH( 8 ),
    .din16_WIDTH( 8 ),
    .din17_WIDTH( 8 ),
    .din18_WIDTH( 8 ),
    .din19_WIDTH( 8 ),
    .din20_WIDTH( 8 ),
    .din21_WIDTH( 8 ),
    .din22_WIDTH( 8 ),
    .din23_WIDTH( 8 ),
    .din24_WIDTH( 8 ),
    .din25_WIDTH( 8 ),
    .din26_WIDTH( 8 ),
    .din27_WIDTH( 8 ),
    .din28_WIDTH( 8 ),
    .din29_WIDTH( 8 ),
    .din30_WIDTH( 8 ),
    .din31_WIDTH( 8 ),
    .din32_WIDTH( 8 ),
    .din33_WIDTH( 8 ),
    .din34_WIDTH( 8 ),
    .din35_WIDTH( 8 ),
    .din36_WIDTH( 8 ),
    .din37_WIDTH( 8 ),
    .din38_WIDTH( 8 ),
    .din39_WIDTH( 8 ),
    .din40_WIDTH( 8 ),
    .din41_WIDTH( 8 ),
    .din42_WIDTH( 8 ),
    .din43_WIDTH( 8 ),
    .din44_WIDTH( 8 ),
    .din45_WIDTH( 8 ),
    .din46_WIDTH( 8 ),
    .din47_WIDTH( 8 ),
    .din48_WIDTH( 8 ),
    .din49_WIDTH( 8 ),
    .din50_WIDTH( 8 ),
    .din51_WIDTH( 8 ),
    .din52_WIDTH( 8 ),
    .din53_WIDTH( 8 ),
    .din54_WIDTH( 8 ),
    .din55_WIDTH( 8 ),
    .din56_WIDTH( 8 ),
    .din57_WIDTH( 8 ),
    .din58_WIDTH( 8 ),
    .din59_WIDTH( 8 ),
    .din60_WIDTH( 8 ),
    .din61_WIDTH( 8 ),
    .din62_WIDTH( 8 ),
    .din63_WIDTH( 8 ),
    .din64_WIDTH( 7 ),
    .dout_WIDTH( 8 ))
mux_647_8_1_1_U139(
    .din0(seg_buf_96_reload),
    .din1(seg_buf_95_reload),
    .din2(seg_buf_94_reload),
    .din3(seg_buf_93_reload),
    .din4(seg_buf_92_reload),
    .din5(seg_buf_91_reload),
    .din6(seg_buf_90_reload),
    .din7(seg_buf_89_reload),
    .din8(seg_buf_88_reload),
    .din9(seg_buf_87_reload),
    .din10(seg_buf_86_reload),
    .din11(seg_buf_85_reload),
    .din12(seg_buf_84_reload),
    .din13(seg_buf_83_reload),
    .din14(seg_buf_82_reload),
    .din15(seg_buf_81_reload),
    .din16(seg_buf_80_reload),
    .din17(seg_buf_79_reload),
    .din18(seg_buf_78_reload),
    .din19(seg_buf_77_reload),
    .din20(seg_buf_76_reload),
    .din21(seg_buf_75_reload),
    .din22(seg_buf_74_reload),
    .din23(seg_buf_73_reload),
    .din24(seg_buf_72_reload),
    .din25(seg_buf_71_reload),
    .din26(seg_buf_70_reload),
    .din27(seg_buf_69_reload),
    .din28(seg_buf_68_reload),
    .din29(seg_buf_67_reload),
    .din30(seg_buf_66_reload),
    .din31(seg_buf_65_reload),
    .din32(seg_buf_32_reload),
    .din33(seg_buf_33_reload),
    .din34(seg_buf_34_reload),
    .din35(seg_buf_35_reload),
    .din36(seg_buf_36_reload),
    .din37(seg_buf_37_reload),
    .din38(seg_buf_38_reload),
    .din39(seg_buf_39_reload),
    .din40(seg_buf_40_reload),
    .din41(seg_buf_41_reload),
    .din42(seg_buf_42_reload),
    .din43(seg_buf_43_reload),
    .din44(seg_buf_44_reload),
    .din45(seg_buf_45_reload),
    .din46(seg_buf_46_reload),
    .din47(seg_buf_47_reload),
    .din48(seg_buf_48_reload),
    .din49(seg_buf_49_reload),
    .din50(seg_buf_50_reload),
    .din51(seg_buf_51_reload),
    .din52(seg_buf_52_reload),
    .din53(seg_buf_53_reload),
    .din54(seg_buf_54_reload),
    .din55(seg_buf_55_reload),
    .din56(seg_buf_56_reload),
    .din57(seg_buf_57_reload),
    .din58(seg_buf_58_reload),
    .din59(seg_buf_59_reload),
    .din60(seg_buf_60_reload),
    .din61(seg_buf_61_reload),
    .din62(seg_buf_62_reload),
    .din63(seg_buf_63_reload),
    .din64(i_5_fu_220),
    .dout(tmp_1_fu_896_p66)
);

sha256_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage51_subdone) & (1'b1 == ap_CS_fsm_pp0_stage51))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_sha256_transform_fu_804_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_predicate_op182_call_state3_state2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_sha256_transform_fu_804_ap_start_reg <= 1'b1;
        end else if ((grp_sha256_transform_fu_804_ap_ready == 1'b1)) begin
            grp_sha256_transform_fu_804_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_5_fu_220 <= 7'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln90_reg_1604 == 1'd0))) begin
            i_5_fu_220 <= add_ln90_reg_1608;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sha256ctx_bitlen_0_fu_224 <= p_lcssa174177;
    end else if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        sha256ctx_bitlen_0_fu_224 <= add_ln95_1_fu_1047_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sha256ctx_bitlen_1_fu_228 <= p_lcssa175179;
    end else if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        sha256ctx_bitlen_1_fu_228 <= select_ln95_fu_1039_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sha256ctx_datalen_fu_216 <= p_lcssa140;
    end else if (((icmp_ln90_fu_881_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_fu_978_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        sha256ctx_datalen_fu_216 <= add_ln92_fu_972_p2;
    end else if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        sha256ctx_datalen_fu_216 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            sha256ctx_state_0_1_fu_240 <= sha256ctx_state_0_0;
        end else if ((1'b1 == ap_condition_1441)) begin
            sha256ctx_state_0_1_fu_240 <= grp_sha256_transform_fu_804_ap_return_0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            sha256ctx_state_1_1_fu_244 <= sha256ctx_state_1_0;
        end else if ((1'b1 == ap_condition_1441)) begin
            sha256ctx_state_1_1_fu_244 <= grp_sha256_transform_fu_804_ap_return_1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            sha256ctx_state_2_1_fu_248 <= sha256ctx_state_2_0;
        end else if ((1'b1 == ap_condition_1441)) begin
            sha256ctx_state_2_1_fu_248 <= grp_sha256_transform_fu_804_ap_return_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            sha256ctx_state_3_1_fu_252 <= sha256ctx_state_3_0;
        end else if ((1'b1 == ap_condition_1441)) begin
            sha256ctx_state_3_1_fu_252 <= grp_sha256_transform_fu_804_ap_return_3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            sha256ctx_state_4_1_fu_256 <= sha256ctx_state_4_0;
        end else if ((1'b1 == ap_condition_1441)) begin
            sha256ctx_state_4_1_fu_256 <= grp_sha256_transform_fu_804_ap_return_4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            sha256ctx_state_5_1_fu_260 <= sha256ctx_state_5_0;
        end else if ((1'b1 == ap_condition_1441)) begin
            sha256ctx_state_5_1_fu_260 <= grp_sha256_transform_fu_804_ap_return_5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            sha256ctx_state_6_1_fu_236 <= sha256ctx_state_6_0;
        end else if ((1'b1 == ap_condition_1441)) begin
            sha256ctx_state_6_1_fu_236 <= grp_sha256_transform_fu_804_ap_return_6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            sha256ctx_state_7_1_fu_232 <= sha256ctx_state_7_0;
        end else if ((1'b1 == ap_condition_1441)) begin
            sha256ctx_state_7_1_fu_232 <= grp_sha256_transform_fu_804_ap_return_7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln90_reg_1608 <= add_ln90_fu_887_p2;
        icmp_ln90_reg_1604 <= icmp_ln90_fu_881_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln90_fu_881_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        icmp_ln93_reg_1613 <= icmp_ln93_fu_978_p2;
    end
end

always @ (*) begin
    if (((icmp_ln90_fu_881_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage51_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage51))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln90_fu_881_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        sha256ctx_bitlen_0_out_ap_vld = 1'b1;
    end else begin
        sha256ctx_bitlen_0_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln90_fu_881_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        sha256ctx_bitlen_1_out_ap_vld = 1'b1;
    end else begin
        sha256ctx_bitlen_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        sha256ctx_data_address0 = zext_ln91_fu_967_p1;
    end else if ((((1'b0 == ap_block_pp0_stage34) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage34)) | ((1'b0 == ap_block_pp0_stage33) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage33)) | ((1'b0 == ap_block_pp0_stage32) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage32)) | ((1'b0 == ap_block_pp0_stage31) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage31)) | ((1'b0 == ap_block_pp0_stage30) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage30)) | ((1'b0 == ap_block_pp0_stage29) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage29)) | ((1'b0 == ap_block_pp0_stage28) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage28)) | ((1'b0 == ap_block_pp0_stage27) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage27)) | ((1'b0 == ap_block_pp0_stage26) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage26)) | ((1'b0 == ap_block_pp0_stage25) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage25)) | ((1'b0 == ap_block_pp0_stage24) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage24)) | ((1'b0 == ap_block_pp0_stage23) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage23)) | ((1'b0 == ap_block_pp0_stage22) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage22)) | ((1'b0 == ap_block_pp0_stage21) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage21)) | ((1'b0 == ap_block_pp0_stage20) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage20)) | ((1'b0 == ap_block_pp0_stage19) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage19)) | ((1'b0 == ap_block_pp0_stage18) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage18)) | ((1'b0 == ap_block_pp0_stage17) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage17)) | ((1'b0 == ap_block_pp0_stage16) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage16)) | ((1'b0 == ap_block_pp0_stage15) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage15)) | ((1'b0 == ap_block_pp0_stage14) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage14)) | ((1'b0 == ap_block_pp0_stage13) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage13)) | ((1'b0 == ap_block_pp0_stage12) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage12)) | ((1'b0 == ap_block_pp0_stage11) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage11)) | ((1'b0 == ap_block_pp0_stage10) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage10)) | ((1'b0 == ap_block_pp0_stage9) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage9)) | ((1'b0 == ap_block_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage8)) | ((1'b0 == ap_block_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b0 == ap_block_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b0 == ap_block_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        sha256ctx_data_address0 = grp_sha256_transform_fu_804_data_address0;
    end else begin
        sha256ctx_data_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        sha256ctx_data_ce0 = 1'b1;
    end else if ((((1'b0 == ap_block_pp0_stage34) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage34)) | ((1'b0 == ap_block_pp0_stage33) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage33)) | ((1'b0 == ap_block_pp0_stage32) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage32)) | ((1'b0 == ap_block_pp0_stage31) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage31)) | ((1'b0 == ap_block_pp0_stage30) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage30)) | ((1'b0 == ap_block_pp0_stage29) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage29)) | ((1'b0 == ap_block_pp0_stage28) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage28)) | ((1'b0 == ap_block_pp0_stage27) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage27)) | ((1'b0 == ap_block_pp0_stage26) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage26)) | ((1'b0 == ap_block_pp0_stage25) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage25)) | ((1'b0 == ap_block_pp0_stage24) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage24)) | ((1'b0 == ap_block_pp0_stage23) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage23)) | ((1'b0 == ap_block_pp0_stage22) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage22)) | ((1'b0 == ap_block_pp0_stage21) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage21)) | ((1'b0 == ap_block_pp0_stage20) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage20)) | ((1'b0 == ap_block_pp0_stage19) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage19)) | ((1'b0 == ap_block_pp0_stage18) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage18)) | ((1'b0 == ap_block_pp0_stage17) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage17)) | ((1'b0 == ap_block_pp0_stage16) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage16)) | ((1'b0 == ap_block_pp0_stage15) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage15)) | ((1'b0 == ap_block_pp0_stage14) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage14)) | ((1'b0 == ap_block_pp0_stage13) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage13)) | ((1'b0 == ap_block_pp0_stage12) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage12)) | ((1'b0 == ap_block_pp0_stage11) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage11)) | ((1'b0 == ap_block_pp0_stage10) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage10)) | ((1'b0 == ap_block_pp0_stage9) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage9)) | ((1'b0 == ap_block_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage8)) | ((1'b0 == ap_block_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b0 == ap_block_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b0 == ap_block_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        sha256ctx_data_ce0 = grp_sha256_transform_fu_804_data_ce0;
    end else begin
        sha256ctx_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage34) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage34)) | ((1'b0 == ap_block_pp0_stage33) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage33)) | ((1'b0 == ap_block_pp0_stage32) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage32)) | ((1'b0 == ap_block_pp0_stage31) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage31)) | ((1'b0 == ap_block_pp0_stage30) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage30)) | ((1'b0 == ap_block_pp0_stage29) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage29)) | ((1'b0 == ap_block_pp0_stage28) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage28)) | ((1'b0 == ap_block_pp0_stage27) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage27)) | ((1'b0 == ap_block_pp0_stage26) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage26)) | ((1'b0 == ap_block_pp0_stage25) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage25)) | ((1'b0 == ap_block_pp0_stage24) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage24)) | ((1'b0 == ap_block_pp0_stage23) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage23)) | ((1'b0 == ap_block_pp0_stage22) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage22)) | ((1'b0 == ap_block_pp0_stage21) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage21)) | ((1'b0 == ap_block_pp0_stage20) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage20)) | ((1'b0 == ap_block_pp0_stage19) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage19)) | ((1'b0 == ap_block_pp0_stage18) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage18)) | ((1'b0 == ap_block_pp0_stage17) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage17)) | ((1'b0 == ap_block_pp0_stage16) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage16)) | ((1'b0 == ap_block_pp0_stage15) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage15)) | ((1'b0 == ap_block_pp0_stage14) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage14)) | ((1'b0 == ap_block_pp0_stage13) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage13)) | ((1'b0 == ap_block_pp0_stage12) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage12)) | ((1'b0 == ap_block_pp0_stage11) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage11)) | ((1'b0 == ap_block_pp0_stage10) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage10)) | ((1'b0 == ap_block_pp0_stage9) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage9)) | ((1'b0 == ap_block_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage8)) | ((1'b0 == ap_block_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b0 == ap_block_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b0 == ap_block_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        sha256ctx_data_ce1 = grp_sha256_transform_fu_804_data_ce1;
    end else begin
        sha256ctx_data_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln90_fu_881_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        sha256ctx_data_we0 = 1'b1;
    end else begin
        sha256ctx_data_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln90_fu_881_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        sha256ctx_datalen_out_ap_vld = 1'b1;
    end else begin
        sha256ctx_datalen_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln90_fu_881_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        sha256ctx_state_0_1_out_ap_vld = 1'b1;
    end else begin
        sha256ctx_state_0_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln90_fu_881_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        sha256ctx_state_1_1_out_ap_vld = 1'b1;
    end else begin
        sha256ctx_state_1_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln90_fu_881_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        sha256ctx_state_2_1_out_ap_vld = 1'b1;
    end else begin
        sha256ctx_state_2_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln90_fu_881_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        sha256ctx_state_3_1_out_ap_vld = 1'b1;
    end else begin
        sha256ctx_state_3_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln90_fu_881_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        sha256ctx_state_4_1_out_ap_vld = 1'b1;
    end else begin
        sha256ctx_state_4_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln90_fu_881_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        sha256ctx_state_5_1_out_ap_vld = 1'b1;
    end else begin
        sha256ctx_state_5_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln90_fu_881_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        sha256ctx_state_6_1_out_ap_vld = 1'b1;
    end else begin
        sha256ctx_state_6_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln90_fu_881_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        sha256ctx_state_7_1_out_ap_vld = 1'b1;
    end else begin
        sha256ctx_state_7_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((1'b0 == ap_block_pp0_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        ap_ST_fsm_pp0_stage9 : begin
            if ((1'b0 == ap_block_pp0_stage9_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end
        end
        ap_ST_fsm_pp0_stage10 : begin
            if ((1'b0 == ap_block_pp0_stage10_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end
        end
        ap_ST_fsm_pp0_stage11 : begin
            if ((1'b0 == ap_block_pp0_stage11_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end
        end
        ap_ST_fsm_pp0_stage12 : begin
            if ((1'b0 == ap_block_pp0_stage12_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end
        end
        ap_ST_fsm_pp0_stage13 : begin
            if ((1'b0 == ap_block_pp0_stage13_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end
        end
        ap_ST_fsm_pp0_stage14 : begin
            if ((1'b0 == ap_block_pp0_stage14_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end
        end
        ap_ST_fsm_pp0_stage15 : begin
            if ((1'b0 == ap_block_pp0_stage15_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage15;
            end
        end
        ap_ST_fsm_pp0_stage16 : begin
            if ((1'b0 == ap_block_pp0_stage16_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage16;
            end
        end
        ap_ST_fsm_pp0_stage17 : begin
            if ((1'b0 == ap_block_pp0_stage17_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage17;
            end
        end
        ap_ST_fsm_pp0_stage18 : begin
            if ((1'b0 == ap_block_pp0_stage18_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage18;
            end
        end
        ap_ST_fsm_pp0_stage19 : begin
            if ((1'b0 == ap_block_pp0_stage19_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage19;
            end
        end
        ap_ST_fsm_pp0_stage20 : begin
            if ((1'b0 == ap_block_pp0_stage20_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage20;
            end
        end
        ap_ST_fsm_pp0_stage21 : begin
            if ((1'b0 == ap_block_pp0_stage21_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage21;
            end
        end
        ap_ST_fsm_pp0_stage22 : begin
            if ((1'b0 == ap_block_pp0_stage22_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage22;
            end
        end
        ap_ST_fsm_pp0_stage23 : begin
            if ((1'b0 == ap_block_pp0_stage23_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage23;
            end
        end
        ap_ST_fsm_pp0_stage24 : begin
            if ((1'b0 == ap_block_pp0_stage24_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage24;
            end
        end
        ap_ST_fsm_pp0_stage25 : begin
            if ((1'b0 == ap_block_pp0_stage25_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage25;
            end
        end
        ap_ST_fsm_pp0_stage26 : begin
            if ((1'b0 == ap_block_pp0_stage26_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage26;
            end
        end
        ap_ST_fsm_pp0_stage27 : begin
            if ((1'b0 == ap_block_pp0_stage27_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage27;
            end
        end
        ap_ST_fsm_pp0_stage28 : begin
            if ((1'b0 == ap_block_pp0_stage28_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage28;
            end
        end
        ap_ST_fsm_pp0_stage29 : begin
            if ((1'b0 == ap_block_pp0_stage29_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage29;
            end
        end
        ap_ST_fsm_pp0_stage30 : begin
            if ((1'b0 == ap_block_pp0_stage30_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage30;
            end
        end
        ap_ST_fsm_pp0_stage31 : begin
            if ((1'b0 == ap_block_pp0_stage31_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage31;
            end
        end
        ap_ST_fsm_pp0_stage32 : begin
            if ((1'b0 == ap_block_pp0_stage32_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage32;
            end
        end
        ap_ST_fsm_pp0_stage33 : begin
            if ((1'b0 == ap_block_pp0_stage33_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage33;
            end
        end
        ap_ST_fsm_pp0_stage34 : begin
            if ((1'b0 == ap_block_pp0_stage34_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage34;
            end
        end
        ap_ST_fsm_pp0_stage35 : begin
            if ((1'b0 == ap_block_pp0_stage35_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage35;
            end
        end
        ap_ST_fsm_pp0_stage36 : begin
            if ((1'b0 == ap_block_pp0_stage36_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage36;
            end
        end
        ap_ST_fsm_pp0_stage37 : begin
            if ((1'b0 == ap_block_pp0_stage37_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage38;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage37;
            end
        end
        ap_ST_fsm_pp0_stage38 : begin
            if ((1'b0 == ap_block_pp0_stage38_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage39;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage38;
            end
        end
        ap_ST_fsm_pp0_stage39 : begin
            if ((1'b0 == ap_block_pp0_stage39_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage40;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage39;
            end
        end
        ap_ST_fsm_pp0_stage40 : begin
            if ((1'b0 == ap_block_pp0_stage40_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage40;
            end
        end
        ap_ST_fsm_pp0_stage41 : begin
            if ((1'b0 == ap_block_pp0_stage41_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage42;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage41;
            end
        end
        ap_ST_fsm_pp0_stage42 : begin
            if ((1'b0 == ap_block_pp0_stage42_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage42;
            end
        end
        ap_ST_fsm_pp0_stage43 : begin
            if ((1'b0 == ap_block_pp0_stage43_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage43;
            end
        end
        ap_ST_fsm_pp0_stage44 : begin
            if ((1'b0 == ap_block_pp0_stage44_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage45;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage44;
            end
        end
        ap_ST_fsm_pp0_stage45 : begin
            if ((1'b0 == ap_block_pp0_stage45_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage46;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage45;
            end
        end
        ap_ST_fsm_pp0_stage46 : begin
            if ((1'b0 == ap_block_pp0_stage46_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage47;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage46;
            end
        end
        ap_ST_fsm_pp0_stage47 : begin
            if ((1'b0 == ap_block_pp0_stage47_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage48;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage47;
            end
        end
        ap_ST_fsm_pp0_stage48 : begin
            if ((1'b0 == ap_block_pp0_stage48_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage49;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage48;
            end
        end
        ap_ST_fsm_pp0_stage49 : begin
            if ((1'b0 == ap_block_pp0_stage49_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage50;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage49;
            end
        end
        ap_ST_fsm_pp0_stage50 : begin
            if ((1'b0 == ap_block_pp0_stage50_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage51;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage50;
            end
        end
        ap_ST_fsm_pp0_stage51 : begin
            if ((1'b0 == ap_block_pp0_stage51_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage51;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln90_fu_887_p2 = (i_5_fu_220 + 7'd1);

assign add_ln92_fu_972_p2 = (sha256ctx_datalen_fu_216 + 32'd1);

assign add_ln95_1_fu_1047_p2 = (sha256ctx_bitlen_0_fu_224 + 32'd512);

assign add_ln95_fu_1033_p2 = (sha256ctx_bitlen_1_fu_228 + 32'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage10 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp0_stage11 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp0_stage12 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_pp0_stage13 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_pp0_stage14 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_pp0_stage15 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_pp0_stage16 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_pp0_stage17 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_pp0_stage18 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_pp0_stage19 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage20 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_pp0_stage21 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_pp0_stage22 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_pp0_stage23 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_pp0_stage24 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_pp0_stage25 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_pp0_stage26 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_pp0_stage27 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_pp0_stage28 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_pp0_stage29 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage30 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_pp0_stage31 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_pp0_stage32 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_pp0_stage33 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_pp0_stage34 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage51 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage8 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp0_stage9 = ap_CS_fsm[32'd9];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage13 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage13_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage14 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage14_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage15 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage15_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage16 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage16_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage17 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage17_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage18 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage18_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage19 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage19_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage20 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage20_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage21 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage21_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage22 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage22_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage23 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage23_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage24 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage24_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage25 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage25_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage26 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage26_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage27 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage27_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage28 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage28_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage29 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage29_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage30 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage30_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage31 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage31_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage32 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage32_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage33 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage33_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage34 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage34_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage35_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage36_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage37_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage38_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage39_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage40_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage41_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage42_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage43_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage44_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage45_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage46_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage47_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage48_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage49_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage50_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage51_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage9_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage10_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage11_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage12_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage13_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage14_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage15_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage16_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage17_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage18_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage19_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage20_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage21_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage22_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage23_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage24_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage25_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage26_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage27_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage28_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage29_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage30_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage31_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage32_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage33_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp0_stage34_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp0_stage35_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp0_stage36_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp0_stage37_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp0_stage38_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp0_stage39_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp0_stage40_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp0_stage41_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp0_stage42_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp0_stage43_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp0_stage44_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp0_stage45_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state47_pp0_stage46_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state48_pp0_stage47_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp0_stage48_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state50_pp0_stage49_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp0_stage50_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state52_pp0_stage51_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state53_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage8_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_1441 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln93_reg_1613 == 1'd1) & (icmp_ln90_reg_1604 == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

always @ (*) begin
    ap_predicate_op182_call_state3_state2 = ((icmp_ln90_fu_881_p2 == 1'd0) & (icmp_ln93_fu_978_p2 == 1'd1));
end

assign grp_sha256_transform_fu_804_ap_start = grp_sha256_transform_fu_804_ap_start_reg;

assign icmp_ln90_fu_881_p2 = ((i_5_fu_220 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln93_fu_978_p2 = ((add_ln92_fu_972_p2 == 32'd64) ? 1'b1 : 1'b0);

assign icmp_ln95_fu_1027_p2 = ((sha256ctx_bitlen_0_fu_224 > 32'd4294966783) ? 1'b1 : 1'b0);

assign select_ln95_fu_1039_p3 = ((icmp_ln95_fu_1027_p2[0:0] == 1'b1) ? add_ln95_fu_1033_p2 : sha256ctx_bitlen_1_fu_228);

assign sha256ctx_bitlen_0_out = sha256ctx_bitlen_0_fu_224;

assign sha256ctx_bitlen_1_out = sha256ctx_bitlen_1_fu_228;

assign sha256ctx_data_address1 = grp_sha256_transform_fu_804_data_address1;

assign sha256ctx_data_d0 = tmp_1_fu_896_p66;

assign sha256ctx_datalen_out = sha256ctx_datalen_fu_216;

assign sha256ctx_state_0_1_out = sha256ctx_state_0_1_fu_240;

assign sha256ctx_state_1_1_out = sha256ctx_state_1_1_fu_244;

assign sha256ctx_state_2_1_out = sha256ctx_state_2_1_fu_248;

assign sha256ctx_state_3_1_out = sha256ctx_state_3_1_fu_252;

assign sha256ctx_state_4_1_out = sha256ctx_state_4_1_fu_256;

assign sha256ctx_state_5_1_out = sha256ctx_state_5_1_fu_260;

assign sha256ctx_state_6_1_out = sha256ctx_state_6_1_fu_236;

assign sha256ctx_state_7_1_out = sha256ctx_state_7_1_fu_232;

assign zext_ln91_fu_967_p1 = sha256ctx_datalen_fu_216;

endmodule //sha256_sha256_Pipeline_VITIS_LOOP_90_1
