// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module hmac_preProcessingOneTripForHMAC21 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        opad_buffer_0,
        opad_buffer_1,
        opad_buffer_2,
        opad_buffer_3,
        opad_buffer_4,
        opad_buffer_5,
        opad_buffer_6,
        opad_buffer_7,
        opad_buffer_8,
        opad_buffer_9,
        opad_buffer_10,
        opad_buffer_11,
        opad_buffer_12,
        opad_buffer_13,
        opad_buffer_14,
        opad_buffer_15,
        msg_key_strm167_dout,
        msg_key_strm167_num_data_valid,
        msg_key_strm167_fifo_cap,
        msg_key_strm167_empty_n,
        msg_key_strm167_read,
        len_strm168_dout,
        len_strm168_num_data_valid,
        len_strm168_fifo_cap,
        len_strm168_empty_n,
        len_strm168_read,
        blk_strm1_din,
        blk_strm1_num_data_valid,
        blk_strm1_fifo_cap,
        blk_strm1_full_n,
        blk_strm1_write
);

parameter    ap_ST_fsm_state1 = 49'd1;
parameter    ap_ST_fsm_state2 = 49'd2;
parameter    ap_ST_fsm_state3 = 49'd4;
parameter    ap_ST_fsm_state4 = 49'd8;
parameter    ap_ST_fsm_state5 = 49'd16;
parameter    ap_ST_fsm_state6 = 49'd32;
parameter    ap_ST_fsm_state7 = 49'd64;
parameter    ap_ST_fsm_state8 = 49'd128;
parameter    ap_ST_fsm_state9 = 49'd256;
parameter    ap_ST_fsm_state10 = 49'd512;
parameter    ap_ST_fsm_state11 = 49'd1024;
parameter    ap_ST_fsm_state12 = 49'd2048;
parameter    ap_ST_fsm_state13 = 49'd4096;
parameter    ap_ST_fsm_state14 = 49'd8192;
parameter    ap_ST_fsm_state15 = 49'd16384;
parameter    ap_ST_fsm_state16 = 49'd32768;
parameter    ap_ST_fsm_state17 = 49'd65536;
parameter    ap_ST_fsm_state18 = 49'd131072;
parameter    ap_ST_fsm_state19 = 49'd262144;
parameter    ap_ST_fsm_state20 = 49'd524288;
parameter    ap_ST_fsm_state21 = 49'd1048576;
parameter    ap_ST_fsm_state22 = 49'd2097152;
parameter    ap_ST_fsm_state23 = 49'd4194304;
parameter    ap_ST_fsm_state24 = 49'd8388608;
parameter    ap_ST_fsm_state25 = 49'd16777216;
parameter    ap_ST_fsm_state26 = 49'd33554432;
parameter    ap_ST_fsm_state27 = 49'd67108864;
parameter    ap_ST_fsm_state28 = 49'd134217728;
parameter    ap_ST_fsm_state29 = 49'd268435456;
parameter    ap_ST_fsm_state30 = 49'd536870912;
parameter    ap_ST_fsm_state31 = 49'd1073741824;
parameter    ap_ST_fsm_state32 = 49'd2147483648;
parameter    ap_ST_fsm_state33 = 49'd4294967296;
parameter    ap_ST_fsm_state34 = 49'd8589934592;
parameter    ap_ST_fsm_state35 = 49'd17179869184;
parameter    ap_ST_fsm_state36 = 49'd34359738368;
parameter    ap_ST_fsm_state37 = 49'd68719476736;
parameter    ap_ST_fsm_state38 = 49'd137438953472;
parameter    ap_ST_fsm_state39 = 49'd274877906944;
parameter    ap_ST_fsm_state40 = 49'd549755813888;
parameter    ap_ST_fsm_state41 = 49'd1099511627776;
parameter    ap_ST_fsm_state42 = 49'd2199023255552;
parameter    ap_ST_fsm_state43 = 49'd4398046511104;
parameter    ap_ST_fsm_state44 = 49'd8796093022208;
parameter    ap_ST_fsm_state45 = 49'd17592186044416;
parameter    ap_ST_fsm_state46 = 49'd35184372088832;
parameter    ap_ST_fsm_state47 = 49'd70368744177664;
parameter    ap_ST_fsm_state48 = 49'd140737488355328;
parameter    ap_ST_fsm_state49 = 49'd281474976710656;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
output  [63:0] opad_buffer_0;
output  [63:0] opad_buffer_1;
output  [63:0] opad_buffer_2;
output  [63:0] opad_buffer_3;
output  [63:0] opad_buffer_4;
output  [63:0] opad_buffer_5;
output  [62:0] opad_buffer_6;
output  [62:0] opad_buffer_7;
output  [62:0] opad_buffer_8;
output  [62:0] opad_buffer_9;
output  [62:0] opad_buffer_10;
output  [62:0] opad_buffer_11;
output  [62:0] opad_buffer_12;
output  [62:0] opad_buffer_13;
output  [62:0] opad_buffer_14;
output  [62:0] opad_buffer_15;
input  [511:0] msg_key_strm167_dout;
input  [5:0] msg_key_strm167_num_data_valid;
input  [5:0] msg_key_strm167_fifo_cap;
input   msg_key_strm167_empty_n;
output   msg_key_strm167_read;
input  [39:0] len_strm168_dout;
input  [5:0] len_strm168_num_data_valid;
input  [5:0] len_strm168_fifo_cap;
input   len_strm168_empty_n;
output   len_strm168_read;
output  [64:0] blk_strm1_din;
input  [7:0] blk_strm1_num_data_valid;
input  [7:0] blk_strm1_fifo_cap;
input   blk_strm1_full_n;
output   blk_strm1_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg[63:0] opad_buffer_0;
reg[63:0] opad_buffer_1;
reg[63:0] opad_buffer_2;
reg[63:0] opad_buffer_3;
reg[63:0] opad_buffer_4;
reg[63:0] opad_buffer_5;
reg[62:0] opad_buffer_6;
reg[62:0] opad_buffer_7;
reg[62:0] opad_buffer_8;
reg[62:0] opad_buffer_9;
reg[62:0] opad_buffer_10;
reg[62:0] opad_buffer_11;
reg[62:0] opad_buffer_12;
reg[62:0] opad_buffer_13;
reg[62:0] opad_buffer_14;
reg[62:0] opad_buffer_15;
reg msg_key_strm167_read;
reg len_strm168_read;
reg[64:0] blk_strm1_din;
reg blk_strm1_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [48:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    msg_key_strm167_blk_n;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state28;
reg    len_strm168_blk_n;
reg    blk_strm1_blk_n;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state36;
wire    ap_CS_fsm_state37;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state39;
wire    ap_CS_fsm_state40;
wire    ap_CS_fsm_state41;
wire    ap_CS_fsm_state42;
wire    ap_CS_fsm_state43;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state45;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state33;
wire   [0:0] icmp_ln1065_2_fu_960_p2;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state48;
wire    ap_CS_fsm_state49;
reg   [511:0] reg_520;
reg   [63:0] reg_525;
reg   [63:0] reg_529;
reg   [63:0] reg_533;
reg   [63:0] reg_537;
reg   [4:0] reg_541;
reg   [39:0] tmp_10_reg_1233;
wire   [63:0] ll0_V_2_fu_545_p1;
reg   [63:0] ll0_V_2_reg_1239;
reg   [63:0] ll5_V_2_reg_1245;
reg   [4:0] tmp_len_V_reg_1251;
wire   [7:0] zext_ln886_fu_673_p1;
reg   [7:0] zext_ln886_reg_1258;
wire   [124:0] zext_ln866_fu_683_p1;
reg   [124:0] zext_ln866_reg_1263;
reg   [63:0] ll6_V_reg_1274;
wire   [0:0] icmp_ln1065_1_fu_701_p2;
wire   [0:0] icmp_ln1065_fu_687_p2;
reg   [63:0] ll7_V_reg_1279;
reg   [39:0] tmp_13_reg_1284;
reg   [3:0] tmp_len_V_4_cast_reg_1289;
reg   [0:0] tmp_5_reg_1294;
wire   [124:0] zext_ln866_2_fu_768_p1;
reg   [63:0] ll6_V_1_reg_1331;
reg   [63:0] ll7_V_1_reg_1336;
reg   [511:0] tmp_14_reg_1341;
reg   [39:0] tmp_15_reg_1347;
reg   [3:0] tmp_len_V_5_cast_reg_1352;
reg   [0:0] tmp_8_reg_1357;
wire   [3:0] counter_V_7_fu_876_p2;
wire   [124:0] add_ln145_fu_934_p2;
wire   [63:0] ll5_V_3_fu_940_p4;
wire   [124:0] total_len_V_8_fu_954_p2;
reg   [124:0] total_len_V_8_reg_1376;
wire   [3:0] counter_V_8_fu_971_p2;
wire   [5:0] Hi_fu_989_p2;
reg   [5:0] Hi_reg_1389;
wire   [5:0] Lo_fu_995_p2;
reg   [5:0] Lo_reg_1394;
wire   [0:0] icmp_ln414_fu_1001_p2;
reg   [0:0] icmp_ln414_reg_1399;
wire   [3:0] counter_V_9_fu_1128_p2;
wire   [4:0] z_rounds_V_fu_1152_p2;
reg   [4:0] z_rounds_V_reg_1412;
wire    ap_CS_fsm_state46;
reg   [63:0] L_V_reg_1417;
wire   [60:0] trunc_ln674_fu_1169_p1;
reg   [60:0] trunc_ln674_reg_1422;
wire   [0:0] icmp_ln1065_3_fu_1183_p2;
reg   [0:0] icmp_ln1065_3_reg_1427;
wire   [0:0] icmp_ln1065_4_fu_1199_p2;
reg   [0:0] icmp_ln1065_4_reg_1432;
wire    grp_preProcessingOneTripForHMAC21_Pipeline_VITIS_LOOP_1066_2_fu_445_ap_start;
wire    grp_preProcessingOneTripForHMAC21_Pipeline_VITIS_LOOP_1066_2_fu_445_ap_done;
wire    grp_preProcessingOneTripForHMAC21_Pipeline_VITIS_LOOP_1066_2_fu_445_ap_idle;
wire    grp_preProcessingOneTripForHMAC21_Pipeline_VITIS_LOOP_1066_2_fu_445_ap_ready;
wire   [64:0] grp_preProcessingOneTripForHMAC21_Pipeline_VITIS_LOOP_1066_2_fu_445_blk_strm1_din;
wire    grp_preProcessingOneTripForHMAC21_Pipeline_VITIS_LOOP_1066_2_fu_445_blk_strm1_write;
reg   [511:0] bigHUH_0_lcssa_in_in_in_reg_345;
reg   [39:0] HUH_0_lcssa_in_in_in_reg_354;
reg   [3:0] last_len_V_reg_364;
reg   [124:0] total_len_0_lcssa_reg_373;
reg   [3:0] counter_0_lcssa_reg_382;
reg   [63:0] l_V_reg_394;
reg    ap_block_state33;
reg   [3:0] counter_V_3_reg_405;
reg   [39:0] HUH_V_in_in_in_reg_415;
reg   [124:0] total_len_V_5_reg_425;
reg   [3:0] counter_V_5_reg_434;
reg    grp_preProcessingOneTripForHMAC21_Pipeline_VITIS_LOOP_1066_2_fu_445_ap_start_reg;
wire    ap_CS_fsm_state47;
reg   [511:0] p_Val2_5_fu_186;
reg   [4:0] tmp_len_V_2_fu_190;
reg   [127:0] total_len_V_2_fu_194;
wire   [127:0] total_len_V_7_fu_901_p2;
wire   [127:0] zext_ln866_1_fu_764_p1;
reg   [3:0] counter_V_fu_198;
reg    ap_block_state1;
reg    ap_block_state20;
reg    ap_block_state28;
wire   [64:0] zext_ln232_fu_580_p1;
wire   [64:0] zext_ln232_1_fu_625_p1;
wire   [64:0] zext_ln232_2_fu_636_p1;
wire   [64:0] zext_ln232_3_fu_647_p1;
wire   [64:0] zext_ln232_4_fu_658_p1;
wire   [64:0] zext_ln232_5_fu_668_p1;
wire   [64:0] zext_ln232_6_fu_727_p1;
wire   [64:0] zext_ln232_7_fu_731_p1;
wire   [64:0] zext_ln232_8_fu_739_p1;
wire   [64:0] zext_ln232_9_fu_744_p1;
wire   [64:0] zext_ln232_10_fu_749_p1;
wire   [64:0] zext_ln232_11_fu_754_p1;
wire   [64:0] zext_ln232_12_fu_772_p1;
wire   [64:0] zext_ln232_13_fu_830_p1;
wire   [64:0] zext_ln232_14_fu_835_p1;
wire   [64:0] zext_ln232_15_fu_839_p1;
wire   [64:0] zext_ln232_16_fu_847_p1;
wire   [64:0] zext_ln232_17_fu_852_p1;
wire   [64:0] zext_ln232_18_fu_857_p1;
wire   [64:0] zext_ln232_19_fu_862_p1;
wire   [64:0] zext_ln232_20_fu_882_p1;
wire   [64:0] zext_ln232_21_fu_966_p1;
wire   [64:0] zext_ln232_22_fu_1123_p1;
wire   [64:0] zext_ln404_fu_1205_p1;
wire   [64:0] L_V_2_fu_1225_p3;
wire   [63:0] ret_V_fu_574_p2;
reg   [63:0] opad_buffer_0_preg;
wire   [63:0] ret_V_3_fu_585_p2;
reg   [63:0] opad_buffer_1_preg;
wire   [63:0] ret_V_5_fu_592_p2;
reg   [63:0] opad_buffer_2_preg;
wire   [63:0] ret_V_7_fu_599_p2;
reg   [63:0] opad_buffer_3_preg;
wire   [63:0] ret_V_9_fu_606_p2;
reg   [63:0] opad_buffer_4_preg;
wire   [63:0] ret_V_11_fu_613_p2;
reg   [63:0] opad_buffer_5_preg;
reg   [62:0] opad_buffer_6_preg;
reg   [62:0] opad_buffer_7_preg;
reg   [62:0] opad_buffer_8_preg;
reg   [62:0] opad_buffer_9_preg;
reg   [62:0] opad_buffer_10_preg;
reg   [62:0] opad_buffer_11_preg;
reg   [62:0] opad_buffer_12_preg;
reg   [62:0] opad_buffer_13_preg;
reg   [62:0] opad_buffer_14_preg;
reg   [62:0] opad_buffer_15_preg;
wire   [63:0] ret_V_12_fu_569_p2;
wire   [63:0] ret_V_13_fu_619_p2;
wire   [63:0] ret_V_14_fu_630_p2;
wire   [63:0] ret_V_15_fu_641_p2;
wire   [63:0] ret_V_16_fu_652_p2;
wire   [63:0] ret_V_17_fu_663_p2;
wire   [7:0] total_len_V_fu_676_p3;
wire   [4:0] tmp_fu_692_p4;
wire   [63:0] ll0_V_fu_735_p1;
wire   [7:0] total_len_V_1_fu_759_p2;
wire   [63:0] ll5_V_fu_800_p4;
wire   [63:0] ll0_V_1_fu_843_p1;
wire   [6:0] zext_ln886_1_fu_887_p1;
wire   [6:0] add_ln886_fu_891_p2;
wire   [127:0] zext_ln886_3_fu_897_p1;
wire   [124:0] trunc_ln886_fu_930_p1;
wire   [124:0] zext_ln886_4_fu_926_p1;
wire   [124:0] zext_ln886_2_fu_950_p1;
wire   [2:0] trunc_ln1542_fu_977_p1;
wire   [5:0] shl_ln_fu_981_p3;
wire   [6:0] zext_ln414_fu_1007_p1;
wire   [6:0] zext_ln414_1_fu_1010_p1;
wire   [6:0] xor_ln414_fu_1013_p2;
wire   [6:0] select_ln414_fu_1019_p3;
wire   [6:0] select_ln414_2_fu_1033_p3;
wire   [6:0] select_ln414_1_fu_1026_p3;
wire   [6:0] xor_ln414_1_fu_1040_p2;
wire   [63:0] zext_ln414_2_fu_1046_p1;
wire   [63:0] shl_ln414_fu_1058_p2;
reg   [63:0] tmp_9_fu_1064_p4;
wire   [63:0] zext_ln414_3_fu_1050_p1;
wire   [63:0] zext_ln414_4_fu_1054_p1;
wire   [63:0] shl_ln414_1_fu_1081_p2;
wire   [63:0] lshr_ln414_fu_1087_p2;
wire   [63:0] and_ln414_fu_1093_p2;
wire   [63:0] xor_ln414_2_fu_1099_p2;
wire   [63:0] select_ln414_3_fu_1074_p3;
wire   [63:0] and_ln414_1_fu_1105_p2;
wire   [63:0] and_ln414_2_fu_1111_p2;
wire   [63:0] p_Result_s_fu_1117_p2;
wire   [0:0] icmp_ln1073_fu_1134_p2;
wire   [4:0] select_ln1061_fu_1144_p3;
wire   [4:0] zext_ln1542_fu_1140_p1;
wire   [4:0] tmp_2_fu_1173_p4;
wire   [4:0] tmp_3_fu_1189_p4;
wire   [64:0] p_Result_1_fu_1209_p4;
wire   [64:0] select_ln1077_fu_1218_p3;
reg   [48:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
reg    ap_ST_fsm_state6_blk;
reg    ap_ST_fsm_state7_blk;
reg    ap_ST_fsm_state8_blk;
reg    ap_ST_fsm_state9_blk;
reg    ap_ST_fsm_state10_blk;
reg    ap_ST_fsm_state11_blk;
reg    ap_ST_fsm_state12_blk;
reg    ap_ST_fsm_state13_blk;
reg    ap_ST_fsm_state14_blk;
reg    ap_ST_fsm_state15_blk;
reg    ap_ST_fsm_state16_blk;
reg    ap_ST_fsm_state17_blk;
reg    ap_ST_fsm_state18_blk;
reg    ap_ST_fsm_state19_blk;
reg    ap_ST_fsm_state20_blk;
reg    ap_ST_fsm_state21_blk;
reg    ap_ST_fsm_state22_blk;
reg    ap_ST_fsm_state23_blk;
reg    ap_ST_fsm_state24_blk;
reg    ap_ST_fsm_state25_blk;
reg    ap_ST_fsm_state26_blk;
reg    ap_ST_fsm_state27_blk;
reg    ap_ST_fsm_state28_blk;
reg    ap_ST_fsm_state29_blk;
reg    ap_ST_fsm_state30_blk;
reg    ap_ST_fsm_state31_blk;
reg    ap_ST_fsm_state32_blk;
reg    ap_ST_fsm_state33_blk;
reg    ap_ST_fsm_state34_blk;
reg    ap_ST_fsm_state35_blk;
reg    ap_ST_fsm_state36_blk;
reg    ap_ST_fsm_state37_blk;
reg    ap_ST_fsm_state38_blk;
reg    ap_ST_fsm_state39_blk;
reg    ap_ST_fsm_state40_blk;
reg    ap_ST_fsm_state41_blk;
reg    ap_ST_fsm_state42_blk;
reg    ap_ST_fsm_state43_blk;
reg    ap_ST_fsm_state44_blk;
reg    ap_ST_fsm_state45_blk;
wire    ap_ST_fsm_state46_blk;
reg    ap_ST_fsm_state47_blk;
reg    ap_ST_fsm_state48_blk;
reg    ap_ST_fsm_state49_blk;
reg    ap_condition_531;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 49'd1;
#0 grp_preProcessingOneTripForHMAC21_Pipeline_VITIS_LOOP_1066_2_fu_445_ap_start_reg = 1'b0;
#0 opad_buffer_0_preg = 64'd0;
#0 opad_buffer_1_preg = 64'd0;
#0 opad_buffer_2_preg = 64'd0;
#0 opad_buffer_3_preg = 64'd0;
#0 opad_buffer_4_preg = 64'd0;
#0 opad_buffer_5_preg = 64'd0;
#0 opad_buffer_6_preg = 63'd0;
#0 opad_buffer_7_preg = 63'd0;
#0 opad_buffer_8_preg = 63'd0;
#0 opad_buffer_9_preg = 63'd0;
#0 opad_buffer_10_preg = 63'd0;
#0 opad_buffer_11_preg = 63'd0;
#0 opad_buffer_12_preg = 63'd0;
#0 opad_buffer_13_preg = 63'd0;
#0 opad_buffer_14_preg = 63'd0;
#0 opad_buffer_15_preg = 63'd0;
end

hmac_preProcessingOneTripForHMAC21_Pipeline_VITIS_LOOP_1066_2 grp_preProcessingOneTripForHMAC21_Pipeline_VITIS_LOOP_1066_2_fu_445(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_preProcessingOneTripForHMAC21_Pipeline_VITIS_LOOP_1066_2_fu_445_ap_start),
    .ap_done(grp_preProcessingOneTripForHMAC21_Pipeline_VITIS_LOOP_1066_2_fu_445_ap_done),
    .ap_idle(grp_preProcessingOneTripForHMAC21_Pipeline_VITIS_LOOP_1066_2_fu_445_ap_idle),
    .ap_ready(grp_preProcessingOneTripForHMAC21_Pipeline_VITIS_LOOP_1066_2_fu_445_ap_ready),
    .blk_strm1_din(grp_preProcessingOneTripForHMAC21_Pipeline_VITIS_LOOP_1066_2_fu_445_blk_strm1_din),
    .blk_strm1_num_data_valid(8'd0),
    .blk_strm1_fifo_cap(8'd0),
    .blk_strm1_full_n(blk_strm1_full_n),
    .blk_strm1_write(grp_preProcessingOneTripForHMAC21_Pipeline_VITIS_LOOP_1066_2_fu_445_blk_strm1_write),
    .z_rounds_V(z_rounds_V_reg_1412)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state49) & (blk_strm1_full_n == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_preProcessingOneTripForHMAC21_Pipeline_VITIS_LOOP_1066_2_fu_445_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state46)) begin
            grp_preProcessingOneTripForHMAC21_Pipeline_VITIS_LOOP_1066_2_fu_445_ap_start_reg <= 1'b1;
        end else if ((grp_preProcessingOneTripForHMAC21_Pipeline_VITIS_LOOP_1066_2_fu_445_ap_ready == 1'b1)) begin
            grp_preProcessingOneTripForHMAC21_Pipeline_VITIS_LOOP_1066_2_fu_445_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        opad_buffer_0_preg <= 64'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state2) & (blk_strm1_full_n == 1'b1))) begin
            opad_buffer_0_preg <= ret_V_fu_574_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                opad_buffer_10_preg[2] <= 1'b0;
        opad_buffer_10_preg[3] <= 1'b0;
        opad_buffer_10_preg[4] <= 1'b0;
        opad_buffer_10_preg[6] <= 1'b0;
        opad_buffer_10_preg[10] <= 1'b0;
        opad_buffer_10_preg[11] <= 1'b0;
        opad_buffer_10_preg[12] <= 1'b0;
        opad_buffer_10_preg[14] <= 1'b0;
        opad_buffer_10_preg[18] <= 1'b0;
        opad_buffer_10_preg[19] <= 1'b0;
        opad_buffer_10_preg[20] <= 1'b0;
        opad_buffer_10_preg[22] <= 1'b0;
        opad_buffer_10_preg[26] <= 1'b0;
        opad_buffer_10_preg[27] <= 1'b0;
        opad_buffer_10_preg[28] <= 1'b0;
        opad_buffer_10_preg[30] <= 1'b0;
        opad_buffer_10_preg[34] <= 1'b0;
        opad_buffer_10_preg[35] <= 1'b0;
        opad_buffer_10_preg[36] <= 1'b0;
        opad_buffer_10_preg[38] <= 1'b0;
        opad_buffer_10_preg[42] <= 1'b0;
        opad_buffer_10_preg[43] <= 1'b0;
        opad_buffer_10_preg[44] <= 1'b0;
        opad_buffer_10_preg[46] <= 1'b0;
        opad_buffer_10_preg[50] <= 1'b0;
        opad_buffer_10_preg[51] <= 1'b0;
        opad_buffer_10_preg[52] <= 1'b0;
        opad_buffer_10_preg[54] <= 1'b0;
        opad_buffer_10_preg[58] <= 1'b0;
        opad_buffer_10_preg[59] <= 1'b0;
        opad_buffer_10_preg[60] <= 1'b0;
        opad_buffer_10_preg[62] <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state24) & (blk_strm1_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state45) & (blk_strm1_full_n == 1'b1)))) begin
                        opad_buffer_10_preg[2] <= 1'b1;
            opad_buffer_10_preg[3] <= 1'b1;
            opad_buffer_10_preg[4] <= 1'b1;
            opad_buffer_10_preg[6] <= 1'b1;
            opad_buffer_10_preg[10] <= 1'b1;
            opad_buffer_10_preg[11] <= 1'b1;
            opad_buffer_10_preg[12] <= 1'b1;
            opad_buffer_10_preg[14] <= 1'b1;
            opad_buffer_10_preg[18] <= 1'b1;
            opad_buffer_10_preg[19] <= 1'b1;
            opad_buffer_10_preg[20] <= 1'b1;
            opad_buffer_10_preg[22] <= 1'b1;
            opad_buffer_10_preg[26] <= 1'b1;
            opad_buffer_10_preg[27] <= 1'b1;
            opad_buffer_10_preg[28] <= 1'b1;
            opad_buffer_10_preg[30] <= 1'b1;
            opad_buffer_10_preg[34] <= 1'b1;
            opad_buffer_10_preg[35] <= 1'b1;
            opad_buffer_10_preg[36] <= 1'b1;
            opad_buffer_10_preg[38] <= 1'b1;
            opad_buffer_10_preg[42] <= 1'b1;
            opad_buffer_10_preg[43] <= 1'b1;
            opad_buffer_10_preg[44] <= 1'b1;
            opad_buffer_10_preg[46] <= 1'b1;
            opad_buffer_10_preg[50] <= 1'b1;
            opad_buffer_10_preg[51] <= 1'b1;
            opad_buffer_10_preg[52] <= 1'b1;
            opad_buffer_10_preg[54] <= 1'b1;
            opad_buffer_10_preg[58] <= 1'b1;
            opad_buffer_10_preg[59] <= 1'b1;
            opad_buffer_10_preg[60] <= 1'b1;
            opad_buffer_10_preg[62] <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                opad_buffer_11_preg[2] <= 1'b0;
        opad_buffer_11_preg[3] <= 1'b0;
        opad_buffer_11_preg[4] <= 1'b0;
        opad_buffer_11_preg[6] <= 1'b0;
        opad_buffer_11_preg[10] <= 1'b0;
        opad_buffer_11_preg[11] <= 1'b0;
        opad_buffer_11_preg[12] <= 1'b0;
        opad_buffer_11_preg[14] <= 1'b0;
        opad_buffer_11_preg[18] <= 1'b0;
        opad_buffer_11_preg[19] <= 1'b0;
        opad_buffer_11_preg[20] <= 1'b0;
        opad_buffer_11_preg[22] <= 1'b0;
        opad_buffer_11_preg[26] <= 1'b0;
        opad_buffer_11_preg[27] <= 1'b0;
        opad_buffer_11_preg[28] <= 1'b0;
        opad_buffer_11_preg[30] <= 1'b0;
        opad_buffer_11_preg[34] <= 1'b0;
        opad_buffer_11_preg[35] <= 1'b0;
        opad_buffer_11_preg[36] <= 1'b0;
        opad_buffer_11_preg[38] <= 1'b0;
        opad_buffer_11_preg[42] <= 1'b0;
        opad_buffer_11_preg[43] <= 1'b0;
        opad_buffer_11_preg[44] <= 1'b0;
        opad_buffer_11_preg[46] <= 1'b0;
        opad_buffer_11_preg[50] <= 1'b0;
        opad_buffer_11_preg[51] <= 1'b0;
        opad_buffer_11_preg[52] <= 1'b0;
        opad_buffer_11_preg[54] <= 1'b0;
        opad_buffer_11_preg[58] <= 1'b0;
        opad_buffer_11_preg[59] <= 1'b0;
        opad_buffer_11_preg[60] <= 1'b0;
        opad_buffer_11_preg[62] <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state24) & (blk_strm1_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state45) & (blk_strm1_full_n == 1'b1)))) begin
                        opad_buffer_11_preg[2] <= 1'b1;
            opad_buffer_11_preg[3] <= 1'b1;
            opad_buffer_11_preg[4] <= 1'b1;
            opad_buffer_11_preg[6] <= 1'b1;
            opad_buffer_11_preg[10] <= 1'b1;
            opad_buffer_11_preg[11] <= 1'b1;
            opad_buffer_11_preg[12] <= 1'b1;
            opad_buffer_11_preg[14] <= 1'b1;
            opad_buffer_11_preg[18] <= 1'b1;
            opad_buffer_11_preg[19] <= 1'b1;
            opad_buffer_11_preg[20] <= 1'b1;
            opad_buffer_11_preg[22] <= 1'b1;
            opad_buffer_11_preg[26] <= 1'b1;
            opad_buffer_11_preg[27] <= 1'b1;
            opad_buffer_11_preg[28] <= 1'b1;
            opad_buffer_11_preg[30] <= 1'b1;
            opad_buffer_11_preg[34] <= 1'b1;
            opad_buffer_11_preg[35] <= 1'b1;
            opad_buffer_11_preg[36] <= 1'b1;
            opad_buffer_11_preg[38] <= 1'b1;
            opad_buffer_11_preg[42] <= 1'b1;
            opad_buffer_11_preg[43] <= 1'b1;
            opad_buffer_11_preg[44] <= 1'b1;
            opad_buffer_11_preg[46] <= 1'b1;
            opad_buffer_11_preg[50] <= 1'b1;
            opad_buffer_11_preg[51] <= 1'b1;
            opad_buffer_11_preg[52] <= 1'b1;
            opad_buffer_11_preg[54] <= 1'b1;
            opad_buffer_11_preg[58] <= 1'b1;
            opad_buffer_11_preg[59] <= 1'b1;
            opad_buffer_11_preg[60] <= 1'b1;
            opad_buffer_11_preg[62] <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                opad_buffer_12_preg[2] <= 1'b0;
        opad_buffer_12_preg[3] <= 1'b0;
        opad_buffer_12_preg[4] <= 1'b0;
        opad_buffer_12_preg[6] <= 1'b0;
        opad_buffer_12_preg[10] <= 1'b0;
        opad_buffer_12_preg[11] <= 1'b0;
        opad_buffer_12_preg[12] <= 1'b0;
        opad_buffer_12_preg[14] <= 1'b0;
        opad_buffer_12_preg[18] <= 1'b0;
        opad_buffer_12_preg[19] <= 1'b0;
        opad_buffer_12_preg[20] <= 1'b0;
        opad_buffer_12_preg[22] <= 1'b0;
        opad_buffer_12_preg[26] <= 1'b0;
        opad_buffer_12_preg[27] <= 1'b0;
        opad_buffer_12_preg[28] <= 1'b0;
        opad_buffer_12_preg[30] <= 1'b0;
        opad_buffer_12_preg[34] <= 1'b0;
        opad_buffer_12_preg[35] <= 1'b0;
        opad_buffer_12_preg[36] <= 1'b0;
        opad_buffer_12_preg[38] <= 1'b0;
        opad_buffer_12_preg[42] <= 1'b0;
        opad_buffer_12_preg[43] <= 1'b0;
        opad_buffer_12_preg[44] <= 1'b0;
        opad_buffer_12_preg[46] <= 1'b0;
        opad_buffer_12_preg[50] <= 1'b0;
        opad_buffer_12_preg[51] <= 1'b0;
        opad_buffer_12_preg[52] <= 1'b0;
        opad_buffer_12_preg[54] <= 1'b0;
        opad_buffer_12_preg[58] <= 1'b0;
        opad_buffer_12_preg[59] <= 1'b0;
        opad_buffer_12_preg[60] <= 1'b0;
        opad_buffer_12_preg[62] <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state24) & (blk_strm1_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state45) & (blk_strm1_full_n == 1'b1)))) begin
                        opad_buffer_12_preg[2] <= 1'b1;
            opad_buffer_12_preg[3] <= 1'b1;
            opad_buffer_12_preg[4] <= 1'b1;
            opad_buffer_12_preg[6] <= 1'b1;
            opad_buffer_12_preg[10] <= 1'b1;
            opad_buffer_12_preg[11] <= 1'b1;
            opad_buffer_12_preg[12] <= 1'b1;
            opad_buffer_12_preg[14] <= 1'b1;
            opad_buffer_12_preg[18] <= 1'b1;
            opad_buffer_12_preg[19] <= 1'b1;
            opad_buffer_12_preg[20] <= 1'b1;
            opad_buffer_12_preg[22] <= 1'b1;
            opad_buffer_12_preg[26] <= 1'b1;
            opad_buffer_12_preg[27] <= 1'b1;
            opad_buffer_12_preg[28] <= 1'b1;
            opad_buffer_12_preg[30] <= 1'b1;
            opad_buffer_12_preg[34] <= 1'b1;
            opad_buffer_12_preg[35] <= 1'b1;
            opad_buffer_12_preg[36] <= 1'b1;
            opad_buffer_12_preg[38] <= 1'b1;
            opad_buffer_12_preg[42] <= 1'b1;
            opad_buffer_12_preg[43] <= 1'b1;
            opad_buffer_12_preg[44] <= 1'b1;
            opad_buffer_12_preg[46] <= 1'b1;
            opad_buffer_12_preg[50] <= 1'b1;
            opad_buffer_12_preg[51] <= 1'b1;
            opad_buffer_12_preg[52] <= 1'b1;
            opad_buffer_12_preg[54] <= 1'b1;
            opad_buffer_12_preg[58] <= 1'b1;
            opad_buffer_12_preg[59] <= 1'b1;
            opad_buffer_12_preg[60] <= 1'b1;
            opad_buffer_12_preg[62] <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                opad_buffer_13_preg[2] <= 1'b0;
        opad_buffer_13_preg[3] <= 1'b0;
        opad_buffer_13_preg[4] <= 1'b0;
        opad_buffer_13_preg[6] <= 1'b0;
        opad_buffer_13_preg[10] <= 1'b0;
        opad_buffer_13_preg[11] <= 1'b0;
        opad_buffer_13_preg[12] <= 1'b0;
        opad_buffer_13_preg[14] <= 1'b0;
        opad_buffer_13_preg[18] <= 1'b0;
        opad_buffer_13_preg[19] <= 1'b0;
        opad_buffer_13_preg[20] <= 1'b0;
        opad_buffer_13_preg[22] <= 1'b0;
        opad_buffer_13_preg[26] <= 1'b0;
        opad_buffer_13_preg[27] <= 1'b0;
        opad_buffer_13_preg[28] <= 1'b0;
        opad_buffer_13_preg[30] <= 1'b0;
        opad_buffer_13_preg[34] <= 1'b0;
        opad_buffer_13_preg[35] <= 1'b0;
        opad_buffer_13_preg[36] <= 1'b0;
        opad_buffer_13_preg[38] <= 1'b0;
        opad_buffer_13_preg[42] <= 1'b0;
        opad_buffer_13_preg[43] <= 1'b0;
        opad_buffer_13_preg[44] <= 1'b0;
        opad_buffer_13_preg[46] <= 1'b0;
        opad_buffer_13_preg[50] <= 1'b0;
        opad_buffer_13_preg[51] <= 1'b0;
        opad_buffer_13_preg[52] <= 1'b0;
        opad_buffer_13_preg[54] <= 1'b0;
        opad_buffer_13_preg[58] <= 1'b0;
        opad_buffer_13_preg[59] <= 1'b0;
        opad_buffer_13_preg[60] <= 1'b0;
        opad_buffer_13_preg[62] <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state24) & (blk_strm1_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state45) & (blk_strm1_full_n == 1'b1)))) begin
                        opad_buffer_13_preg[2] <= 1'b1;
            opad_buffer_13_preg[3] <= 1'b1;
            opad_buffer_13_preg[4] <= 1'b1;
            opad_buffer_13_preg[6] <= 1'b1;
            opad_buffer_13_preg[10] <= 1'b1;
            opad_buffer_13_preg[11] <= 1'b1;
            opad_buffer_13_preg[12] <= 1'b1;
            opad_buffer_13_preg[14] <= 1'b1;
            opad_buffer_13_preg[18] <= 1'b1;
            opad_buffer_13_preg[19] <= 1'b1;
            opad_buffer_13_preg[20] <= 1'b1;
            opad_buffer_13_preg[22] <= 1'b1;
            opad_buffer_13_preg[26] <= 1'b1;
            opad_buffer_13_preg[27] <= 1'b1;
            opad_buffer_13_preg[28] <= 1'b1;
            opad_buffer_13_preg[30] <= 1'b1;
            opad_buffer_13_preg[34] <= 1'b1;
            opad_buffer_13_preg[35] <= 1'b1;
            opad_buffer_13_preg[36] <= 1'b1;
            opad_buffer_13_preg[38] <= 1'b1;
            opad_buffer_13_preg[42] <= 1'b1;
            opad_buffer_13_preg[43] <= 1'b1;
            opad_buffer_13_preg[44] <= 1'b1;
            opad_buffer_13_preg[46] <= 1'b1;
            opad_buffer_13_preg[50] <= 1'b1;
            opad_buffer_13_preg[51] <= 1'b1;
            opad_buffer_13_preg[52] <= 1'b1;
            opad_buffer_13_preg[54] <= 1'b1;
            opad_buffer_13_preg[58] <= 1'b1;
            opad_buffer_13_preg[59] <= 1'b1;
            opad_buffer_13_preg[60] <= 1'b1;
            opad_buffer_13_preg[62] <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                opad_buffer_14_preg[2] <= 1'b0;
        opad_buffer_14_preg[3] <= 1'b0;
        opad_buffer_14_preg[4] <= 1'b0;
        opad_buffer_14_preg[6] <= 1'b0;
        opad_buffer_14_preg[10] <= 1'b0;
        opad_buffer_14_preg[11] <= 1'b0;
        opad_buffer_14_preg[12] <= 1'b0;
        opad_buffer_14_preg[14] <= 1'b0;
        opad_buffer_14_preg[18] <= 1'b0;
        opad_buffer_14_preg[19] <= 1'b0;
        opad_buffer_14_preg[20] <= 1'b0;
        opad_buffer_14_preg[22] <= 1'b0;
        opad_buffer_14_preg[26] <= 1'b0;
        opad_buffer_14_preg[27] <= 1'b0;
        opad_buffer_14_preg[28] <= 1'b0;
        opad_buffer_14_preg[30] <= 1'b0;
        opad_buffer_14_preg[34] <= 1'b0;
        opad_buffer_14_preg[35] <= 1'b0;
        opad_buffer_14_preg[36] <= 1'b0;
        opad_buffer_14_preg[38] <= 1'b0;
        opad_buffer_14_preg[42] <= 1'b0;
        opad_buffer_14_preg[43] <= 1'b0;
        opad_buffer_14_preg[44] <= 1'b0;
        opad_buffer_14_preg[46] <= 1'b0;
        opad_buffer_14_preg[50] <= 1'b0;
        opad_buffer_14_preg[51] <= 1'b0;
        opad_buffer_14_preg[52] <= 1'b0;
        opad_buffer_14_preg[54] <= 1'b0;
        opad_buffer_14_preg[58] <= 1'b0;
        opad_buffer_14_preg[59] <= 1'b0;
        opad_buffer_14_preg[60] <= 1'b0;
        opad_buffer_14_preg[62] <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state24) & (blk_strm1_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state45) & (blk_strm1_full_n == 1'b1)))) begin
                        opad_buffer_14_preg[2] <= 1'b1;
            opad_buffer_14_preg[3] <= 1'b1;
            opad_buffer_14_preg[4] <= 1'b1;
            opad_buffer_14_preg[6] <= 1'b1;
            opad_buffer_14_preg[10] <= 1'b1;
            opad_buffer_14_preg[11] <= 1'b1;
            opad_buffer_14_preg[12] <= 1'b1;
            opad_buffer_14_preg[14] <= 1'b1;
            opad_buffer_14_preg[18] <= 1'b1;
            opad_buffer_14_preg[19] <= 1'b1;
            opad_buffer_14_preg[20] <= 1'b1;
            opad_buffer_14_preg[22] <= 1'b1;
            opad_buffer_14_preg[26] <= 1'b1;
            opad_buffer_14_preg[27] <= 1'b1;
            opad_buffer_14_preg[28] <= 1'b1;
            opad_buffer_14_preg[30] <= 1'b1;
            opad_buffer_14_preg[34] <= 1'b1;
            opad_buffer_14_preg[35] <= 1'b1;
            opad_buffer_14_preg[36] <= 1'b1;
            opad_buffer_14_preg[38] <= 1'b1;
            opad_buffer_14_preg[42] <= 1'b1;
            opad_buffer_14_preg[43] <= 1'b1;
            opad_buffer_14_preg[44] <= 1'b1;
            opad_buffer_14_preg[46] <= 1'b1;
            opad_buffer_14_preg[50] <= 1'b1;
            opad_buffer_14_preg[51] <= 1'b1;
            opad_buffer_14_preg[52] <= 1'b1;
            opad_buffer_14_preg[54] <= 1'b1;
            opad_buffer_14_preg[58] <= 1'b1;
            opad_buffer_14_preg[59] <= 1'b1;
            opad_buffer_14_preg[60] <= 1'b1;
            opad_buffer_14_preg[62] <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                opad_buffer_15_preg[2] <= 1'b0;
        opad_buffer_15_preg[3] <= 1'b0;
        opad_buffer_15_preg[4] <= 1'b0;
        opad_buffer_15_preg[6] <= 1'b0;
        opad_buffer_15_preg[10] <= 1'b0;
        opad_buffer_15_preg[11] <= 1'b0;
        opad_buffer_15_preg[12] <= 1'b0;
        opad_buffer_15_preg[14] <= 1'b0;
        opad_buffer_15_preg[18] <= 1'b0;
        opad_buffer_15_preg[19] <= 1'b0;
        opad_buffer_15_preg[20] <= 1'b0;
        opad_buffer_15_preg[22] <= 1'b0;
        opad_buffer_15_preg[26] <= 1'b0;
        opad_buffer_15_preg[27] <= 1'b0;
        opad_buffer_15_preg[28] <= 1'b0;
        opad_buffer_15_preg[30] <= 1'b0;
        opad_buffer_15_preg[34] <= 1'b0;
        opad_buffer_15_preg[35] <= 1'b0;
        opad_buffer_15_preg[36] <= 1'b0;
        opad_buffer_15_preg[38] <= 1'b0;
        opad_buffer_15_preg[42] <= 1'b0;
        opad_buffer_15_preg[43] <= 1'b0;
        opad_buffer_15_preg[44] <= 1'b0;
        opad_buffer_15_preg[46] <= 1'b0;
        opad_buffer_15_preg[50] <= 1'b0;
        opad_buffer_15_preg[51] <= 1'b0;
        opad_buffer_15_preg[52] <= 1'b0;
        opad_buffer_15_preg[54] <= 1'b0;
        opad_buffer_15_preg[58] <= 1'b0;
        opad_buffer_15_preg[59] <= 1'b0;
        opad_buffer_15_preg[60] <= 1'b0;
        opad_buffer_15_preg[62] <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state24) & (blk_strm1_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state45) & (blk_strm1_full_n == 1'b1)))) begin
                        opad_buffer_15_preg[2] <= 1'b1;
            opad_buffer_15_preg[3] <= 1'b1;
            opad_buffer_15_preg[4] <= 1'b1;
            opad_buffer_15_preg[6] <= 1'b1;
            opad_buffer_15_preg[10] <= 1'b1;
            opad_buffer_15_preg[11] <= 1'b1;
            opad_buffer_15_preg[12] <= 1'b1;
            opad_buffer_15_preg[14] <= 1'b1;
            opad_buffer_15_preg[18] <= 1'b1;
            opad_buffer_15_preg[19] <= 1'b1;
            opad_buffer_15_preg[20] <= 1'b1;
            opad_buffer_15_preg[22] <= 1'b1;
            opad_buffer_15_preg[26] <= 1'b1;
            opad_buffer_15_preg[27] <= 1'b1;
            opad_buffer_15_preg[28] <= 1'b1;
            opad_buffer_15_preg[30] <= 1'b1;
            opad_buffer_15_preg[34] <= 1'b1;
            opad_buffer_15_preg[35] <= 1'b1;
            opad_buffer_15_preg[36] <= 1'b1;
            opad_buffer_15_preg[38] <= 1'b1;
            opad_buffer_15_preg[42] <= 1'b1;
            opad_buffer_15_preg[43] <= 1'b1;
            opad_buffer_15_preg[44] <= 1'b1;
            opad_buffer_15_preg[46] <= 1'b1;
            opad_buffer_15_preg[50] <= 1'b1;
            opad_buffer_15_preg[51] <= 1'b1;
            opad_buffer_15_preg[52] <= 1'b1;
            opad_buffer_15_preg[54] <= 1'b1;
            opad_buffer_15_preg[58] <= 1'b1;
            opad_buffer_15_preg[59] <= 1'b1;
            opad_buffer_15_preg[60] <= 1'b1;
            opad_buffer_15_preg[62] <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        opad_buffer_1_preg <= 64'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state2) & (blk_strm1_full_n == 1'b1))) begin
            opad_buffer_1_preg <= ret_V_3_fu_585_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        opad_buffer_2_preg <= 64'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state2) & (blk_strm1_full_n == 1'b1))) begin
            opad_buffer_2_preg <= ret_V_5_fu_592_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        opad_buffer_3_preg <= 64'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state2) & (blk_strm1_full_n == 1'b1))) begin
            opad_buffer_3_preg <= ret_V_7_fu_599_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        opad_buffer_4_preg <= 64'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state2) & (blk_strm1_full_n == 1'b1))) begin
            opad_buffer_4_preg <= ret_V_9_fu_606_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        opad_buffer_5_preg <= 64'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state2) & (blk_strm1_full_n == 1'b1))) begin
            opad_buffer_5_preg <= ret_V_11_fu_613_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                opad_buffer_6_preg[2] <= 1'b0;
        opad_buffer_6_preg[3] <= 1'b0;
        opad_buffer_6_preg[4] <= 1'b0;
        opad_buffer_6_preg[6] <= 1'b0;
        opad_buffer_6_preg[10] <= 1'b0;
        opad_buffer_6_preg[11] <= 1'b0;
        opad_buffer_6_preg[12] <= 1'b0;
        opad_buffer_6_preg[14] <= 1'b0;
        opad_buffer_6_preg[18] <= 1'b0;
        opad_buffer_6_preg[19] <= 1'b0;
        opad_buffer_6_preg[20] <= 1'b0;
        opad_buffer_6_preg[22] <= 1'b0;
        opad_buffer_6_preg[26] <= 1'b0;
        opad_buffer_6_preg[27] <= 1'b0;
        opad_buffer_6_preg[28] <= 1'b0;
        opad_buffer_6_preg[30] <= 1'b0;
        opad_buffer_6_preg[34] <= 1'b0;
        opad_buffer_6_preg[35] <= 1'b0;
        opad_buffer_6_preg[36] <= 1'b0;
        opad_buffer_6_preg[38] <= 1'b0;
        opad_buffer_6_preg[42] <= 1'b0;
        opad_buffer_6_preg[43] <= 1'b0;
        opad_buffer_6_preg[44] <= 1'b0;
        opad_buffer_6_preg[46] <= 1'b0;
        opad_buffer_6_preg[50] <= 1'b0;
        opad_buffer_6_preg[51] <= 1'b0;
        opad_buffer_6_preg[52] <= 1'b0;
        opad_buffer_6_preg[54] <= 1'b0;
        opad_buffer_6_preg[58] <= 1'b0;
        opad_buffer_6_preg[59] <= 1'b0;
        opad_buffer_6_preg[60] <= 1'b0;
        opad_buffer_6_preg[62] <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state24) & (blk_strm1_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state45) & (blk_strm1_full_n == 1'b1)))) begin
                        opad_buffer_6_preg[2] <= 1'b1;
            opad_buffer_6_preg[3] <= 1'b1;
            opad_buffer_6_preg[4] <= 1'b1;
            opad_buffer_6_preg[6] <= 1'b1;
            opad_buffer_6_preg[10] <= 1'b1;
            opad_buffer_6_preg[11] <= 1'b1;
            opad_buffer_6_preg[12] <= 1'b1;
            opad_buffer_6_preg[14] <= 1'b1;
            opad_buffer_6_preg[18] <= 1'b1;
            opad_buffer_6_preg[19] <= 1'b1;
            opad_buffer_6_preg[20] <= 1'b1;
            opad_buffer_6_preg[22] <= 1'b1;
            opad_buffer_6_preg[26] <= 1'b1;
            opad_buffer_6_preg[27] <= 1'b1;
            opad_buffer_6_preg[28] <= 1'b1;
            opad_buffer_6_preg[30] <= 1'b1;
            opad_buffer_6_preg[34] <= 1'b1;
            opad_buffer_6_preg[35] <= 1'b1;
            opad_buffer_6_preg[36] <= 1'b1;
            opad_buffer_6_preg[38] <= 1'b1;
            opad_buffer_6_preg[42] <= 1'b1;
            opad_buffer_6_preg[43] <= 1'b1;
            opad_buffer_6_preg[44] <= 1'b1;
            opad_buffer_6_preg[46] <= 1'b1;
            opad_buffer_6_preg[50] <= 1'b1;
            opad_buffer_6_preg[51] <= 1'b1;
            opad_buffer_6_preg[52] <= 1'b1;
            opad_buffer_6_preg[54] <= 1'b1;
            opad_buffer_6_preg[58] <= 1'b1;
            opad_buffer_6_preg[59] <= 1'b1;
            opad_buffer_6_preg[60] <= 1'b1;
            opad_buffer_6_preg[62] <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                opad_buffer_7_preg[2] <= 1'b0;
        opad_buffer_7_preg[3] <= 1'b0;
        opad_buffer_7_preg[4] <= 1'b0;
        opad_buffer_7_preg[6] <= 1'b0;
        opad_buffer_7_preg[10] <= 1'b0;
        opad_buffer_7_preg[11] <= 1'b0;
        opad_buffer_7_preg[12] <= 1'b0;
        opad_buffer_7_preg[14] <= 1'b0;
        opad_buffer_7_preg[18] <= 1'b0;
        opad_buffer_7_preg[19] <= 1'b0;
        opad_buffer_7_preg[20] <= 1'b0;
        opad_buffer_7_preg[22] <= 1'b0;
        opad_buffer_7_preg[26] <= 1'b0;
        opad_buffer_7_preg[27] <= 1'b0;
        opad_buffer_7_preg[28] <= 1'b0;
        opad_buffer_7_preg[30] <= 1'b0;
        opad_buffer_7_preg[34] <= 1'b0;
        opad_buffer_7_preg[35] <= 1'b0;
        opad_buffer_7_preg[36] <= 1'b0;
        opad_buffer_7_preg[38] <= 1'b0;
        opad_buffer_7_preg[42] <= 1'b0;
        opad_buffer_7_preg[43] <= 1'b0;
        opad_buffer_7_preg[44] <= 1'b0;
        opad_buffer_7_preg[46] <= 1'b0;
        opad_buffer_7_preg[50] <= 1'b0;
        opad_buffer_7_preg[51] <= 1'b0;
        opad_buffer_7_preg[52] <= 1'b0;
        opad_buffer_7_preg[54] <= 1'b0;
        opad_buffer_7_preg[58] <= 1'b0;
        opad_buffer_7_preg[59] <= 1'b0;
        opad_buffer_7_preg[60] <= 1'b0;
        opad_buffer_7_preg[62] <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state24) & (blk_strm1_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state45) & (blk_strm1_full_n == 1'b1)))) begin
                        opad_buffer_7_preg[2] <= 1'b1;
            opad_buffer_7_preg[3] <= 1'b1;
            opad_buffer_7_preg[4] <= 1'b1;
            opad_buffer_7_preg[6] <= 1'b1;
            opad_buffer_7_preg[10] <= 1'b1;
            opad_buffer_7_preg[11] <= 1'b1;
            opad_buffer_7_preg[12] <= 1'b1;
            opad_buffer_7_preg[14] <= 1'b1;
            opad_buffer_7_preg[18] <= 1'b1;
            opad_buffer_7_preg[19] <= 1'b1;
            opad_buffer_7_preg[20] <= 1'b1;
            opad_buffer_7_preg[22] <= 1'b1;
            opad_buffer_7_preg[26] <= 1'b1;
            opad_buffer_7_preg[27] <= 1'b1;
            opad_buffer_7_preg[28] <= 1'b1;
            opad_buffer_7_preg[30] <= 1'b1;
            opad_buffer_7_preg[34] <= 1'b1;
            opad_buffer_7_preg[35] <= 1'b1;
            opad_buffer_7_preg[36] <= 1'b1;
            opad_buffer_7_preg[38] <= 1'b1;
            opad_buffer_7_preg[42] <= 1'b1;
            opad_buffer_7_preg[43] <= 1'b1;
            opad_buffer_7_preg[44] <= 1'b1;
            opad_buffer_7_preg[46] <= 1'b1;
            opad_buffer_7_preg[50] <= 1'b1;
            opad_buffer_7_preg[51] <= 1'b1;
            opad_buffer_7_preg[52] <= 1'b1;
            opad_buffer_7_preg[54] <= 1'b1;
            opad_buffer_7_preg[58] <= 1'b1;
            opad_buffer_7_preg[59] <= 1'b1;
            opad_buffer_7_preg[60] <= 1'b1;
            opad_buffer_7_preg[62] <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                opad_buffer_8_preg[2] <= 1'b0;
        opad_buffer_8_preg[3] <= 1'b0;
        opad_buffer_8_preg[4] <= 1'b0;
        opad_buffer_8_preg[6] <= 1'b0;
        opad_buffer_8_preg[10] <= 1'b0;
        opad_buffer_8_preg[11] <= 1'b0;
        opad_buffer_8_preg[12] <= 1'b0;
        opad_buffer_8_preg[14] <= 1'b0;
        opad_buffer_8_preg[18] <= 1'b0;
        opad_buffer_8_preg[19] <= 1'b0;
        opad_buffer_8_preg[20] <= 1'b0;
        opad_buffer_8_preg[22] <= 1'b0;
        opad_buffer_8_preg[26] <= 1'b0;
        opad_buffer_8_preg[27] <= 1'b0;
        opad_buffer_8_preg[28] <= 1'b0;
        opad_buffer_8_preg[30] <= 1'b0;
        opad_buffer_8_preg[34] <= 1'b0;
        opad_buffer_8_preg[35] <= 1'b0;
        opad_buffer_8_preg[36] <= 1'b0;
        opad_buffer_8_preg[38] <= 1'b0;
        opad_buffer_8_preg[42] <= 1'b0;
        opad_buffer_8_preg[43] <= 1'b0;
        opad_buffer_8_preg[44] <= 1'b0;
        opad_buffer_8_preg[46] <= 1'b0;
        opad_buffer_8_preg[50] <= 1'b0;
        opad_buffer_8_preg[51] <= 1'b0;
        opad_buffer_8_preg[52] <= 1'b0;
        opad_buffer_8_preg[54] <= 1'b0;
        opad_buffer_8_preg[58] <= 1'b0;
        opad_buffer_8_preg[59] <= 1'b0;
        opad_buffer_8_preg[60] <= 1'b0;
        opad_buffer_8_preg[62] <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state24) & (blk_strm1_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state45) & (blk_strm1_full_n == 1'b1)))) begin
                        opad_buffer_8_preg[2] <= 1'b1;
            opad_buffer_8_preg[3] <= 1'b1;
            opad_buffer_8_preg[4] <= 1'b1;
            opad_buffer_8_preg[6] <= 1'b1;
            opad_buffer_8_preg[10] <= 1'b1;
            opad_buffer_8_preg[11] <= 1'b1;
            opad_buffer_8_preg[12] <= 1'b1;
            opad_buffer_8_preg[14] <= 1'b1;
            opad_buffer_8_preg[18] <= 1'b1;
            opad_buffer_8_preg[19] <= 1'b1;
            opad_buffer_8_preg[20] <= 1'b1;
            opad_buffer_8_preg[22] <= 1'b1;
            opad_buffer_8_preg[26] <= 1'b1;
            opad_buffer_8_preg[27] <= 1'b1;
            opad_buffer_8_preg[28] <= 1'b1;
            opad_buffer_8_preg[30] <= 1'b1;
            opad_buffer_8_preg[34] <= 1'b1;
            opad_buffer_8_preg[35] <= 1'b1;
            opad_buffer_8_preg[36] <= 1'b1;
            opad_buffer_8_preg[38] <= 1'b1;
            opad_buffer_8_preg[42] <= 1'b1;
            opad_buffer_8_preg[43] <= 1'b1;
            opad_buffer_8_preg[44] <= 1'b1;
            opad_buffer_8_preg[46] <= 1'b1;
            opad_buffer_8_preg[50] <= 1'b1;
            opad_buffer_8_preg[51] <= 1'b1;
            opad_buffer_8_preg[52] <= 1'b1;
            opad_buffer_8_preg[54] <= 1'b1;
            opad_buffer_8_preg[58] <= 1'b1;
            opad_buffer_8_preg[59] <= 1'b1;
            opad_buffer_8_preg[60] <= 1'b1;
            opad_buffer_8_preg[62] <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                opad_buffer_9_preg[2] <= 1'b0;
        opad_buffer_9_preg[3] <= 1'b0;
        opad_buffer_9_preg[4] <= 1'b0;
        opad_buffer_9_preg[6] <= 1'b0;
        opad_buffer_9_preg[10] <= 1'b0;
        opad_buffer_9_preg[11] <= 1'b0;
        opad_buffer_9_preg[12] <= 1'b0;
        opad_buffer_9_preg[14] <= 1'b0;
        opad_buffer_9_preg[18] <= 1'b0;
        opad_buffer_9_preg[19] <= 1'b0;
        opad_buffer_9_preg[20] <= 1'b0;
        opad_buffer_9_preg[22] <= 1'b0;
        opad_buffer_9_preg[26] <= 1'b0;
        opad_buffer_9_preg[27] <= 1'b0;
        opad_buffer_9_preg[28] <= 1'b0;
        opad_buffer_9_preg[30] <= 1'b0;
        opad_buffer_9_preg[34] <= 1'b0;
        opad_buffer_9_preg[35] <= 1'b0;
        opad_buffer_9_preg[36] <= 1'b0;
        opad_buffer_9_preg[38] <= 1'b0;
        opad_buffer_9_preg[42] <= 1'b0;
        opad_buffer_9_preg[43] <= 1'b0;
        opad_buffer_9_preg[44] <= 1'b0;
        opad_buffer_9_preg[46] <= 1'b0;
        opad_buffer_9_preg[50] <= 1'b0;
        opad_buffer_9_preg[51] <= 1'b0;
        opad_buffer_9_preg[52] <= 1'b0;
        opad_buffer_9_preg[54] <= 1'b0;
        opad_buffer_9_preg[58] <= 1'b0;
        opad_buffer_9_preg[59] <= 1'b0;
        opad_buffer_9_preg[60] <= 1'b0;
        opad_buffer_9_preg[62] <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state24) & (blk_strm1_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state45) & (blk_strm1_full_n == 1'b1)))) begin
                        opad_buffer_9_preg[2] <= 1'b1;
            opad_buffer_9_preg[3] <= 1'b1;
            opad_buffer_9_preg[4] <= 1'b1;
            opad_buffer_9_preg[6] <= 1'b1;
            opad_buffer_9_preg[10] <= 1'b1;
            opad_buffer_9_preg[11] <= 1'b1;
            opad_buffer_9_preg[12] <= 1'b1;
            opad_buffer_9_preg[14] <= 1'b1;
            opad_buffer_9_preg[18] <= 1'b1;
            opad_buffer_9_preg[19] <= 1'b1;
            opad_buffer_9_preg[20] <= 1'b1;
            opad_buffer_9_preg[22] <= 1'b1;
            opad_buffer_9_preg[26] <= 1'b1;
            opad_buffer_9_preg[27] <= 1'b1;
            opad_buffer_9_preg[28] <= 1'b1;
            opad_buffer_9_preg[30] <= 1'b1;
            opad_buffer_9_preg[34] <= 1'b1;
            opad_buffer_9_preg[35] <= 1'b1;
            opad_buffer_9_preg[36] <= 1'b1;
            opad_buffer_9_preg[38] <= 1'b1;
            opad_buffer_9_preg[42] <= 1'b1;
            opad_buffer_9_preg[43] <= 1'b1;
            opad_buffer_9_preg[44] <= 1'b1;
            opad_buffer_9_preg[46] <= 1'b1;
            opad_buffer_9_preg[50] <= 1'b1;
            opad_buffer_9_preg[51] <= 1'b1;
            opad_buffer_9_preg[52] <= 1'b1;
            opad_buffer_9_preg[54] <= 1'b1;
            opad_buffer_9_preg[58] <= 1'b1;
            opad_buffer_9_preg[59] <= 1'b1;
            opad_buffer_9_preg[60] <= 1'b1;
            opad_buffer_9_preg[62] <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((blk_strm1_full_n == 1'b1)) begin
        if (((tmp_5_reg_1294 == 1'd1) & (1'b1 == ap_CS_fsm_state24))) begin
            HUH_0_lcssa_in_in_in_reg_354 <= tmp_13_reg_1284;
        end else if (((tmp_8_reg_1357 == 1'd1) & (1'b1 == ap_CS_fsm_state32))) begin
            HUH_0_lcssa_in_in_in_reg_354 <= tmp_15_reg_1347;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((blk_strm1_full_n == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state34)) begin
            HUH_V_in_in_in_reg_415 <= HUH_0_lcssa_in_in_in_reg_354;
        end else if ((1'b1 == ap_CS_fsm_state45)) begin
            HUH_V_in_in_in_reg_415 <= tmp_10_reg_1233;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((blk_strm1_full_n == 1'b1)) begin
        if (((tmp_5_reg_1294 == 1'd1) & (1'b1 == ap_CS_fsm_state24))) begin
            bigHUH_0_lcssa_in_in_in_reg_345 <= reg_520;
        end else if (((tmp_8_reg_1357 == 1'd1) & (1'b1 == ap_CS_fsm_state32))) begin
            bigHUH_0_lcssa_in_in_in_reg_345 <= tmp_14_reg_1341;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((blk_strm1_full_n == 1'b1)) begin
        if (((tmp_5_reg_1294 == 1'd1) & (1'b1 == ap_CS_fsm_state24))) begin
            counter_0_lcssa_reg_382 <= 4'd7;
        end else if (((tmp_8_reg_1357 == 1'd1) & (1'b1 == ap_CS_fsm_state32))) begin
            counter_0_lcssa_reg_382 <= counter_V_7_fu_876_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_531)) begin
        if ((icmp_ln1065_2_fu_960_p2 == 1'd0)) begin
            counter_V_3_reg_405 <= counter_0_lcssa_reg_382;
        end else if ((icmp_ln1065_2_fu_960_p2 == 1'd1)) begin
            counter_V_3_reg_405 <= counter_V_8_fu_971_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((blk_strm1_full_n == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state34)) begin
            counter_V_5_reg_434 <= counter_V_9_fu_1128_p2;
        end else if ((1'b1 == ap_CS_fsm_state45)) begin
            counter_V_5_reg_434 <= 4'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((blk_strm1_full_n == 1'b1)) begin
        if (((tmp_5_reg_1294 == 1'd0) & (1'b1 == ap_CS_fsm_state24))) begin
            counter_V_fu_198 <= 4'd7;
        end else if (((tmp_8_reg_1357 == 1'd0) & (1'b1 == ap_CS_fsm_state32))) begin
            counter_V_fu_198 <= counter_V_7_fu_876_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_531)) begin
        if ((icmp_ln1065_2_fu_960_p2 == 1'd0)) begin
            l_V_reg_394 <= {{bigHUH_0_lcssa_in_in_in_reg_345[383:320]}};
        end else if ((icmp_ln1065_2_fu_960_p2 == 1'd1)) begin
            l_V_reg_394 <= 64'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((blk_strm1_full_n == 1'b1)) begin
        if (((tmp_5_reg_1294 == 1'd1) & (1'b1 == ap_CS_fsm_state24))) begin
            last_len_V_reg_364 <= tmp_len_V_4_cast_reg_1289;
        end else if (((tmp_8_reg_1357 == 1'd1) & (1'b1 == ap_CS_fsm_state32))) begin
            last_len_V_reg_364 <= tmp_len_V_5_cast_reg_1352;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((blk_strm1_full_n == 1'b1)) begin
        if (((tmp_5_reg_1294 == 1'd0) & (1'b1 == ap_CS_fsm_state24))) begin
            p_Val2_5_fu_186 <= reg_520;
        end else if (((tmp_8_reg_1357 == 1'd0) & (1'b1 == ap_CS_fsm_state32))) begin
            p_Val2_5_fu_186 <= tmp_14_reg_1341;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((blk_strm1_full_n == 1'b1)) begin
        if (((tmp_5_reg_1294 == 1'd1) & (1'b1 == ap_CS_fsm_state24))) begin
            total_len_0_lcssa_reg_373 <= zext_ln866_2_fu_768_p1;
        end else if (((tmp_8_reg_1357 == 1'd1) & (1'b1 == ap_CS_fsm_state32))) begin
            total_len_0_lcssa_reg_373 <= add_ln145_fu_934_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((blk_strm1_full_n == 1'b1)) begin
        if (((tmp_5_reg_1294 == 1'd0) & (1'b1 == ap_CS_fsm_state24))) begin
            total_len_V_2_fu_194 <= zext_ln866_1_fu_764_p1;
        end else if (((tmp_8_reg_1357 == 1'd0) & (1'b1 == ap_CS_fsm_state32))) begin
            total_len_V_2_fu_194 <= total_len_V_7_fu_901_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((blk_strm1_full_n == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state34)) begin
            total_len_V_5_reg_425 <= total_len_V_8_reg_1376;
        end else if ((1'b1 == ap_CS_fsm_state45)) begin
            total_len_V_5_reg_425 <= zext_ln866_reg_1263;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        Hi_reg_1389 <= Hi_fu_989_p2;
        Lo_reg_1394[5 : 3] <= Lo_fu_995_p2[5 : 3];
        icmp_ln414_reg_1399 <= icmp_ln414_fu_1001_p2;
        total_len_V_8_reg_1376 <= total_len_V_8_fu_954_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        L_V_reg_1417 <= {{total_len_V_5_reg_425[124:61]}};
        icmp_ln1065_3_reg_1427 <= icmp_ln1065_3_fu_1183_p2;
        icmp_ln1065_4_reg_1432 <= icmp_ln1065_4_fu_1199_p2;
        trunc_ln674_reg_1422 <= trunc_ln674_fu_1169_p1;
        z_rounds_V_reg_1412 <= z_rounds_V_fu_1152_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        ll0_V_2_reg_1239 <= ll0_V_2_fu_545_p1;
        ll5_V_2_reg_1245 <= {{msg_key_strm167_dout[383:320]}};
        tmp_10_reg_1233 <= len_strm168_dout;
        tmp_len_V_reg_1251 <= {{len_strm168_dout[34:30]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        ll6_V_1_reg_1331 <= {{p_Val2_5_fu_186[447:384]}};
        ll7_V_1_reg_1336 <= {{p_Val2_5_fu_186[511:448]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & ((icmp_ln1065_fu_687_p2 == 1'd0) | (icmp_ln1065_1_fu_701_p2 == 1'd0)))) begin
        ll6_V_reg_1274 <= {{reg_520[447:384]}};
        ll7_V_reg_1279 <= {{reg_520[511:448]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state20))) begin
        reg_520 <= msg_key_strm167_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state20))) begin
        reg_525 <= {{msg_key_strm167_dout[127:64]}};
        reg_529 <= {{msg_key_strm167_dout[191:128]}};
        reg_533 <= {{msg_key_strm167_dout[255:192]}};
        reg_537 <= {{msg_key_strm167_dout[319:256]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state20))) begin
        reg_541 <= {{len_strm168_dout[29:25]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        tmp_13_reg_1284 <= len_strm168_dout;
        tmp_5_reg_1294 <= len_strm168_dout[32'd29];
        tmp_len_V_4_cast_reg_1289 <= {{len_strm168_dout[28:25]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        tmp_14_reg_1341 <= msg_key_strm167_dout;
        tmp_15_reg_1347 <= len_strm168_dout;
        tmp_8_reg_1357 <= len_strm168_dout[32'd29];
        tmp_len_V_5_cast_reg_1352 <= {{len_strm168_dout[28:25]}};
    end
end

always @ (posedge ap_clk) begin
    if ((((tmp_5_reg_1294 == 1'd0) & (1'b1 == ap_CS_fsm_state24) & (blk_strm1_full_n == 1'b1)) | ((tmp_8_reg_1357 == 1'd0) & (1'b1 == ap_CS_fsm_state32) & (blk_strm1_full_n == 1'b1)))) begin
        tmp_len_V_2_fu_190 <= reg_541;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        zext_ln866_reg_1263[4 : 0] <= zext_ln866_fu_683_p1[4 : 0];
        zext_ln886_reg_1258[4 : 0] <= zext_ln886_fu_673_p1[4 : 0];
    end
end

always @ (*) begin
    if ((blk_strm1_full_n == 1'b0)) begin
        ap_ST_fsm_state10_blk = 1'b1;
    end else begin
        ap_ST_fsm_state10_blk = 1'b0;
    end
end

always @ (*) begin
    if ((blk_strm1_full_n == 1'b0)) begin
        ap_ST_fsm_state11_blk = 1'b1;
    end else begin
        ap_ST_fsm_state11_blk = 1'b0;
    end
end

always @ (*) begin
    if ((blk_strm1_full_n == 1'b0)) begin
        ap_ST_fsm_state12_blk = 1'b1;
    end else begin
        ap_ST_fsm_state12_blk = 1'b0;
    end
end

always @ (*) begin
    if ((blk_strm1_full_n == 1'b0)) begin
        ap_ST_fsm_state13_blk = 1'b1;
    end else begin
        ap_ST_fsm_state13_blk = 1'b0;
    end
end

always @ (*) begin
    if ((blk_strm1_full_n == 1'b0)) begin
        ap_ST_fsm_state14_blk = 1'b1;
    end else begin
        ap_ST_fsm_state14_blk = 1'b0;
    end
end

always @ (*) begin
    if ((blk_strm1_full_n == 1'b0)) begin
        ap_ST_fsm_state15_blk = 1'b1;
    end else begin
        ap_ST_fsm_state15_blk = 1'b0;
    end
end

always @ (*) begin
    if ((blk_strm1_full_n == 1'b0)) begin
        ap_ST_fsm_state16_blk = 1'b1;
    end else begin
        ap_ST_fsm_state16_blk = 1'b0;
    end
end

always @ (*) begin
    if ((blk_strm1_full_n == 1'b0)) begin
        ap_ST_fsm_state17_blk = 1'b1;
    end else begin
        ap_ST_fsm_state17_blk = 1'b0;
    end
end

always @ (*) begin
    if ((blk_strm1_full_n == 1'b0)) begin
        ap_ST_fsm_state18_blk = 1'b1;
    end else begin
        ap_ST_fsm_state18_blk = 1'b0;
    end
end

always @ (*) begin
    if ((blk_strm1_full_n == 1'b0)) begin
        ap_ST_fsm_state19_blk = 1'b1;
    end else begin
        ap_ST_fsm_state19_blk = 1'b0;
    end
end

always @ (*) begin
    if (((ap_done_reg == 1'b1) | (real_start == 1'b0) | (len_strm168_empty_n == 1'b0) | (msg_key_strm167_empty_n == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((blk_strm1_full_n == 1'b0) | (len_strm168_empty_n == 1'b0) | (msg_key_strm167_empty_n == 1'b0))) begin
        ap_ST_fsm_state20_blk = 1'b1;
    end else begin
        ap_ST_fsm_state20_blk = 1'b0;
    end
end

always @ (*) begin
    if ((blk_strm1_full_n == 1'b0)) begin
        ap_ST_fsm_state21_blk = 1'b1;
    end else begin
        ap_ST_fsm_state21_blk = 1'b0;
    end
end

always @ (*) begin
    if ((blk_strm1_full_n == 1'b0)) begin
        ap_ST_fsm_state22_blk = 1'b1;
    end else begin
        ap_ST_fsm_state22_blk = 1'b0;
    end
end

always @ (*) begin
    if ((blk_strm1_full_n == 1'b0)) begin
        ap_ST_fsm_state23_blk = 1'b1;
    end else begin
        ap_ST_fsm_state23_blk = 1'b0;
    end
end

always @ (*) begin
    if ((blk_strm1_full_n == 1'b0)) begin
        ap_ST_fsm_state24_blk = 1'b1;
    end else begin
        ap_ST_fsm_state24_blk = 1'b0;
    end
end

always @ (*) begin
    if ((blk_strm1_full_n == 1'b0)) begin
        ap_ST_fsm_state25_blk = 1'b1;
    end else begin
        ap_ST_fsm_state25_blk = 1'b0;
    end
end

always @ (*) begin
    if ((blk_strm1_full_n == 1'b0)) begin
        ap_ST_fsm_state26_blk = 1'b1;
    end else begin
        ap_ST_fsm_state26_blk = 1'b0;
    end
end

always @ (*) begin
    if ((blk_strm1_full_n == 1'b0)) begin
        ap_ST_fsm_state27_blk = 1'b1;
    end else begin
        ap_ST_fsm_state27_blk = 1'b0;
    end
end

always @ (*) begin
    if (((blk_strm1_full_n == 1'b0) | (len_strm168_empty_n == 1'b0) | (msg_key_strm167_empty_n == 1'b0))) begin
        ap_ST_fsm_state28_blk = 1'b1;
    end else begin
        ap_ST_fsm_state28_blk = 1'b0;
    end
end

always @ (*) begin
    if ((blk_strm1_full_n == 1'b0)) begin
        ap_ST_fsm_state29_blk = 1'b1;
    end else begin
        ap_ST_fsm_state29_blk = 1'b0;
    end
end

always @ (*) begin
    if ((blk_strm1_full_n == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if ((blk_strm1_full_n == 1'b0)) begin
        ap_ST_fsm_state30_blk = 1'b1;
    end else begin
        ap_ST_fsm_state30_blk = 1'b0;
    end
end

always @ (*) begin
    if ((blk_strm1_full_n == 1'b0)) begin
        ap_ST_fsm_state31_blk = 1'b1;
    end else begin
        ap_ST_fsm_state31_blk = 1'b0;
    end
end

always @ (*) begin
    if ((blk_strm1_full_n == 1'b0)) begin
        ap_ST_fsm_state32_blk = 1'b1;
    end else begin
        ap_ST_fsm_state32_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln1065_2_fu_960_p2 == 1'd1) & (blk_strm1_full_n == 1'b0))) begin
        ap_ST_fsm_state33_blk = 1'b1;
    end else begin
        ap_ST_fsm_state33_blk = 1'b0;
    end
end

always @ (*) begin
    if ((blk_strm1_full_n == 1'b0)) begin
        ap_ST_fsm_state34_blk = 1'b1;
    end else begin
        ap_ST_fsm_state34_blk = 1'b0;
    end
end

always @ (*) begin
    if ((blk_strm1_full_n == 1'b0)) begin
        ap_ST_fsm_state35_blk = 1'b1;
    end else begin
        ap_ST_fsm_state35_blk = 1'b0;
    end
end

always @ (*) begin
    if ((blk_strm1_full_n == 1'b0)) begin
        ap_ST_fsm_state36_blk = 1'b1;
    end else begin
        ap_ST_fsm_state36_blk = 1'b0;
    end
end

always @ (*) begin
    if ((blk_strm1_full_n == 1'b0)) begin
        ap_ST_fsm_state37_blk = 1'b1;
    end else begin
        ap_ST_fsm_state37_blk = 1'b0;
    end
end

always @ (*) begin
    if ((blk_strm1_full_n == 1'b0)) begin
        ap_ST_fsm_state38_blk = 1'b1;
    end else begin
        ap_ST_fsm_state38_blk = 1'b0;
    end
end

always @ (*) begin
    if ((blk_strm1_full_n == 1'b0)) begin
        ap_ST_fsm_state39_blk = 1'b1;
    end else begin
        ap_ST_fsm_state39_blk = 1'b0;
    end
end

always @ (*) begin
    if ((blk_strm1_full_n == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((blk_strm1_full_n == 1'b0)) begin
        ap_ST_fsm_state40_blk = 1'b1;
    end else begin
        ap_ST_fsm_state40_blk = 1'b0;
    end
end

always @ (*) begin
    if ((blk_strm1_full_n == 1'b0)) begin
        ap_ST_fsm_state41_blk = 1'b1;
    end else begin
        ap_ST_fsm_state41_blk = 1'b0;
    end
end

always @ (*) begin
    if ((blk_strm1_full_n == 1'b0)) begin
        ap_ST_fsm_state42_blk = 1'b1;
    end else begin
        ap_ST_fsm_state42_blk = 1'b0;
    end
end

always @ (*) begin
    if ((blk_strm1_full_n == 1'b0)) begin
        ap_ST_fsm_state43_blk = 1'b1;
    end else begin
        ap_ST_fsm_state43_blk = 1'b0;
    end
end

always @ (*) begin
    if ((blk_strm1_full_n == 1'b0)) begin
        ap_ST_fsm_state44_blk = 1'b1;
    end else begin
        ap_ST_fsm_state44_blk = 1'b0;
    end
end

always @ (*) begin
    if ((blk_strm1_full_n == 1'b0)) begin
        ap_ST_fsm_state45_blk = 1'b1;
    end else begin
        ap_ST_fsm_state45_blk = 1'b0;
    end
end

assign ap_ST_fsm_state46_blk = 1'b0;

always @ (*) begin
    if ((grp_preProcessingOneTripForHMAC21_Pipeline_VITIS_LOOP_1066_2_fu_445_ap_done == 1'b0)) begin
        ap_ST_fsm_state47_blk = 1'b1;
    end else begin
        ap_ST_fsm_state47_blk = 1'b0;
    end
end

always @ (*) begin
    if ((blk_strm1_full_n == 1'b0)) begin
        ap_ST_fsm_state48_blk = 1'b1;
    end else begin
        ap_ST_fsm_state48_blk = 1'b0;
    end
end

always @ (*) begin
    if ((blk_strm1_full_n == 1'b0)) begin
        ap_ST_fsm_state49_blk = 1'b1;
    end else begin
        ap_ST_fsm_state49_blk = 1'b0;
    end
end

always @ (*) begin
    if ((blk_strm1_full_n == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if ((blk_strm1_full_n == 1'b0)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

always @ (*) begin
    if ((blk_strm1_full_n == 1'b0)) begin
        ap_ST_fsm_state6_blk = 1'b1;
    end else begin
        ap_ST_fsm_state6_blk = 1'b0;
    end
end

always @ (*) begin
    if ((blk_strm1_full_n == 1'b0)) begin
        ap_ST_fsm_state7_blk = 1'b1;
    end else begin
        ap_ST_fsm_state7_blk = 1'b0;
    end
end

always @ (*) begin
    if ((blk_strm1_full_n == 1'b0)) begin
        ap_ST_fsm_state8_blk = 1'b1;
    end else begin
        ap_ST_fsm_state8_blk = 1'b0;
    end
end

always @ (*) begin
    if ((blk_strm1_full_n == 1'b0)) begin
        ap_ST_fsm_state9_blk = 1'b1;
    end else begin
        ap_ST_fsm_state9_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state49) & (blk_strm1_full_n == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state20) | ((icmp_ln1065_2_fu_960_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state33)))) begin
        blk_strm1_blk_n = blk_strm1_full_n;
    end else begin
        blk_strm1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state49) & (blk_strm1_full_n == 1'b1))) begin
        blk_strm1_din = L_V_2_fu_1225_p3;
    end else if (((1'b1 == ap_CS_fsm_state48) & (blk_strm1_full_n == 1'b1))) begin
        blk_strm1_din = zext_ln404_fu_1205_p1;
    end else if (((1'b1 == ap_CS_fsm_state45) & (blk_strm1_full_n == 1'b1))) begin
        blk_strm1_din = 65'd9223372036854775808;
    end else if (((1'b1 == ap_CS_fsm_state34) & (blk_strm1_full_n == 1'b1))) begin
        blk_strm1_din = zext_ln232_22_fu_1123_p1;
    end else if ((~((icmp_ln1065_2_fu_960_p2 == 1'd1) & (blk_strm1_full_n == 1'b0)) & (icmp_ln1065_2_fu_960_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state33))) begin
        blk_strm1_din = zext_ln232_21_fu_966_p1;
    end else if (((1'b1 == ap_CS_fsm_state32) & (blk_strm1_full_n == 1'b1))) begin
        blk_strm1_din = zext_ln232_20_fu_882_p1;
    end else if (((1'b1 == ap_CS_fsm_state31) & (blk_strm1_full_n == 1'b1))) begin
        blk_strm1_din = zext_ln232_19_fu_862_p1;
    end else if (((1'b1 == ap_CS_fsm_state30) & (blk_strm1_full_n == 1'b1))) begin
        blk_strm1_din = zext_ln232_18_fu_857_p1;
    end else if (((1'b1 == ap_CS_fsm_state29) & (blk_strm1_full_n == 1'b1))) begin
        blk_strm1_din = zext_ln232_17_fu_852_p1;
    end else if ((~((blk_strm1_full_n == 1'b0) | (len_strm168_empty_n == 1'b0) | (msg_key_strm167_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state28))) begin
        blk_strm1_din = zext_ln232_16_fu_847_p1;
    end else if (((1'b1 == ap_CS_fsm_state27) & (blk_strm1_full_n == 1'b1))) begin
        blk_strm1_din = zext_ln232_15_fu_839_p1;
    end else if (((1'b1 == ap_CS_fsm_state26) & (blk_strm1_full_n == 1'b1))) begin
        blk_strm1_din = zext_ln232_14_fu_835_p1;
    end else if (((1'b1 == ap_CS_fsm_state25) & (blk_strm1_full_n == 1'b1))) begin
        blk_strm1_din = zext_ln232_13_fu_830_p1;
    end else if (((1'b1 == ap_CS_fsm_state24) & (blk_strm1_full_n == 1'b1))) begin
        blk_strm1_din = zext_ln232_12_fu_772_p1;
    end else if (((1'b1 == ap_CS_fsm_state23) & (blk_strm1_full_n == 1'b1))) begin
        blk_strm1_din = zext_ln232_11_fu_754_p1;
    end else if (((1'b1 == ap_CS_fsm_state22) & (blk_strm1_full_n == 1'b1))) begin
        blk_strm1_din = zext_ln232_10_fu_749_p1;
    end else if (((1'b1 == ap_CS_fsm_state21) & (blk_strm1_full_n == 1'b1))) begin
        blk_strm1_din = zext_ln232_9_fu_744_p1;
    end else if ((~((blk_strm1_full_n == 1'b0) | (len_strm168_empty_n == 1'b0) | (msg_key_strm167_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state20))) begin
        blk_strm1_din = zext_ln232_8_fu_739_p1;
    end else if (((1'b1 == ap_CS_fsm_state19) & (blk_strm1_full_n == 1'b1))) begin
        blk_strm1_din = zext_ln232_7_fu_731_p1;
    end else if (((1'b1 == ap_CS_fsm_state18) & (blk_strm1_full_n == 1'b1))) begin
        blk_strm1_din = zext_ln232_6_fu_727_p1;
    end else if ((((1'b1 == ap_CS_fsm_state17) & (blk_strm1_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state16) & (blk_strm1_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state15) & (blk_strm1_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state14) & (blk_strm1_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state13) & (blk_strm1_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state12) & (blk_strm1_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state11) & (blk_strm1_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state10) & (blk_strm1_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state9) & (blk_strm1_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state8) & (blk_strm1_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state44) & (blk_strm1_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state43) & (blk_strm1_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state42) & (blk_strm1_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state41) & (blk_strm1_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state40) & (blk_strm1_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state39) & (blk_strm1_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state38) & (blk_strm1_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state37) & (blk_strm1_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state36) & (blk_strm1_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state35) & (blk_strm1_full_n == 1'b1)))) begin
        blk_strm1_din = 65'd3906369333256140342;
    end else if (((1'b1 == ap_CS_fsm_state7) & (blk_strm1_full_n == 1'b1))) begin
        blk_strm1_din = zext_ln232_5_fu_668_p1;
    end else if (((1'b1 == ap_CS_fsm_state6) & (blk_strm1_full_n == 1'b1))) begin
        blk_strm1_din = zext_ln232_4_fu_658_p1;
    end else if (((1'b1 == ap_CS_fsm_state5) & (blk_strm1_full_n == 1'b1))) begin
        blk_strm1_din = zext_ln232_3_fu_647_p1;
    end else if (((1'b1 == ap_CS_fsm_state4) & (blk_strm1_full_n == 1'b1))) begin
        blk_strm1_din = zext_ln232_2_fu_636_p1;
    end else if (((1'b1 == ap_CS_fsm_state3) & (blk_strm1_full_n == 1'b1))) begin
        blk_strm1_din = zext_ln232_1_fu_625_p1;
    end else if (((1'b1 == ap_CS_fsm_state2) & (blk_strm1_full_n == 1'b1))) begin
        blk_strm1_din = zext_ln232_fu_580_p1;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        blk_strm1_din = grp_preProcessingOneTripForHMAC21_Pipeline_VITIS_LOOP_1066_2_fu_445_blk_strm1_din;
    end else begin
        blk_strm1_din = grp_preProcessingOneTripForHMAC21_Pipeline_VITIS_LOOP_1066_2_fu_445_blk_strm1_din;
    end
end

always @ (*) begin
    if (((~((blk_strm1_full_n == 1'b0) | (len_strm168_empty_n == 1'b0) | (msg_key_strm167_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state28)) | (~((blk_strm1_full_n == 1'b0) | (len_strm168_empty_n == 1'b0) | (msg_key_strm167_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state20)) | (~((icmp_ln1065_2_fu_960_p2 == 1'd1) & (blk_strm1_full_n == 1'b0)) & (icmp_ln1065_2_fu_960_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state33)) | ((1'b1 == ap_CS_fsm_state49) & (blk_strm1_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state48) & (blk_strm1_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state34) & (blk_strm1_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state32) & (blk_strm1_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state31) & (blk_strm1_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state30) & (blk_strm1_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state29) & (blk_strm1_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state27) & (blk_strm1_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state26) & (blk_strm1_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state25) & (blk_strm1_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state24) & (blk_strm1_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state23) & (blk_strm1_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state22) & (blk_strm1_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state21) & (blk_strm1_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state19) & (blk_strm1_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state18) & (blk_strm1_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state17) & (blk_strm1_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state16) & (blk_strm1_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state15) & (blk_strm1_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state14) & (blk_strm1_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state13) & (blk_strm1_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state12) & (blk_strm1_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state11) & (blk_strm1_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state10) & (blk_strm1_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state9) & (blk_strm1_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state8) & (blk_strm1_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state45) & (blk_strm1_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state44) & (blk_strm1_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state43) & (blk_strm1_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state42) & (blk_strm1_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state41) & (blk_strm1_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state40) & (blk_strm1_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state39) & (blk_strm1_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state38) & (blk_strm1_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state37) & (blk_strm1_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state36) & (blk_strm1_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state35) & (blk_strm1_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state7) & (blk_strm1_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state6) & (blk_strm1_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state5) & (blk_strm1_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state4) & (blk_strm1_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state3) & (blk_strm1_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state2) & (blk_strm1_full_n == 1'b1)))) begin
        blk_strm1_write = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        blk_strm1_write = grp_preProcessingOneTripForHMAC21_Pipeline_VITIS_LOOP_1066_2_fu_445_blk_strm1_write;
    end else begin
        blk_strm1_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state49) & (blk_strm1_full_n == 1'b1))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state20) | (~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
        len_strm168_blk_n = len_strm168_empty_n;
    end else begin
        len_strm168_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~((blk_strm1_full_n == 1'b0) | (len_strm168_empty_n == 1'b0) | (msg_key_strm167_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state28)) | (~((blk_strm1_full_n == 1'b0) | (len_strm168_empty_n == 1'b0) | (msg_key_strm167_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state20)) | (~((ap_done_reg == 1'b1) | (real_start == 1'b0) | (len_strm168_empty_n == 1'b0) | (msg_key_strm167_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
        len_strm168_read = 1'b1;
    end else begin
        len_strm168_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state20) | (~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
        msg_key_strm167_blk_n = msg_key_strm167_empty_n;
    end else begin
        msg_key_strm167_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~((blk_strm1_full_n == 1'b0) | (len_strm168_empty_n == 1'b0) | (msg_key_strm167_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state28)) | (~((blk_strm1_full_n == 1'b0) | (len_strm168_empty_n == 1'b0) | (msg_key_strm167_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state20)) | (~((ap_done_reg == 1'b1) | (real_start == 1'b0) | (len_strm168_empty_n == 1'b0) | (msg_key_strm167_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
        msg_key_strm167_read = 1'b1;
    end else begin
        msg_key_strm167_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (blk_strm1_full_n == 1'b1))) begin
        opad_buffer_0 = ret_V_fu_574_p2;
    end else begin
        opad_buffer_0 = opad_buffer_0_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (blk_strm1_full_n == 1'b1))) begin
        opad_buffer_1 = ret_V_3_fu_585_p2;
    end else begin
        opad_buffer_1 = opad_buffer_1_preg;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state24) & (blk_strm1_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state45) & (blk_strm1_full_n == 1'b1)))) begin
        opad_buffer_10 = 63'd6655295901103053916;
    end else begin
        opad_buffer_10 = opad_buffer_10_preg;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state24) & (blk_strm1_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state45) & (blk_strm1_full_n == 1'b1)))) begin
        opad_buffer_11 = 63'd6655295901103053916;
    end else begin
        opad_buffer_11 = opad_buffer_11_preg;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state24) & (blk_strm1_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state45) & (blk_strm1_full_n == 1'b1)))) begin
        opad_buffer_12 = 63'd6655295901103053916;
    end else begin
        opad_buffer_12 = opad_buffer_12_preg;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state24) & (blk_strm1_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state45) & (blk_strm1_full_n == 1'b1)))) begin
        opad_buffer_13 = 63'd6655295901103053916;
    end else begin
        opad_buffer_13 = opad_buffer_13_preg;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state24) & (blk_strm1_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state45) & (blk_strm1_full_n == 1'b1)))) begin
        opad_buffer_14 = 63'd6655295901103053916;
    end else begin
        opad_buffer_14 = opad_buffer_14_preg;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state24) & (blk_strm1_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state45) & (blk_strm1_full_n == 1'b1)))) begin
        opad_buffer_15 = 63'd6655295901103053916;
    end else begin
        opad_buffer_15 = opad_buffer_15_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (blk_strm1_full_n == 1'b1))) begin
        opad_buffer_2 = ret_V_5_fu_592_p2;
    end else begin
        opad_buffer_2 = opad_buffer_2_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (blk_strm1_full_n == 1'b1))) begin
        opad_buffer_3 = ret_V_7_fu_599_p2;
    end else begin
        opad_buffer_3 = opad_buffer_3_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (blk_strm1_full_n == 1'b1))) begin
        opad_buffer_4 = ret_V_9_fu_606_p2;
    end else begin
        opad_buffer_4 = opad_buffer_4_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (blk_strm1_full_n == 1'b1))) begin
        opad_buffer_5 = ret_V_11_fu_613_p2;
    end else begin
        opad_buffer_5 = opad_buffer_5_preg;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state24) & (blk_strm1_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state45) & (blk_strm1_full_n == 1'b1)))) begin
        opad_buffer_6 = 63'd6655295901103053916;
    end else begin
        opad_buffer_6 = opad_buffer_6_preg;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state24) & (blk_strm1_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state45) & (blk_strm1_full_n == 1'b1)))) begin
        opad_buffer_7 = 63'd6655295901103053916;
    end else begin
        opad_buffer_7 = opad_buffer_7_preg;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state24) & (blk_strm1_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state45) & (blk_strm1_full_n == 1'b1)))) begin
        opad_buffer_8 = 63'd6655295901103053916;
    end else begin
        opad_buffer_8 = opad_buffer_8_preg;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state24) & (blk_strm1_full_n == 1'b1)) | ((1'b1 == ap_CS_fsm_state45) & (blk_strm1_full_n == 1'b1)))) begin
        opad_buffer_9 = 63'd6655295901103053916;
    end else begin
        opad_buffer_9 = opad_buffer_9_preg;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0) | (len_strm168_empty_n == 1'b0) | (msg_key_strm167_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (blk_strm1_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (blk_strm1_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (blk_strm1_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (blk_strm1_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (blk_strm1_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((icmp_ln1065_fu_687_p2 == 1'd1) & (icmp_ln1065_1_fu_701_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state7) & (blk_strm1_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else if (((1'b1 == ap_CS_fsm_state7) & (blk_strm1_full_n == 1'b1) & ((icmp_ln1065_fu_687_p2 == 1'd0) | (icmp_ln1065_1_fu_701_p2 == 1'd0)))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (blk_strm1_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (blk_strm1_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (blk_strm1_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (blk_strm1_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (blk_strm1_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((1'b1 == ap_CS_fsm_state13) & (blk_strm1_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((1'b1 == ap_CS_fsm_state14) & (blk_strm1_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((1'b1 == ap_CS_fsm_state15) & (blk_strm1_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            if (((1'b1 == ap_CS_fsm_state16) & (blk_strm1_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            if (((1'b1 == ap_CS_fsm_state17) & (blk_strm1_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            if (((1'b1 == ap_CS_fsm_state18) & (blk_strm1_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state19 : begin
            if (((1'b1 == ap_CS_fsm_state19) & (blk_strm1_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state20 : begin
            if ((~((blk_strm1_full_n == 1'b0) | (len_strm168_empty_n == 1'b0) | (msg_key_strm167_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state21 : begin
            if (((1'b1 == ap_CS_fsm_state21) & (blk_strm1_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            if (((1'b1 == ap_CS_fsm_state22) & (blk_strm1_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            if (((1'b1 == ap_CS_fsm_state23) & (blk_strm1_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state24 : begin
            if (((tmp_5_reg_1294 == 1'd0) & (1'b1 == ap_CS_fsm_state24) & (blk_strm1_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else if (((tmp_5_reg_1294 == 1'd1) & (1'b1 == ap_CS_fsm_state24) & (blk_strm1_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state25 : begin
            if (((1'b1 == ap_CS_fsm_state25) & (blk_strm1_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state26 : begin
            if (((1'b1 == ap_CS_fsm_state26) & (blk_strm1_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state27 : begin
            if (((1'b1 == ap_CS_fsm_state27) & (blk_strm1_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state28 : begin
            if ((~((blk_strm1_full_n == 1'b0) | (len_strm168_empty_n == 1'b0) | (msg_key_strm167_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state28))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        ap_ST_fsm_state29 : begin
            if (((1'b1 == ap_CS_fsm_state29) & (blk_strm1_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state30 : begin
            if (((1'b1 == ap_CS_fsm_state30) & (blk_strm1_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        ap_ST_fsm_state31 : begin
            if (((1'b1 == ap_CS_fsm_state31) & (blk_strm1_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_state32 : begin
            if (((tmp_8_reg_1357 == 1'd1) & (1'b1 == ap_CS_fsm_state32) & (blk_strm1_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else if (((tmp_8_reg_1357 == 1'd0) & (1'b1 == ap_CS_fsm_state32) & (blk_strm1_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        ap_ST_fsm_state33 : begin
            if ((~((icmp_ln1065_2_fu_960_p2 == 1'd1) & (blk_strm1_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state33))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        ap_ST_fsm_state34 : begin
            if (((1'b1 == ap_CS_fsm_state34) & (blk_strm1_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        ap_ST_fsm_state35 : begin
            if (((1'b1 == ap_CS_fsm_state35) & (blk_strm1_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        ap_ST_fsm_state36 : begin
            if (((1'b1 == ap_CS_fsm_state36) & (blk_strm1_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end
        end
        ap_ST_fsm_state37 : begin
            if (((1'b1 == ap_CS_fsm_state37) & (blk_strm1_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end
        end
        ap_ST_fsm_state38 : begin
            if (((1'b1 == ap_CS_fsm_state38) & (blk_strm1_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end
        end
        ap_ST_fsm_state39 : begin
            if (((1'b1 == ap_CS_fsm_state39) & (blk_strm1_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end
        end
        ap_ST_fsm_state40 : begin
            if (((1'b1 == ap_CS_fsm_state40) & (blk_strm1_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end
        end
        ap_ST_fsm_state41 : begin
            if (((1'b1 == ap_CS_fsm_state41) & (blk_strm1_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end
        end
        ap_ST_fsm_state42 : begin
            if (((1'b1 == ap_CS_fsm_state42) & (blk_strm1_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end
        end
        ap_ST_fsm_state43 : begin
            if (((1'b1 == ap_CS_fsm_state43) & (blk_strm1_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end
        end
        ap_ST_fsm_state44 : begin
            if (((1'b1 == ap_CS_fsm_state44) & (blk_strm1_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end
        end
        ap_ST_fsm_state45 : begin
            if (((1'b1 == ap_CS_fsm_state45) & (blk_strm1_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            if (((grp_preProcessingOneTripForHMAC21_Pipeline_VITIS_LOOP_1066_2_fu_445_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state47))) begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end
        end
        ap_ST_fsm_state48 : begin
            if (((1'b1 == ap_CS_fsm_state48) & (blk_strm1_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end
        end
        ap_ST_fsm_state49 : begin
            if (((1'b1 == ap_CS_fsm_state49) & (blk_strm1_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Hi_fu_989_p2 = (shl_ln_fu_981_p3 ^ 6'd63);

assign L_V_2_fu_1225_p3 = ((icmp_ln1065_3_reg_1427[0:0] == 1'b1) ? select_ln1077_fu_1218_p3 : p_Result_1_fu_1209_p4);

assign Lo_fu_995_p2 = ($signed(6'd56) - $signed(shl_ln_fu_981_p3));

assign add_ln145_fu_934_p2 = (trunc_ln886_fu_930_p1 + zext_ln886_4_fu_926_p1);

assign add_ln886_fu_891_p2 = (zext_ln886_1_fu_887_p1 + 7'd56);

assign and_ln414_1_fu_1105_p2 = (xor_ln414_2_fu_1099_p2 & l_V_reg_394);

assign and_ln414_2_fu_1111_p2 = (select_ln414_3_fu_1074_p3 & and_ln414_fu_1093_p2);

assign and_ln414_fu_1093_p2 = (shl_ln414_1_fu_1081_p2 & lshr_ln414_fu_1087_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (real_start == 1'b0) | (len_strm168_empty_n == 1'b0) | (msg_key_strm167_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state20 = ((blk_strm1_full_n == 1'b0) | (len_strm168_empty_n == 1'b0) | (msg_key_strm167_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state28 = ((blk_strm1_full_n == 1'b0) | (len_strm168_empty_n == 1'b0) | (msg_key_strm167_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state33 = ((icmp_ln1065_2_fu_960_p2 == 1'd1) & (blk_strm1_full_n == 1'b0));
end

always @ (*) begin
    ap_condition_531 = (~((icmp_ln1065_2_fu_960_p2 == 1'd1) & (blk_strm1_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state33));
end

assign ap_ready = internal_ap_ready;

assign counter_V_7_fu_876_p2 = (counter_V_fu_198 ^ 4'd8);

assign counter_V_8_fu_971_p2 = (counter_0_lcssa_reg_382 + 4'd1);

assign counter_V_9_fu_1128_p2 = (counter_V_3_reg_405 + 4'd1);

assign grp_preProcessingOneTripForHMAC21_Pipeline_VITIS_LOOP_1066_2_fu_445_ap_start = grp_preProcessingOneTripForHMAC21_Pipeline_VITIS_LOOP_1066_2_fu_445_ap_start_reg;

assign icmp_ln1065_1_fu_701_p2 = ((tmp_fu_692_p4 == 5'd24) ? 1'b1 : 1'b0);

assign icmp_ln1065_2_fu_960_p2 = ((last_len_V_reg_364 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln1065_3_fu_1183_p2 = ((tmp_2_fu_1173_p4 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln1065_4_fu_1199_p2 = ((tmp_3_fu_1189_p4 == 5'd24) ? 1'b1 : 1'b0);

assign icmp_ln1065_fu_687_p2 = ((tmp_len_V_reg_1251 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln1073_fu_1134_p2 = ((counter_V_5_reg_434 != 4'd15) ? 1'b1 : 1'b0);

assign icmp_ln414_fu_1001_p2 = ((Lo_fu_995_p2 > Hi_fu_989_p2) ? 1'b1 : 1'b0);

assign ll0_V_1_fu_843_p1 = msg_key_strm167_dout[63:0];

assign ll0_V_2_fu_545_p1 = msg_key_strm167_dout[63:0];

assign ll0_V_fu_735_p1 = msg_key_strm167_dout[63:0];

assign ll5_V_3_fu_940_p4 = {{bigHUH_0_lcssa_in_in_in_reg_345[383:320]}};

assign ll5_V_fu_800_p4 = {{p_Val2_5_fu_186[383:320]}};

assign lshr_ln414_fu_1087_p2 = 64'd18446744073709551615 >> zext_ln414_4_fu_1054_p1;

assign p_Result_1_fu_1209_p4 = {{{{1'd1}, {trunc_ln674_reg_1422}}}, {3'd0}};

assign p_Result_s_fu_1117_p2 = (and_ln414_2_fu_1111_p2 | and_ln414_1_fu_1105_p2);

assign ret_V_11_fu_613_p2 = (ll5_V_2_reg_1245 ^ 64'd6655295901103053916);

assign ret_V_12_fu_569_p2 = (ll0_V_2_reg_1239 ^ 64'd3906369333256140342);

assign ret_V_13_fu_619_p2 = (reg_525 ^ 64'd3906369333256140342);

assign ret_V_14_fu_630_p2 = (reg_529 ^ 64'd3906369333256140342);

assign ret_V_15_fu_641_p2 = (reg_533 ^ 64'd3906369333256140342);

assign ret_V_16_fu_652_p2 = (reg_537 ^ 64'd3906369333256140342);

assign ret_V_17_fu_663_p2 = (ll5_V_2_reg_1245 ^ 64'd3906369333256140342);

assign ret_V_3_fu_585_p2 = (reg_525 ^ 64'd6655295901103053916);

assign ret_V_5_fu_592_p2 = (reg_529 ^ 64'd6655295901103053916);

assign ret_V_7_fu_599_p2 = (reg_533 ^ 64'd6655295901103053916);

assign ret_V_9_fu_606_p2 = (reg_537 ^ 64'd6655295901103053916);

assign ret_V_fu_574_p2 = (ll0_V_2_reg_1239 ^ 64'd6655295901103053916);

assign select_ln1061_fu_1144_p3 = ((icmp_ln1073_fu_1134_p2[0:0] == 1'b1) ? 5'd14 : 5'd30);

assign select_ln1077_fu_1218_p3 = ((icmp_ln1065_4_reg_1432[0:0] == 1'b1) ? 65'd18446744073709552640 : p_Result_1_fu_1209_p4);

assign select_ln414_1_fu_1026_p3 = ((icmp_ln414_reg_1399[0:0] == 1'b1) ? zext_ln414_1_fu_1010_p1 : zext_ln414_fu_1007_p1);

assign select_ln414_2_fu_1033_p3 = ((icmp_ln414_reg_1399[0:0] == 1'b1) ? xor_ln414_fu_1013_p2 : zext_ln414_fu_1007_p1);

assign select_ln414_3_fu_1074_p3 = ((icmp_ln414_reg_1399[0:0] == 1'b1) ? tmp_9_fu_1064_p4 : shl_ln414_fu_1058_p2);

assign select_ln414_fu_1019_p3 = ((icmp_ln414_reg_1399[0:0] == 1'b1) ? zext_ln414_fu_1007_p1 : zext_ln414_1_fu_1010_p1);

assign shl_ln414_1_fu_1081_p2 = 64'd18446744073709551615 << zext_ln414_3_fu_1050_p1;

assign shl_ln414_fu_1058_p2 = 64'd128 << zext_ln414_2_fu_1046_p1;

assign shl_ln_fu_981_p3 = {{trunc_ln1542_fu_977_p1}, {3'd0}};

assign start_out = real_start;

assign tmp_2_fu_1173_p4 = {{HUH_V_in_in_in_reg_415[34:30]}};

assign tmp_3_fu_1189_p4 = {{HUH_V_in_in_in_reg_415[29:25]}};

integer ap_tvar_int_0;

always @ (shl_ln414_fu_1058_p2) begin
    for (ap_tvar_int_0 = 64 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 63 - 0) begin
            tmp_9_fu_1064_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_9_fu_1064_p4[ap_tvar_int_0] = shl_ln414_fu_1058_p2[63 - ap_tvar_int_0];
        end
    end
end

assign tmp_fu_692_p4 = {{tmp_10_reg_1233[29:25]}};

assign total_len_V_1_fu_759_p2 = ($signed(zext_ln886_reg_1258) + $signed(8'd176));

assign total_len_V_7_fu_901_p2 = (total_len_V_2_fu_194 + zext_ln886_3_fu_897_p1);

assign total_len_V_8_fu_954_p2 = (total_len_0_lcssa_reg_373 + zext_ln886_2_fu_950_p1);

assign total_len_V_fu_676_p3 = {{3'd4}, {tmp_len_V_reg_1251}};

assign trunc_ln1542_fu_977_p1 = last_len_V_reg_364[2:0];

assign trunc_ln674_fu_1169_p1 = total_len_V_5_reg_425[60:0];

assign trunc_ln886_fu_930_p1 = total_len_V_2_fu_194[124:0];

assign xor_ln414_1_fu_1040_p2 = (select_ln414_fu_1019_p3 ^ 7'd63);

assign xor_ln414_2_fu_1099_p2 = (64'd18446744073709551615 ^ and_ln414_fu_1093_p2);

assign xor_ln414_fu_1013_p2 = (zext_ln414_fu_1007_p1 ^ 7'd63);

assign z_rounds_V_fu_1152_p2 = (select_ln1061_fu_1144_p3 - zext_ln1542_fu_1140_p1);

assign zext_ln1542_fu_1140_p1 = counter_V_5_reg_434;

assign zext_ln232_10_fu_749_p1 = reg_529;

assign zext_ln232_11_fu_754_p1 = reg_533;

assign zext_ln232_12_fu_772_p1 = reg_537;

assign zext_ln232_13_fu_830_p1 = ll5_V_fu_800_p4;

assign zext_ln232_14_fu_835_p1 = ll6_V_1_reg_1331;

assign zext_ln232_15_fu_839_p1 = ll7_V_1_reg_1336;

assign zext_ln232_16_fu_847_p1 = ll0_V_1_fu_843_p1;

assign zext_ln232_17_fu_852_p1 = reg_525;

assign zext_ln232_18_fu_857_p1 = reg_529;

assign zext_ln232_19_fu_862_p1 = reg_533;

assign zext_ln232_1_fu_625_p1 = ret_V_13_fu_619_p2;

assign zext_ln232_20_fu_882_p1 = reg_537;

assign zext_ln232_21_fu_966_p1 = ll5_V_3_fu_940_p4;

assign zext_ln232_22_fu_1123_p1 = p_Result_s_fu_1117_p2;

assign zext_ln232_2_fu_636_p1 = ret_V_14_fu_630_p2;

assign zext_ln232_3_fu_647_p1 = ret_V_15_fu_641_p2;

assign zext_ln232_4_fu_658_p1 = ret_V_16_fu_652_p2;

assign zext_ln232_5_fu_668_p1 = ret_V_17_fu_663_p2;

assign zext_ln232_6_fu_727_p1 = ll6_V_reg_1274;

assign zext_ln232_7_fu_731_p1 = ll7_V_reg_1279;

assign zext_ln232_8_fu_739_p1 = ll0_V_fu_735_p1;

assign zext_ln232_9_fu_744_p1 = reg_525;

assign zext_ln232_fu_580_p1 = ret_V_12_fu_569_p2;

assign zext_ln404_fu_1205_p1 = L_V_reg_1417;

assign zext_ln414_1_fu_1010_p1 = Hi_reg_1389;

assign zext_ln414_2_fu_1046_p1 = select_ln414_2_fu_1033_p3;

assign zext_ln414_3_fu_1050_p1 = select_ln414_1_fu_1026_p3;

assign zext_ln414_4_fu_1054_p1 = xor_ln414_1_fu_1040_p2;

assign zext_ln414_fu_1007_p1 = Lo_reg_1394;

assign zext_ln866_1_fu_764_p1 = total_len_V_1_fu_759_p2;

assign zext_ln866_2_fu_768_p1 = total_len_V_1_fu_759_p2;

assign zext_ln866_fu_683_p1 = total_len_V_fu_676_p3;

assign zext_ln886_1_fu_887_p1 = tmp_len_V_2_fu_190;

assign zext_ln886_2_fu_950_p1 = last_len_V_reg_364;

assign zext_ln886_3_fu_897_p1 = add_ln886_fu_891_p2;

assign zext_ln886_4_fu_926_p1 = add_ln886_fu_891_p2;

assign zext_ln886_fu_673_p1 = tmp_len_V_reg_1251;

always @ (posedge ap_clk) begin
    zext_ln886_reg_1258[7:5] <= 3'b000;
    zext_ln866_reg_1263[124:5] <= 120'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100;
    Lo_reg_1394[2:0] <= 3'b000;
    opad_buffer_6_preg[1:0] <= 2'b00;
    opad_buffer_6_preg[5:5] <= 1'b0;
    opad_buffer_6_preg[9:7] <= 3'b000;
    opad_buffer_6_preg[13:13] <= 1'b0;
    opad_buffer_6_preg[17:15] <= 3'b000;
    opad_buffer_6_preg[21:21] <= 1'b0;
    opad_buffer_6_preg[25:23] <= 3'b000;
    opad_buffer_6_preg[29:29] <= 1'b0;
    opad_buffer_6_preg[33:31] <= 3'b000;
    opad_buffer_6_preg[37:37] <= 1'b0;
    opad_buffer_6_preg[41:39] <= 3'b000;
    opad_buffer_6_preg[45:45] <= 1'b0;
    opad_buffer_6_preg[49:47] <= 3'b000;
    opad_buffer_6_preg[53:53] <= 1'b0;
    opad_buffer_6_preg[57:55] <= 3'b000;
    opad_buffer_6_preg[61] <= 1'b0;
    opad_buffer_7_preg[1:0] <= 2'b00;
    opad_buffer_7_preg[5:5] <= 1'b0;
    opad_buffer_7_preg[9:7] <= 3'b000;
    opad_buffer_7_preg[13:13] <= 1'b0;
    opad_buffer_7_preg[17:15] <= 3'b000;
    opad_buffer_7_preg[21:21] <= 1'b0;
    opad_buffer_7_preg[25:23] <= 3'b000;
    opad_buffer_7_preg[29:29] <= 1'b0;
    opad_buffer_7_preg[33:31] <= 3'b000;
    opad_buffer_7_preg[37:37] <= 1'b0;
    opad_buffer_7_preg[41:39] <= 3'b000;
    opad_buffer_7_preg[45:45] <= 1'b0;
    opad_buffer_7_preg[49:47] <= 3'b000;
    opad_buffer_7_preg[53:53] <= 1'b0;
    opad_buffer_7_preg[57:55] <= 3'b000;
    opad_buffer_7_preg[61] <= 1'b0;
    opad_buffer_8_preg[1:0] <= 2'b00;
    opad_buffer_8_preg[5:5] <= 1'b0;
    opad_buffer_8_preg[9:7] <= 3'b000;
    opad_buffer_8_preg[13:13] <= 1'b0;
    opad_buffer_8_preg[17:15] <= 3'b000;
    opad_buffer_8_preg[21:21] <= 1'b0;
    opad_buffer_8_preg[25:23] <= 3'b000;
    opad_buffer_8_preg[29:29] <= 1'b0;
    opad_buffer_8_preg[33:31] <= 3'b000;
    opad_buffer_8_preg[37:37] <= 1'b0;
    opad_buffer_8_preg[41:39] <= 3'b000;
    opad_buffer_8_preg[45:45] <= 1'b0;
    opad_buffer_8_preg[49:47] <= 3'b000;
    opad_buffer_8_preg[53:53] <= 1'b0;
    opad_buffer_8_preg[57:55] <= 3'b000;
    opad_buffer_8_preg[61] <= 1'b0;
    opad_buffer_9_preg[1:0] <= 2'b00;
    opad_buffer_9_preg[5:5] <= 1'b0;
    opad_buffer_9_preg[9:7] <= 3'b000;
    opad_buffer_9_preg[13:13] <= 1'b0;
    opad_buffer_9_preg[17:15] <= 3'b000;
    opad_buffer_9_preg[21:21] <= 1'b0;
    opad_buffer_9_preg[25:23] <= 3'b000;
    opad_buffer_9_preg[29:29] <= 1'b0;
    opad_buffer_9_preg[33:31] <= 3'b000;
    opad_buffer_9_preg[37:37] <= 1'b0;
    opad_buffer_9_preg[41:39] <= 3'b000;
    opad_buffer_9_preg[45:45] <= 1'b0;
    opad_buffer_9_preg[49:47] <= 3'b000;
    opad_buffer_9_preg[53:53] <= 1'b0;
    opad_buffer_9_preg[57:55] <= 3'b000;
    opad_buffer_9_preg[61] <= 1'b0;
    opad_buffer_10_preg[1:0] <= 2'b00;
    opad_buffer_10_preg[5:5] <= 1'b0;
    opad_buffer_10_preg[9:7] <= 3'b000;
    opad_buffer_10_preg[13:13] <= 1'b0;
    opad_buffer_10_preg[17:15] <= 3'b000;
    opad_buffer_10_preg[21:21] <= 1'b0;
    opad_buffer_10_preg[25:23] <= 3'b000;
    opad_buffer_10_preg[29:29] <= 1'b0;
    opad_buffer_10_preg[33:31] <= 3'b000;
    opad_buffer_10_preg[37:37] <= 1'b0;
    opad_buffer_10_preg[41:39] <= 3'b000;
    opad_buffer_10_preg[45:45] <= 1'b0;
    opad_buffer_10_preg[49:47] <= 3'b000;
    opad_buffer_10_preg[53:53] <= 1'b0;
    opad_buffer_10_preg[57:55] <= 3'b000;
    opad_buffer_10_preg[61] <= 1'b0;
    opad_buffer_11_preg[1:0] <= 2'b00;
    opad_buffer_11_preg[5:5] <= 1'b0;
    opad_buffer_11_preg[9:7] <= 3'b000;
    opad_buffer_11_preg[13:13] <= 1'b0;
    opad_buffer_11_preg[17:15] <= 3'b000;
    opad_buffer_11_preg[21:21] <= 1'b0;
    opad_buffer_11_preg[25:23] <= 3'b000;
    opad_buffer_11_preg[29:29] <= 1'b0;
    opad_buffer_11_preg[33:31] <= 3'b000;
    opad_buffer_11_preg[37:37] <= 1'b0;
    opad_buffer_11_preg[41:39] <= 3'b000;
    opad_buffer_11_preg[45:45] <= 1'b0;
    opad_buffer_11_preg[49:47] <= 3'b000;
    opad_buffer_11_preg[53:53] <= 1'b0;
    opad_buffer_11_preg[57:55] <= 3'b000;
    opad_buffer_11_preg[61] <= 1'b0;
    opad_buffer_12_preg[1:0] <= 2'b00;
    opad_buffer_12_preg[5:5] <= 1'b0;
    opad_buffer_12_preg[9:7] <= 3'b000;
    opad_buffer_12_preg[13:13] <= 1'b0;
    opad_buffer_12_preg[17:15] <= 3'b000;
    opad_buffer_12_preg[21:21] <= 1'b0;
    opad_buffer_12_preg[25:23] <= 3'b000;
    opad_buffer_12_preg[29:29] <= 1'b0;
    opad_buffer_12_preg[33:31] <= 3'b000;
    opad_buffer_12_preg[37:37] <= 1'b0;
    opad_buffer_12_preg[41:39] <= 3'b000;
    opad_buffer_12_preg[45:45] <= 1'b0;
    opad_buffer_12_preg[49:47] <= 3'b000;
    opad_buffer_12_preg[53:53] <= 1'b0;
    opad_buffer_12_preg[57:55] <= 3'b000;
    opad_buffer_12_preg[61] <= 1'b0;
    opad_buffer_13_preg[1:0] <= 2'b00;
    opad_buffer_13_preg[5:5] <= 1'b0;
    opad_buffer_13_preg[9:7] <= 3'b000;
    opad_buffer_13_preg[13:13] <= 1'b0;
    opad_buffer_13_preg[17:15] <= 3'b000;
    opad_buffer_13_preg[21:21] <= 1'b0;
    opad_buffer_13_preg[25:23] <= 3'b000;
    opad_buffer_13_preg[29:29] <= 1'b0;
    opad_buffer_13_preg[33:31] <= 3'b000;
    opad_buffer_13_preg[37:37] <= 1'b0;
    opad_buffer_13_preg[41:39] <= 3'b000;
    opad_buffer_13_preg[45:45] <= 1'b0;
    opad_buffer_13_preg[49:47] <= 3'b000;
    opad_buffer_13_preg[53:53] <= 1'b0;
    opad_buffer_13_preg[57:55] <= 3'b000;
    opad_buffer_13_preg[61] <= 1'b0;
    opad_buffer_14_preg[1:0] <= 2'b00;
    opad_buffer_14_preg[5:5] <= 1'b0;
    opad_buffer_14_preg[9:7] <= 3'b000;
    opad_buffer_14_preg[13:13] <= 1'b0;
    opad_buffer_14_preg[17:15] <= 3'b000;
    opad_buffer_14_preg[21:21] <= 1'b0;
    opad_buffer_14_preg[25:23] <= 3'b000;
    opad_buffer_14_preg[29:29] <= 1'b0;
    opad_buffer_14_preg[33:31] <= 3'b000;
    opad_buffer_14_preg[37:37] <= 1'b0;
    opad_buffer_14_preg[41:39] <= 3'b000;
    opad_buffer_14_preg[45:45] <= 1'b0;
    opad_buffer_14_preg[49:47] <= 3'b000;
    opad_buffer_14_preg[53:53] <= 1'b0;
    opad_buffer_14_preg[57:55] <= 3'b000;
    opad_buffer_14_preg[61] <= 1'b0;
    opad_buffer_15_preg[1:0] <= 2'b00;
    opad_buffer_15_preg[5:5] <= 1'b0;
    opad_buffer_15_preg[9:7] <= 3'b000;
    opad_buffer_15_preg[13:13] <= 1'b0;
    opad_buffer_15_preg[17:15] <= 3'b000;
    opad_buffer_15_preg[21:21] <= 1'b0;
    opad_buffer_15_preg[25:23] <= 3'b000;
    opad_buffer_15_preg[29:29] <= 1'b0;
    opad_buffer_15_preg[33:31] <= 3'b000;
    opad_buffer_15_preg[37:37] <= 1'b0;
    opad_buffer_15_preg[41:39] <= 3'b000;
    opad_buffer_15_preg[45:45] <= 1'b0;
    opad_buffer_15_preg[49:47] <= 3'b000;
    opad_buffer_15_preg[53:53] <= 1'b0;
    opad_buffer_15_preg[57:55] <= 3'b000;
    opad_buffer_15_preg[61] <= 1'b0;
end

endmodule //hmac_preProcessingOneTripForHMAC21
