// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module sha512_SHA512Digest_64u_512u_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        w_strm34_dout,
        w_strm34_num_data_valid,
        w_strm34_fifo_cap,
        w_strm34_empty_n,
        w_strm34_read,
        end_nblk_strm233_dout,
        end_nblk_strm233_num_data_valid,
        end_nblk_strm233_fifo_cap,
        end_nblk_strm233_empty_n,
        end_nblk_strm233_read,
        tkeep_strm35_dout,
        tkeep_strm35_num_data_valid,
        tkeep_strm35_fifo_cap,
        tkeep_strm35_empty_n,
        tkeep_strm35_read,
        tid_strm36_dout,
        tid_strm36_num_data_valid,
        tid_strm36_fifo_cap,
        tid_strm36_empty_n,
        tid_strm36_read,
        output_r_TDATA,
        output_r_TVALID,
        output_r_TREADY
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [63:0] w_strm34_dout;
input  [5:0] w_strm34_num_data_valid;
input  [5:0] w_strm34_fifo_cap;
input   w_strm34_empty_n;
output   w_strm34_read;
input  [0:0] end_nblk_strm233_dout;
input  [5:0] end_nblk_strm233_num_data_valid;
input  [5:0] end_nblk_strm233_fifo_cap;
input   end_nblk_strm233_empty_n;
output   end_nblk_strm233_read;
input  [63:0] tkeep_strm35_dout;
input  [5:0] tkeep_strm35_num_data_valid;
input  [5:0] tkeep_strm35_fifo_cap;
input   tkeep_strm35_empty_n;
output   tkeep_strm35_read;
input  [5:0] tid_strm36_dout;
input  [5:0] tid_strm36_num_data_valid;
input  [5:0] tid_strm36_fifo_cap;
input   tid_strm36_empty_n;
output   tid_strm36_read;
output  [583:0] output_r_TDATA;
output   output_r_TVALID;
input   output_r_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg w_strm34_read;
reg end_nblk_strm233_read;
reg tkeep_strm35_read;
reg tid_strm36_read;
reg output_r_TVALID;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    end_nblk_strm233_blk_n;
wire    ap_CS_fsm_state2;
reg    tkeep_strm35_blk_n;
wire   [0:0] tmp_read_fu_138_p2;
reg    tid_strm36_blk_n;
reg    output_r_TDATA_blk_n;
reg   [63:0] a_V_load_reg_499;
reg   [63:0] b_V_load_reg_505;
reg   [63:0] c_V_load_reg_511;
reg   [63:0] d_V_load_reg_517;
reg   [63:0] e_V_load_reg_523;
reg   [63:0] f_V_load_reg_529;
reg   [63:0] g_V_load_reg_535;
reg   [63:0] h_V_load_reg_541;
wire    grp_SHA512Digest_64u_512u_Pipeline_LOOP_SHA1_UPDATE_80_ROUNDS_fu_163_ap_start;
wire    grp_SHA512Digest_64u_512u_Pipeline_LOOP_SHA1_UPDATE_80_ROUNDS_fu_163_ap_done;
wire    grp_SHA512Digest_64u_512u_Pipeline_LOOP_SHA1_UPDATE_80_ROUNDS_fu_163_ap_idle;
wire    grp_SHA512Digest_64u_512u_Pipeline_LOOP_SHA1_UPDATE_80_ROUNDS_fu_163_ap_ready;
wire    grp_SHA512Digest_64u_512u_Pipeline_LOOP_SHA1_UPDATE_80_ROUNDS_fu_163_w_strm34_read;
wire   [63:0] grp_SHA512Digest_64u_512u_Pipeline_LOOP_SHA1_UPDATE_80_ROUNDS_fu_163_h_V_1_out;
wire    grp_SHA512Digest_64u_512u_Pipeline_LOOP_SHA1_UPDATE_80_ROUNDS_fu_163_h_V_1_out_ap_vld;
wire   [63:0] grp_SHA512Digest_64u_512u_Pipeline_LOOP_SHA1_UPDATE_80_ROUNDS_fu_163_g_V_3_out;
wire    grp_SHA512Digest_64u_512u_Pipeline_LOOP_SHA1_UPDATE_80_ROUNDS_fu_163_g_V_3_out_ap_vld;
wire   [63:0] grp_SHA512Digest_64u_512u_Pipeline_LOOP_SHA1_UPDATE_80_ROUNDS_fu_163_f_V_3_out;
wire    grp_SHA512Digest_64u_512u_Pipeline_LOOP_SHA1_UPDATE_80_ROUNDS_fu_163_f_V_3_out_ap_vld;
wire   [63:0] grp_SHA512Digest_64u_512u_Pipeline_LOOP_SHA1_UPDATE_80_ROUNDS_fu_163_e_V_3_out;
wire    grp_SHA512Digest_64u_512u_Pipeline_LOOP_SHA1_UPDATE_80_ROUNDS_fu_163_e_V_3_out_ap_vld;
wire   [63:0] grp_SHA512Digest_64u_512u_Pipeline_LOOP_SHA1_UPDATE_80_ROUNDS_fu_163_d_V_1_out;
wire    grp_SHA512Digest_64u_512u_Pipeline_LOOP_SHA1_UPDATE_80_ROUNDS_fu_163_d_V_1_out_ap_vld;
wire   [63:0] grp_SHA512Digest_64u_512u_Pipeline_LOOP_SHA1_UPDATE_80_ROUNDS_fu_163_c_V_3_out;
wire    grp_SHA512Digest_64u_512u_Pipeline_LOOP_SHA1_UPDATE_80_ROUNDS_fu_163_c_V_3_out_ap_vld;
wire   [63:0] grp_SHA512Digest_64u_512u_Pipeline_LOOP_SHA1_UPDATE_80_ROUNDS_fu_163_b_V_3_out;
wire    grp_SHA512Digest_64u_512u_Pipeline_LOOP_SHA1_UPDATE_80_ROUNDS_fu_163_b_V_3_out_ap_vld;
wire   [63:0] grp_SHA512Digest_64u_512u_Pipeline_LOOP_SHA1_UPDATE_80_ROUNDS_fu_163_a_V_3_out;
wire    grp_SHA512Digest_64u_512u_Pipeline_LOOP_SHA1_UPDATE_80_ROUNDS_fu_163_a_V_3_out_ap_vld;
reg    grp_SHA512Digest_64u_512u_Pipeline_LOOP_SHA1_UPDATE_80_ROUNDS_fu_163_ap_start_reg;
reg    ap_block_state2_ignore_call9;
reg    ap_block_state2_io;
wire    ap_CS_fsm_state3;
reg   [63:0] a_V_fu_74;
wire   [63:0] add_ln232_fu_312_p2;
wire    ap_CS_fsm_state4;
reg    ap_block_state1;
reg   [63:0] b_V_fu_78;
wire   [63:0] add_ln232_3_fu_317_p2;
reg   [63:0] c_V_fu_82;
wire   [63:0] add_ln232_4_fu_322_p2;
reg   [63:0] d_V_fu_86;
wire   [63:0] add_ln232_5_fu_327_p2;
reg   [63:0] e_V_fu_90;
wire   [63:0] add_ln232_6_fu_332_p2;
reg   [63:0] f_V_fu_94;
wire   [63:0] add_ln232_7_fu_337_p2;
reg   [63:0] g_V_fu_98;
wire   [63:0] add_ln232_8_fu_342_p2;
reg   [63:0] h_V_fu_102;
wire   [63:0] add_ln232_9_fu_347_p2;
reg    ap_block_state2;
wire   [582:0] zext_ln174_cast_fu_257_p12;
wire    ap_CS_fsm_state5;
reg   [4:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 5'd1;
#0 grp_SHA512Digest_64u_512u_Pipeline_LOOP_SHA1_UPDATE_80_ROUNDS_fu_163_ap_start_reg = 1'b0;
end

sha512_SHA512Digest_64u_512u_Pipeline_LOOP_SHA1_UPDATE_80_ROUNDS grp_SHA512Digest_64u_512u_Pipeline_LOOP_SHA1_UPDATE_80_ROUNDS_fu_163(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_SHA512Digest_64u_512u_Pipeline_LOOP_SHA1_UPDATE_80_ROUNDS_fu_163_ap_start),
    .ap_done(grp_SHA512Digest_64u_512u_Pipeline_LOOP_SHA1_UPDATE_80_ROUNDS_fu_163_ap_done),
    .ap_idle(grp_SHA512Digest_64u_512u_Pipeline_LOOP_SHA1_UPDATE_80_ROUNDS_fu_163_ap_idle),
    .ap_ready(grp_SHA512Digest_64u_512u_Pipeline_LOOP_SHA1_UPDATE_80_ROUNDS_fu_163_ap_ready),
    .w_strm34_dout(w_strm34_dout),
    .w_strm34_num_data_valid(6'd0),
    .w_strm34_fifo_cap(6'd0),
    .w_strm34_empty_n(w_strm34_empty_n),
    .w_strm34_read(grp_SHA512Digest_64u_512u_Pipeline_LOOP_SHA1_UPDATE_80_ROUNDS_fu_163_w_strm34_read),
    .h_V(h_V_load_reg_541),
    .g_V(g_V_load_reg_535),
    .f_V(f_V_load_reg_529),
    .e_V(e_V_load_reg_523),
    .d_V(d_V_load_reg_517),
    .c_V(c_V_load_reg_511),
    .b_V(b_V_load_reg_505),
    .a_V(a_V_load_reg_499),
    .h_V_1_out(grp_SHA512Digest_64u_512u_Pipeline_LOOP_SHA1_UPDATE_80_ROUNDS_fu_163_h_V_1_out),
    .h_V_1_out_ap_vld(grp_SHA512Digest_64u_512u_Pipeline_LOOP_SHA1_UPDATE_80_ROUNDS_fu_163_h_V_1_out_ap_vld),
    .g_V_3_out(grp_SHA512Digest_64u_512u_Pipeline_LOOP_SHA1_UPDATE_80_ROUNDS_fu_163_g_V_3_out),
    .g_V_3_out_ap_vld(grp_SHA512Digest_64u_512u_Pipeline_LOOP_SHA1_UPDATE_80_ROUNDS_fu_163_g_V_3_out_ap_vld),
    .f_V_3_out(grp_SHA512Digest_64u_512u_Pipeline_LOOP_SHA1_UPDATE_80_ROUNDS_fu_163_f_V_3_out),
    .f_V_3_out_ap_vld(grp_SHA512Digest_64u_512u_Pipeline_LOOP_SHA1_UPDATE_80_ROUNDS_fu_163_f_V_3_out_ap_vld),
    .e_V_3_out(grp_SHA512Digest_64u_512u_Pipeline_LOOP_SHA1_UPDATE_80_ROUNDS_fu_163_e_V_3_out),
    .e_V_3_out_ap_vld(grp_SHA512Digest_64u_512u_Pipeline_LOOP_SHA1_UPDATE_80_ROUNDS_fu_163_e_V_3_out_ap_vld),
    .d_V_1_out(grp_SHA512Digest_64u_512u_Pipeline_LOOP_SHA1_UPDATE_80_ROUNDS_fu_163_d_V_1_out),
    .d_V_1_out_ap_vld(grp_SHA512Digest_64u_512u_Pipeline_LOOP_SHA1_UPDATE_80_ROUNDS_fu_163_d_V_1_out_ap_vld),
    .c_V_3_out(grp_SHA512Digest_64u_512u_Pipeline_LOOP_SHA1_UPDATE_80_ROUNDS_fu_163_c_V_3_out),
    .c_V_3_out_ap_vld(grp_SHA512Digest_64u_512u_Pipeline_LOOP_SHA1_UPDATE_80_ROUNDS_fu_163_c_V_3_out_ap_vld),
    .b_V_3_out(grp_SHA512Digest_64u_512u_Pipeline_LOOP_SHA1_UPDATE_80_ROUNDS_fu_163_b_V_3_out),
    .b_V_3_out_ap_vld(grp_SHA512Digest_64u_512u_Pipeline_LOOP_SHA1_UPDATE_80_ROUNDS_fu_163_b_V_3_out_ap_vld),
    .a_V_3_out(grp_SHA512Digest_64u_512u_Pipeline_LOOP_SHA1_UPDATE_80_ROUNDS_fu_163_a_V_3_out),
    .a_V_3_out_ap_vld(grp_SHA512Digest_64u_512u_Pipeline_LOOP_SHA1_UPDATE_80_ROUNDS_fu_163_a_V_3_out_ap_vld)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_SHA512Digest_64u_512u_Pipeline_LOOP_SHA1_UPDATE_80_ROUNDS_fu_163_ap_start_reg <= 1'b0;
    end else begin
        if ((~((end_nblk_strm233_empty_n == 1'b0) | (1'b1 == ap_block_state2_io) | ((end_nblk_strm233_dout == 1'd1) & (output_r_TREADY == 1'b0)) | ((end_nblk_strm233_dout == 1'd1) & (tid_strm36_empty_n == 1'b0)) | ((end_nblk_strm233_dout == 1'd1) & (tkeep_strm35_empty_n == 1'b0))) & (tmp_read_fu_138_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            grp_SHA512Digest_64u_512u_Pipeline_LOOP_SHA1_UPDATE_80_ROUNDS_fu_163_ap_start_reg <= 1'b1;
        end else if ((grp_SHA512Digest_64u_512u_Pipeline_LOOP_SHA1_UPDATE_80_ROUNDS_fu_163_ap_ready == 1'b1)) begin
            grp_SHA512Digest_64u_512u_Pipeline_LOOP_SHA1_UPDATE_80_ROUNDS_fu_163_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        a_V_fu_74 <= 64'd7640891576956012808;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        a_V_fu_74 <= add_ln232_fu_312_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        b_V_fu_78 <= 64'd13503953896175478587;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        b_V_fu_78 <= add_ln232_3_fu_317_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        c_V_fu_82 <= 64'd4354685564936845355;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        c_V_fu_82 <= add_ln232_4_fu_322_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        d_V_fu_86 <= 64'd11912009170470909681;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        d_V_fu_86 <= add_ln232_5_fu_327_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        e_V_fu_90 <= 64'd5840696475078001361;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        e_V_fu_90 <= add_ln232_6_fu_332_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        f_V_fu_94 <= 64'd11170449401992604703;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        f_V_fu_94 <= add_ln232_7_fu_337_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        g_V_fu_98 <= 64'd2270897969802886507;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        g_V_fu_98 <= add_ln232_8_fu_342_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        h_V_fu_102 <= 64'd6620516959819538809;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        h_V_fu_102 <= add_ln232_9_fu_347_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_read_fu_138_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        a_V_load_reg_499 <= a_V_fu_74;
        b_V_load_reg_505 <= b_V_fu_78;
        c_V_load_reg_511 <= c_V_fu_82;
        d_V_load_reg_517 <= d_V_fu_86;
        e_V_load_reg_523 <= e_V_fu_90;
        f_V_load_reg_529 <= f_V_fu_94;
        g_V_load_reg_535 <= g_V_fu_98;
        h_V_load_reg_541 <= h_V_fu_102;
    end
end

always @ (*) begin
    if (((ap_done_reg == 1'b1) | (ap_start == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((end_nblk_strm233_empty_n == 1'b0) | (1'b1 == ap_block_state2_io) | ((end_nblk_strm233_dout == 1'd1) & (output_r_TREADY == 1'b0)) | ((end_nblk_strm233_dout == 1'd1) & (tid_strm36_empty_n == 1'b0)) | ((end_nblk_strm233_dout == 1'd1) & (tkeep_strm35_empty_n == 1'b0)))) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_SHA512Digest_64u_512u_Pipeline_LOOP_SHA1_UPDATE_80_ROUNDS_fu_163_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        end_nblk_strm233_blk_n = end_nblk_strm233_empty_n;
    end else begin
        end_nblk_strm233_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((end_nblk_strm233_empty_n == 1'b0) | (1'b1 == ap_block_state2_io) | ((end_nblk_strm233_dout == 1'd1) & (output_r_TREADY == 1'b0)) | ((end_nblk_strm233_dout == 1'd1) & (tid_strm36_empty_n == 1'b0)) | ((end_nblk_strm233_dout == 1'd1) & (tkeep_strm35_empty_n == 1'b0))) & (1'b1 == ap_CS_fsm_state2))) begin
        end_nblk_strm233_read = 1'b1;
    end else begin
        end_nblk_strm233_read = 1'b0;
    end
end

always @ (*) begin
    if (((end_nblk_strm233_dout == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        output_r_TDATA_blk_n = output_r_TREADY;
    end else begin
        output_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((end_nblk_strm233_empty_n == 1'b0) | (1'b1 == ap_block_state2_io) | ((end_nblk_strm233_dout == 1'd1) & (output_r_TREADY == 1'b0)) | ((end_nblk_strm233_dout == 1'd1) & (tid_strm36_empty_n == 1'b0)) | ((end_nblk_strm233_dout == 1'd1) & (tkeep_strm35_empty_n == 1'b0))) & (end_nblk_strm233_dout == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        output_r_TVALID = 1'b1;
    end else begin
        output_r_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((end_nblk_strm233_dout == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        tid_strm36_blk_n = tid_strm36_empty_n;
    end else begin
        tid_strm36_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((end_nblk_strm233_empty_n == 1'b0) | (1'b1 == ap_block_state2_io) | ((end_nblk_strm233_dout == 1'd1) & (output_r_TREADY == 1'b0)) | ((end_nblk_strm233_dout == 1'd1) & (tid_strm36_empty_n == 1'b0)) | ((end_nblk_strm233_dout == 1'd1) & (tkeep_strm35_empty_n == 1'b0))) & (end_nblk_strm233_dout == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        tid_strm36_read = 1'b1;
    end else begin
        tid_strm36_read = 1'b0;
    end
end

always @ (*) begin
    if (((end_nblk_strm233_dout == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        tkeep_strm35_blk_n = tkeep_strm35_empty_n;
    end else begin
        tkeep_strm35_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((end_nblk_strm233_empty_n == 1'b0) | (1'b1 == ap_block_state2_io) | ((end_nblk_strm233_dout == 1'd1) & (output_r_TREADY == 1'b0)) | ((end_nblk_strm233_dout == 1'd1) & (tid_strm36_empty_n == 1'b0)) | ((end_nblk_strm233_dout == 1'd1) & (tkeep_strm35_empty_n == 1'b0))) & (end_nblk_strm233_dout == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        tkeep_strm35_read = 1'b1;
    end else begin
        tkeep_strm35_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        w_strm34_read = grp_SHA512Digest_64u_512u_Pipeline_LOOP_SHA1_UPDATE_80_ROUNDS_fu_163_w_strm34_read;
    end else begin
        w_strm34_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((end_nblk_strm233_empty_n == 1'b0) | (1'b1 == ap_block_state2_io) | ((end_nblk_strm233_dout == 1'd1) & (output_r_TREADY == 1'b0)) | ((end_nblk_strm233_dout == 1'd1) & (tid_strm36_empty_n == 1'b0)) | ((end_nblk_strm233_dout == 1'd1) & (tkeep_strm35_empty_n == 1'b0))) & (end_nblk_strm233_dout == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else if ((~((end_nblk_strm233_empty_n == 1'b0) | (1'b1 == ap_block_state2_io) | ((end_nblk_strm233_dout == 1'd1) & (output_r_TREADY == 1'b0)) | ((end_nblk_strm233_dout == 1'd1) & (tid_strm36_empty_n == 1'b0)) | ((end_nblk_strm233_dout == 1'd1) & (tkeep_strm35_empty_n == 1'b0))) & (tmp_read_fu_138_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((grp_SHA512Digest_64u_512u_Pipeline_LOOP_SHA1_UPDATE_80_ROUNDS_fu_163_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln232_3_fu_317_p2 = (grp_SHA512Digest_64u_512u_Pipeline_LOOP_SHA1_UPDATE_80_ROUNDS_fu_163_b_V_3_out + b_V_load_reg_505);

assign add_ln232_4_fu_322_p2 = (grp_SHA512Digest_64u_512u_Pipeline_LOOP_SHA1_UPDATE_80_ROUNDS_fu_163_c_V_3_out + c_V_load_reg_511);

assign add_ln232_5_fu_327_p2 = (grp_SHA512Digest_64u_512u_Pipeline_LOOP_SHA1_UPDATE_80_ROUNDS_fu_163_d_V_1_out + d_V_load_reg_517);

assign add_ln232_6_fu_332_p2 = (grp_SHA512Digest_64u_512u_Pipeline_LOOP_SHA1_UPDATE_80_ROUNDS_fu_163_e_V_3_out + e_V_load_reg_523);

assign add_ln232_7_fu_337_p2 = (grp_SHA512Digest_64u_512u_Pipeline_LOOP_SHA1_UPDATE_80_ROUNDS_fu_163_f_V_3_out + f_V_load_reg_529);

assign add_ln232_8_fu_342_p2 = (grp_SHA512Digest_64u_512u_Pipeline_LOOP_SHA1_UPDATE_80_ROUNDS_fu_163_g_V_3_out + g_V_load_reg_535);

assign add_ln232_9_fu_347_p2 = (grp_SHA512Digest_64u_512u_Pipeline_LOOP_SHA1_UPDATE_80_ROUNDS_fu_163_h_V_1_out + h_V_load_reg_541);

assign add_ln232_fu_312_p2 = (grp_SHA512Digest_64u_512u_Pipeline_LOOP_SHA1_UPDATE_80_ROUNDS_fu_163_a_V_3_out + a_V_load_reg_499);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state2 = ((end_nblk_strm233_empty_n == 1'b0) | ((end_nblk_strm233_dout == 1'd1) & (output_r_TREADY == 1'b0)) | ((end_nblk_strm233_dout == 1'd1) & (tid_strm36_empty_n == 1'b0)) | ((end_nblk_strm233_dout == 1'd1) & (tkeep_strm35_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state2_ignore_call9 = ((end_nblk_strm233_empty_n == 1'b0) | ((end_nblk_strm233_dout == 1'd1) & (output_r_TREADY == 1'b0)) | ((end_nblk_strm233_dout == 1'd1) & (tid_strm36_empty_n == 1'b0)) | ((end_nblk_strm233_dout == 1'd1) & (tkeep_strm35_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state2_io = ((end_nblk_strm233_dout == 1'd1) & (output_r_TREADY == 1'b0));
end

assign grp_SHA512Digest_64u_512u_Pipeline_LOOP_SHA1_UPDATE_80_ROUNDS_fu_163_ap_start = grp_SHA512Digest_64u_512u_Pipeline_LOOP_SHA1_UPDATE_80_ROUNDS_fu_163_ap_start_reg;

assign output_r_TDATA = zext_ln174_cast_fu_257_p12;

assign tmp_read_fu_138_p2 = end_nblk_strm233_dout;

assign zext_ln174_cast_fu_257_p12 = {{{{{{{{{{{{{{{{{{{{1'd1}, {tid_strm36_dout}}}, {tkeep_strm35_dout}}}, {a_V_fu_74}}}, {b_V_fu_78}}}, {c_V_fu_82}}}, {d_V_fu_86}}}, {e_V_fu_90}}}, {f_V_fu_94}}}, {g_V_fu_98}}}, {h_V_fu_102}};

endmodule //sha512_SHA512Digest_64u_512u_s
