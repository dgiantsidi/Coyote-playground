// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module hmac_preProcessingOneTripForHMAC_225 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        opad_buffer_V_0,
        opad_buffer_V_1,
        opad_buffer_V_2,
        opad_buffer_V_3,
        opad_buffer_V_4,
        opad_buffer_V_5,
        opad_buffer_V_6,
        opad_buffer_V_7,
        opad_buffer_V_8,
        opad_buffer_V_9,
        opad_buffer_V_10,
        opad_buffer_V_11,
        opad_buffer_V_12,
        opad_buffer_V_13,
        opad_buffer_V_14,
        opad_buffer_V_15,
        res_V_in,
        blk_strm_din,
        blk_strm_num_data_valid,
        blk_strm_fifo_cap,
        blk_strm_full_n,
        blk_strm_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [63:0] opad_buffer_V_0;
input  [63:0] opad_buffer_V_1;
input  [63:0] opad_buffer_V_2;
input  [63:0] opad_buffer_V_3;
input  [63:0] opad_buffer_V_4;
input  [63:0] opad_buffer_V_5;
input  [62:0] opad_buffer_V_6;
input  [62:0] opad_buffer_V_7;
input  [62:0] opad_buffer_V_8;
input  [62:0] opad_buffer_V_9;
input  [62:0] opad_buffer_V_10;
input  [62:0] opad_buffer_V_11;
input  [62:0] opad_buffer_V_12;
input  [62:0] opad_buffer_V_13;
input  [62:0] opad_buffer_V_14;
input  [62:0] opad_buffer_V_15;
input  [383:0] res_V_in;
output  [519:0] blk_strm_din;
input  [5:0] blk_strm_num_data_valid;
input  [5:0] blk_strm_fifo_cap;
input   blk_strm_full_n;
output   blk_strm_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg[519:0] blk_strm_din;
reg blk_strm_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    blk_strm_blk_n;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    grp_my_switchEndian_fu_204_ap_ready;
reg   [63:0] grp_my_switchEndian_fu_204_l;
wire   [63:0] grp_my_switchEndian_fu_204_ap_return;
wire    grp_my_switchEndian_fu_210_ap_ready;
reg   [63:0] grp_my_switchEndian_fu_210_l;
wire   [63:0] grp_my_switchEndian_fu_210_ap_return;
wire    grp_my_switchEndian_fu_216_ap_ready;
reg   [63:0] grp_my_switchEndian_fu_216_l;
wire   [63:0] grp_my_switchEndian_fu_216_ap_return;
wire    grp_my_switchEndian_fu_222_ap_ready;
reg   [63:0] grp_my_switchEndian_fu_222_l;
wire   [63:0] grp_my_switchEndian_fu_222_ap_return;
wire    grp_my_switchEndian_fu_228_ap_ready;
reg   [63:0] grp_my_switchEndian_fu_228_l;
wire   [63:0] grp_my_switchEndian_fu_228_ap_return;
wire    grp_my_switchEndian_fu_234_ap_ready;
reg   [63:0] grp_my_switchEndian_fu_234_l;
wire   [63:0] grp_my_switchEndian_fu_234_ap_return;
wire    grp_my_switchEndian_fu_240_ap_ready;
reg   [63:0] grp_my_switchEndian_fu_240_l;
wire   [63:0] grp_my_switchEndian_fu_240_ap_return;
wire    grp_my_switchEndian_fu_245_ap_ready;
reg   [63:0] grp_my_switchEndian_fu_245_l;
wire   [63:0] grp_my_switchEndian_fu_245_ap_return;
wire   [63:0] zext_ln1158_fu_313_p1;
wire   [63:0] trunc_ln674_fu_406_p1;
wire   [63:0] zext_ln1159_fu_322_p1;
wire   [63:0] zext_ln1160_fu_331_p1;
wire   [63:0] zext_ln1161_fu_340_p1;
wire   [63:0] zext_ln1163_fu_349_p1;
wire   [63:0] zext_ln1164_fu_358_p1;
wire   [63:0] zext_ln1153_fu_274_p1;
wire   [63:0] zext_ln1165_fu_367_p1;
wire   [63:0] zext_ln1154_fu_283_p1;
wire   [63:0] zext_ln1166_fu_376_p1;
reg    ap_block_state1;
wire   [519:0] zext_ln414_36_fu_308_p1;
wire   [519:0] zext_ln414_44_fu_401_p1;
wire   [519:0] zext_ln391_fu_508_p1;
wire   [64:0] zext_ln414_35_fu_279_p1;
wire   [64:0] zext_ln414_34_fu_270_p1;
wire   [64:0] zext_ln414_33_fu_266_p1;
wire   [64:0] zext_ln414_32_fu_262_p1;
wire   [64:0] zext_ln414_31_fu_258_p1;
wire   [64:0] zext_ln414_30_fu_254_p1;
wire   [64:0] zext_ln414_fu_250_p1;
wire   [518:0] p_Result_s_fu_288_p9;
wire   [64:0] zext_ln414_43_fu_372_p1;
wire   [64:0] zext_ln414_42_fu_363_p1;
wire   [64:0] zext_ln414_41_fu_354_p1;
wire   [64:0] zext_ln414_40_fu_345_p1;
wire   [64:0] zext_ln414_39_fu_336_p1;
wire   [64:0] zext_ln414_38_fu_327_p1;
wire   [64:0] zext_ln414_37_fu_318_p1;
wire   [518:0] p_Result_12_fu_381_p9;
wire   [64:0] zext_ln414_50_fu_486_p1;
wire   [64:0] zext_ln414_49_fu_471_p1;
wire   [64:0] zext_ln414_48_fu_456_p1;
wire   [64:0] zext_ln414_47_fu_441_p1;
wire   [64:0] zext_ln414_46_fu_426_p1;
wire   [64:0] zext_ln414_45_fu_411_p1;
wire   [453:0] p_Result_13_fu_490_p8;
reg   [3:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
end

hmac_my_switchEndian grp_my_switchEndian_fu_204(
    .ap_ready(grp_my_switchEndian_fu_204_ap_ready),
    .l(grp_my_switchEndian_fu_204_l),
    .ap_return(grp_my_switchEndian_fu_204_ap_return)
);

hmac_my_switchEndian grp_my_switchEndian_fu_210(
    .ap_ready(grp_my_switchEndian_fu_210_ap_ready),
    .l(grp_my_switchEndian_fu_210_l),
    .ap_return(grp_my_switchEndian_fu_210_ap_return)
);

hmac_my_switchEndian grp_my_switchEndian_fu_216(
    .ap_ready(grp_my_switchEndian_fu_216_ap_ready),
    .l(grp_my_switchEndian_fu_216_l),
    .ap_return(grp_my_switchEndian_fu_216_ap_return)
);

hmac_my_switchEndian grp_my_switchEndian_fu_222(
    .ap_ready(grp_my_switchEndian_fu_222_ap_ready),
    .l(grp_my_switchEndian_fu_222_l),
    .ap_return(grp_my_switchEndian_fu_222_ap_return)
);

hmac_my_switchEndian grp_my_switchEndian_fu_228(
    .ap_ready(grp_my_switchEndian_fu_228_ap_ready),
    .l(grp_my_switchEndian_fu_228_l),
    .ap_return(grp_my_switchEndian_fu_228_ap_return)
);

hmac_my_switchEndian grp_my_switchEndian_fu_234(
    .ap_ready(grp_my_switchEndian_fu_234_ap_ready),
    .l(grp_my_switchEndian_fu_234_l),
    .ap_return(grp_my_switchEndian_fu_234_ap_return)
);

hmac_my_switchEndian grp_my_switchEndian_fu_240(
    .ap_ready(grp_my_switchEndian_fu_240_ap_ready),
    .l(grp_my_switchEndian_fu_240_l),
    .ap_return(grp_my_switchEndian_fu_240_ap_return)
);

hmac_my_switchEndian grp_my_switchEndian_fu_245(
    .ap_ready(grp_my_switchEndian_fu_245_ap_ready),
    .l(grp_my_switchEndian_fu_245_l),
    .ap_return(grp_my_switchEndian_fu_245_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((blk_strm_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if (((blk_strm_full_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((blk_strm_full_n == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if ((blk_strm_full_n == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((blk_strm_full_n == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if (((blk_strm_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (real_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
        blk_strm_blk_n = blk_strm_full_n;
    end else begin
        blk_strm_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((blk_strm_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        blk_strm_din = 520'd1716199415032652559739257447221804546678692777843555551699276453307595892020703670162174971114390972283780001685195054132145190967644812846483550988226527232;
    end else if (((blk_strm_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        blk_strm_din = zext_ln391_fu_508_p1;
    end else if (((blk_strm_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        blk_strm_din = zext_ln414_44_fu_401_p1;
    end else if ((~((blk_strm_full_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        blk_strm_din = zext_ln414_36_fu_308_p1;
    end else begin
        blk_strm_din = 'bx;
    end
end

always @ (*) begin
    if ((((blk_strm_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state4)) | ((blk_strm_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state3)) | ((blk_strm_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | (~((blk_strm_full_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
        blk_strm_write = 1'b1;
    end else begin
        blk_strm_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_my_switchEndian_fu_204_l = trunc_ln674_fu_406_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_my_switchEndian_fu_204_l = zext_ln1158_fu_313_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_my_switchEndian_fu_204_l = opad_buffer_V_0;
    end else begin
        grp_my_switchEndian_fu_204_l = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_my_switchEndian_fu_210_l = {{res_V_in[127:64]}};
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_my_switchEndian_fu_210_l = zext_ln1159_fu_322_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_my_switchEndian_fu_210_l = opad_buffer_V_1;
    end else begin
        grp_my_switchEndian_fu_210_l = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_my_switchEndian_fu_216_l = {{res_V_in[191:128]}};
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_my_switchEndian_fu_216_l = zext_ln1160_fu_331_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_my_switchEndian_fu_216_l = opad_buffer_V_2;
    end else begin
        grp_my_switchEndian_fu_216_l = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_my_switchEndian_fu_222_l = {{res_V_in[255:192]}};
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_my_switchEndian_fu_222_l = zext_ln1161_fu_340_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_my_switchEndian_fu_222_l = opad_buffer_V_3;
    end else begin
        grp_my_switchEndian_fu_222_l = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_my_switchEndian_fu_228_l = {{res_V_in[319:256]}};
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_my_switchEndian_fu_228_l = zext_ln1163_fu_349_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_my_switchEndian_fu_228_l = opad_buffer_V_4;
    end else begin
        grp_my_switchEndian_fu_228_l = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_my_switchEndian_fu_234_l = {{res_V_in[383:320]}};
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_my_switchEndian_fu_234_l = zext_ln1164_fu_358_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_my_switchEndian_fu_234_l = opad_buffer_V_5;
    end else begin
        grp_my_switchEndian_fu_234_l = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_my_switchEndian_fu_240_l = zext_ln1165_fu_367_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_my_switchEndian_fu_240_l = zext_ln1153_fu_274_p1;
    end else begin
        grp_my_switchEndian_fu_240_l = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_my_switchEndian_fu_245_l = zext_ln1166_fu_376_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_my_switchEndian_fu_245_l = zext_ln1154_fu_283_p1;
    end else begin
        grp_my_switchEndian_fu_245_l = 'bx;
    end
end

always @ (*) begin
    if (((blk_strm_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((blk_strm_full_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((blk_strm_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((blk_strm_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((blk_strm_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state1 = ((blk_strm_full_n == 1'b0) | (ap_done_reg == 1'b1) | (real_start == 1'b0));
end

assign ap_ready = internal_ap_ready;

assign p_Result_12_fu_381_p9 = {{{{{{{{grp_my_switchEndian_fu_245_ap_return}, {zext_ln414_43_fu_372_p1}}, {zext_ln414_42_fu_363_p1}}, {zext_ln414_41_fu_354_p1}}, {zext_ln414_40_fu_345_p1}}, {zext_ln414_39_fu_336_p1}}, {zext_ln414_38_fu_327_p1}}, {zext_ln414_37_fu_318_p1}};

assign p_Result_13_fu_490_p8 = {{{{{{{{{{{{64'd9223372036854775808}, {zext_ln414_50_fu_486_p1}}}, {zext_ln414_49_fu_471_p1}}}, {zext_ln414_48_fu_456_p1}}}, {zext_ln414_47_fu_441_p1}}}, {zext_ln414_46_fu_426_p1}}}, {zext_ln414_45_fu_411_p1}};

assign p_Result_s_fu_288_p9 = {{{{{{{{grp_my_switchEndian_fu_245_ap_return}, {zext_ln414_35_fu_279_p1}}, {zext_ln414_34_fu_270_p1}}, {zext_ln414_33_fu_266_p1}}, {zext_ln414_32_fu_262_p1}}, {zext_ln414_31_fu_258_p1}}, {zext_ln414_30_fu_254_p1}}, {zext_ln414_fu_250_p1}};

assign start_out = real_start;

assign trunc_ln674_fu_406_p1 = res_V_in[63:0];

assign zext_ln1153_fu_274_p1 = opad_buffer_V_6;

assign zext_ln1154_fu_283_p1 = opad_buffer_V_7;

assign zext_ln1158_fu_313_p1 = opad_buffer_V_8;

assign zext_ln1159_fu_322_p1 = opad_buffer_V_9;

assign zext_ln1160_fu_331_p1 = opad_buffer_V_10;

assign zext_ln1161_fu_340_p1 = opad_buffer_V_11;

assign zext_ln1163_fu_349_p1 = opad_buffer_V_12;

assign zext_ln1164_fu_358_p1 = opad_buffer_V_13;

assign zext_ln1165_fu_367_p1 = opad_buffer_V_14;

assign zext_ln1166_fu_376_p1 = opad_buffer_V_15;

assign zext_ln391_fu_508_p1 = p_Result_13_fu_490_p8;

assign zext_ln414_30_fu_254_p1 = grp_my_switchEndian_fu_210_ap_return;

assign zext_ln414_31_fu_258_p1 = grp_my_switchEndian_fu_216_ap_return;

assign zext_ln414_32_fu_262_p1 = grp_my_switchEndian_fu_222_ap_return;

assign zext_ln414_33_fu_266_p1 = grp_my_switchEndian_fu_228_ap_return;

assign zext_ln414_34_fu_270_p1 = grp_my_switchEndian_fu_234_ap_return;

assign zext_ln414_35_fu_279_p1 = grp_my_switchEndian_fu_240_ap_return;

assign zext_ln414_36_fu_308_p1 = p_Result_s_fu_288_p9;

assign zext_ln414_37_fu_318_p1 = grp_my_switchEndian_fu_204_ap_return;

assign zext_ln414_38_fu_327_p1 = grp_my_switchEndian_fu_210_ap_return;

assign zext_ln414_39_fu_336_p1 = grp_my_switchEndian_fu_216_ap_return;

assign zext_ln414_40_fu_345_p1 = grp_my_switchEndian_fu_222_ap_return;

assign zext_ln414_41_fu_354_p1 = grp_my_switchEndian_fu_228_ap_return;

assign zext_ln414_42_fu_363_p1 = grp_my_switchEndian_fu_234_ap_return;

assign zext_ln414_43_fu_372_p1 = grp_my_switchEndian_fu_240_ap_return;

assign zext_ln414_44_fu_401_p1 = p_Result_12_fu_381_p9;

assign zext_ln414_45_fu_411_p1 = grp_my_switchEndian_fu_204_ap_return;

assign zext_ln414_46_fu_426_p1 = grp_my_switchEndian_fu_210_ap_return;

assign zext_ln414_47_fu_441_p1 = grp_my_switchEndian_fu_216_ap_return;

assign zext_ln414_48_fu_456_p1 = grp_my_switchEndian_fu_222_ap_return;

assign zext_ln414_49_fu_471_p1 = grp_my_switchEndian_fu_228_ap_return;

assign zext_ln414_50_fu_486_p1 = grp_my_switchEndian_fu_234_ap_return;

assign zext_ln414_fu_250_p1 = grp_my_switchEndian_fu_204_ap_return;

endmodule //hmac_preProcessingOneTripForHMAC_225
