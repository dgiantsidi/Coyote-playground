// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module hmac_preProcessingOneTripForHMAC23_Pipeline_VITIS_LOOP_1059_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        len_strm2_dout,
        len_strm2_num_data_valid,
        len_strm2_fifo_cap,
        len_strm2_empty_n,
        len_strm2_read,
        blk_strm1_din,
        blk_strm1_num_data_valid,
        blk_strm1_fifo_cap,
        blk_strm1_full_n,
        blk_strm1_write,
        msg_key_strm1_dout,
        msg_key_strm1_num_data_valid,
        msg_key_strm1_fifo_cap,
        msg_key_strm1_empty_n,
        msg_key_strm1_read,
        tmp_5,
        tmp_10,
        tmp_11,
        tmp_len_V_1,
        zext_ln873,
        bigHUH_V_out,
        bigHUH_V_out_ap_vld,
        HUH_V_in_in_out,
        HUH_V_in_in_out_ap_vld,
        tmp_len_V_4_out,
        tmp_len_V_4_out_ap_vld,
        total_len_V_1_out,
        total_len_V_1_out_ap_vld,
        counter_V_out,
        counter_V_out_ap_vld,
        zext_ln878_out,
        zext_ln878_out_ap_vld,
        grp_my_switchEndian_fu_377_p_din1,
        grp_my_switchEndian_fu_377_p_dout0,
        grp_my_switchEndian_fu_377_p_ready,
        grp_my_switchEndian_fu_382_p_din1,
        grp_my_switchEndian_fu_382_p_dout0,
        grp_my_switchEndian_fu_382_p_ready,
        grp_my_switchEndian_fu_387_p_din1,
        grp_my_switchEndian_fu_387_p_dout0,
        grp_my_switchEndian_fu_387_p_ready,
        grp_my_switchEndian_fu_392_p_din1,
        grp_my_switchEndian_fu_392_p_dout0,
        grp_my_switchEndian_fu_392_p_ready,
        grp_my_switchEndian_fu_397_p_din1,
        grp_my_switchEndian_fu_397_p_dout0,
        grp_my_switchEndian_fu_397_p_ready,
        grp_my_switchEndian_fu_402_p_din1,
        grp_my_switchEndian_fu_402_p_dout0,
        grp_my_switchEndian_fu_402_p_ready,
        op_V_10_my_switchEndian_fu_407_p_din1,
        op_V_10_my_switchEndian_fu_407_p_dout0,
        op_V_10_my_switchEndian_fu_407_p_ready
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [39:0] len_strm2_dout;
input  [5:0] len_strm2_num_data_valid;
input  [5:0] len_strm2_fifo_cap;
input   len_strm2_empty_n;
output   len_strm2_read;
output  [519:0] blk_strm1_din;
input  [5:0] blk_strm1_num_data_valid;
input  [5:0] blk_strm1_fifo_cap;
input   blk_strm1_full_n;
output   blk_strm1_write;
input  [511:0] msg_key_strm1_dout;
input  [5:0] msg_key_strm1_num_data_valid;
input  [5:0] msg_key_strm1_fifo_cap;
input   msg_key_strm1_empty_n;
output   msg_key_strm1_read;
input  [515:0] tmp_5;
input  [511:0] tmp_10;
input  [34:0] tmp_11;
input  [4:0] tmp_len_V_1;
input  [7:0] zext_ln873;
output  [383:0] bigHUH_V_out;
output   bigHUH_V_out_ap_vld;
output  [34:0] HUH_V_in_in_out;
output   HUH_V_in_in_out_ap_vld;
output  [3:0] tmp_len_V_4_out;
output   tmp_len_V_4_out_ap_vld;
output  [124:0] total_len_V_1_out;
output   total_len_V_1_out_ap_vld;
output  [3:0] counter_V_out;
output   counter_V_out_ap_vld;
output  [518:0] zext_ln878_out;
output   zext_ln878_out_ap_vld;
output  [63:0] grp_my_switchEndian_fu_377_p_din1;
input  [63:0] grp_my_switchEndian_fu_377_p_dout0;
input   grp_my_switchEndian_fu_377_p_ready;
output  [63:0] grp_my_switchEndian_fu_382_p_din1;
input  [63:0] grp_my_switchEndian_fu_382_p_dout0;
input   grp_my_switchEndian_fu_382_p_ready;
output  [63:0] grp_my_switchEndian_fu_387_p_din1;
input  [63:0] grp_my_switchEndian_fu_387_p_dout0;
input   grp_my_switchEndian_fu_387_p_ready;
output  [63:0] grp_my_switchEndian_fu_392_p_din1;
input  [63:0] grp_my_switchEndian_fu_392_p_dout0;
input   grp_my_switchEndian_fu_392_p_ready;
output  [63:0] grp_my_switchEndian_fu_397_p_din1;
input  [63:0] grp_my_switchEndian_fu_397_p_dout0;
input   grp_my_switchEndian_fu_397_p_ready;
output  [63:0] grp_my_switchEndian_fu_402_p_din1;
input  [63:0] grp_my_switchEndian_fu_402_p_dout0;
input   grp_my_switchEndian_fu_402_p_ready;
output  [63:0] op_V_10_my_switchEndian_fu_407_p_din1;
input  [63:0] op_V_10_my_switchEndian_fu_407_p_dout0;
input   op_V_10_my_switchEndian_fu_407_p_ready;

reg ap_idle;
reg len_strm2_read;
reg blk_strm1_write;
reg msg_key_strm1_read;
reg bigHUH_V_out_ap_vld;
reg HUH_V_in_in_out_ap_vld;
reg tmp_len_V_4_out_ap_vld;
reg total_len_V_1_out_ap_vld;
reg counter_V_out_ap_vld;
reg zext_ln878_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire   [0:0] tmp_fu_340_p3;
reg    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] tmp_reg_652;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    blk_strm1_blk_n;
wire    ap_block_pp0_stage0;
reg    msg_key_strm1_blk_n;
reg    len_strm2_blk_n;
reg   [4:0] tmp_len_V_2_reg_642;
reg    ap_block_pp0_stage0_11001;
wire   [3:0] trunc_ln878_1_fu_336_p1;
reg   [3:0] trunc_ln878_1_reg_647;
wire    op_V_s_my_switchEndian_fu_251_ap_ready;
wire   [63:0] op_V_s_my_switchEndian_fu_251_l;
wire   [63:0] op_V_s_my_switchEndian_fu_251_ap_return;
wire   [63:0] trunc_ln674_fu_468_p1;
reg   [3:0] counter_V_fu_136;
wire   [3:0] counter_V_1_fu_351_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_counter_V_load;
reg   [127:0] total_len_V_fu_140;
wire   [127:0] total_len_V_2_fu_570_p2;
wire   [127:0] zext_ln873_cast_fu_291_p1;
reg   [4:0] p_Val2_s_fu_144;
reg   [4:0] ap_sig_allocacmp_tmp_len_V_2;
reg   [34:0] HUH_V_in_in_fu_148;
wire   [34:0] trunc_ln155_fu_357_p1;
reg   [511:0] p_Val2_1_fu_152;
reg   [518:0] p_Val2_2_fu_156;
wire   [518:0] tmp_2_fu_537_p9;
wire   [518:0] tmp_5_cast_cast_fu_299_p1;
reg    ap_block_pp0_stage0_01001;
wire  signed [516:0] tmp_5_cast_fu_295_p1;
wire   [519:0] zext_ln878_fu_406_p1;
wire   [64:0] zext_ln414_fu_421_p1;
wire   [64:0] zext_ln414_7_fu_533_p1;
wire   [64:0] zext_ln414_6_fu_518_p1;
wire   [64:0] zext_ln414_5_fu_503_p1;
wire   [64:0] zext_ln414_4_fu_488_p1;
wire   [64:0] zext_ln414_3_fu_473_p1;
wire   [64:0] zext_ln414_2_fu_464_p1;
wire   [64:0] zext_ln414_1_fu_449_p1;
wire   [6:0] zext_ln886_fu_557_p1;
wire   [6:0] add_ln886_fu_560_p2;
wire   [127:0] zext_ln886_1_fu_566_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

hmac_my_switchEndian op_V_s_my_switchEndian_fu_251(
    .ap_ready(op_V_s_my_switchEndian_fu_251_ap_ready),
    .l(op_V_s_my_switchEndian_fu_251_l),
    .ap_return(op_V_s_my_switchEndian_fu_251_ap_return)
);

hmac_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((tmp_fu_340_p3 == 1'd0) & (ap_start_int == 1'b1))) begin
            HUH_V_in_in_fu_148 <= trunc_ln155_fu_357_p1;
        end else if ((ap_loop_init == 1'b1)) begin
            HUH_V_in_in_fu_148 <= tmp_11;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        if (((ap_loop_exit_ready == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_11001)) begin
            ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((tmp_fu_340_p3 == 1'd0) & (ap_start_int == 1'b1))) begin
            counter_V_fu_136 <= counter_V_1_fu_351_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            counter_V_fu_136 <= 4'd7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            p_Val2_1_fu_152 <= tmp_10;
        end else if (((tmp_reg_652 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            p_Val2_1_fu_152 <= msg_key_strm1_dout;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            p_Val2_2_fu_156 <= tmp_5_cast_cast_fu_299_p1;
        end else if (((tmp_reg_652 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            p_Val2_2_fu_156 <= tmp_2_fu_537_p9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((tmp_fu_340_p3 == 1'd0) & (ap_start_int == 1'b1))) begin
            p_Val2_s_fu_144 <= {{len_strm2_dout[29:25]}};
        end else if ((ap_loop_init == 1'b1)) begin
            p_Val2_s_fu_144 <= tmp_len_V_1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            total_len_V_fu_140 <= zext_ln873_cast_fu_291_p1;
        end else if (((tmp_reg_652 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            total_len_V_fu_140 <= total_len_V_2_fu_570_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_len_V_2_reg_642 <= ap_sig_allocacmp_tmp_len_V_2;
        tmp_reg_652 <= ap_sig_allocacmp_tmp_len_V_2[32'd4];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trunc_ln878_1_reg_647 <= trunc_ln878_1_fu_336_p1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_reg_652 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        HUH_V_in_in_out_ap_vld = 1'b1;
    end else begin
        HUH_V_in_in_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (tmp_fu_340_p3 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_counter_V_load = 4'd7;
    end else begin
        ap_sig_allocacmp_counter_V_load = counter_V_fu_136;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_tmp_len_V_2 = tmp_len_V_1;
    end else begin
        ap_sig_allocacmp_tmp_len_V_2 = p_Val2_s_fu_144;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_reg_652 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bigHUH_V_out_ap_vld = 1'b1;
    end else begin
        bigHUH_V_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (tmp_reg_652 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        blk_strm1_blk_n = blk_strm1_full_n;
    end else begin
        blk_strm1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_reg_652 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        blk_strm1_write = 1'b1;
    end else begin
        blk_strm1_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_reg_652 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        counter_V_out_ap_vld = 1'b1;
    end else begin
        counter_V_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (tmp_fu_340_p3 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        len_strm2_blk_n = len_strm2_empty_n;
    end else begin
        len_strm2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_fu_340_p3 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        len_strm2_read = 1'b1;
    end else begin
        len_strm2_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (tmp_reg_652 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        msg_key_strm1_blk_n = msg_key_strm1_empty_n;
    end else begin
        msg_key_strm1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_reg_652 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        msg_key_strm1_read = 1'b1;
    end else begin
        msg_key_strm1_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_reg_652 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_len_V_4_out_ap_vld = 1'b1;
    end else begin
        tmp_len_V_4_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_reg_652 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        total_len_V_1_out_ap_vld = 1'b1;
    end else begin
        total_len_V_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_reg_652 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zext_ln878_out_ap_vld = 1'b1;
    end else begin
        zext_ln878_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign HUH_V_in_in_out = HUH_V_in_in_fu_148;

assign add_ln886_fu_560_p2 = (zext_ln886_fu_557_p1 + 7'd56);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (((msg_key_strm1_empty_n == 1'b0) & (tmp_reg_652 == 1'd0)) | ((tmp_reg_652 == 1'd0) & (blk_strm1_full_n == 1'b0)))) | ((tmp_fu_340_p3 == 1'd0) & (len_strm2_empty_n == 1'b0) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (((msg_key_strm1_empty_n == 1'b0) & (tmp_reg_652 == 1'd0)) | ((tmp_reg_652 == 1'd0) & (blk_strm1_full_n == 1'b0)))) | ((tmp_fu_340_p3 == 1'd0) & (len_strm2_empty_n == 1'b0) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & (((msg_key_strm1_empty_n == 1'b0) & (tmp_reg_652 == 1'd0)) | ((tmp_reg_652 == 1'd0) & (blk_strm1_full_n == 1'b0)))) | ((tmp_fu_340_p3 == 1'd0) & (len_strm2_empty_n == 1'b0) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((tmp_fu_340_p3 == 1'd0) & (len_strm2_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (((msg_key_strm1_empty_n == 1'b0) & (tmp_reg_652 == 1'd0)) | ((tmp_reg_652 == 1'd0) & (blk_strm1_full_n == 1'b0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign bigHUH_V_out = p_Val2_1_fu_152[383:0];

assign blk_strm1_din = {{zext_ln414_fu_421_p1}, {zext_ln878_fu_406_p1[454:0]}};

assign counter_V_1_fu_351_p2 = (ap_sig_allocacmp_counter_V_load ^ 4'd8);

assign counter_V_out = counter_V_fu_136;

assign grp_my_switchEndian_fu_377_p_din1 = {{p_Val2_1_fu_152[447:384]}};

assign grp_my_switchEndian_fu_382_p_din1 = {{p_Val2_1_fu_152[511:448]}};

assign grp_my_switchEndian_fu_387_p_din1 = trunc_ln674_fu_468_p1;

assign grp_my_switchEndian_fu_392_p_din1 = {{msg_key_strm1_dout[127:64]}};

assign grp_my_switchEndian_fu_397_p_din1 = {{msg_key_strm1_dout[191:128]}};

assign grp_my_switchEndian_fu_402_p_din1 = {{msg_key_strm1_dout[255:192]}};

assign op_V_10_my_switchEndian_fu_407_p_din1 = {{msg_key_strm1_dout[319:256]}};

assign op_V_s_my_switchEndian_fu_251_l = {{p_Val2_1_fu_152[383:320]}};

assign tmp_2_fu_537_p9 = {{{{{{{{op_V_s_my_switchEndian_fu_251_ap_return}, {zext_ln414_7_fu_533_p1}}, {zext_ln414_6_fu_518_p1}}, {zext_ln414_5_fu_503_p1}}, {zext_ln414_4_fu_488_p1}}, {zext_ln414_3_fu_473_p1}}, {zext_ln414_2_fu_464_p1}}, {zext_ln414_1_fu_449_p1}};

assign tmp_5_cast_cast_fu_299_p1 = $unsigned(tmp_5_cast_fu_295_p1);

assign tmp_5_cast_fu_295_p1 = $signed(tmp_5);

assign tmp_fu_340_p3 = ap_sig_allocacmp_tmp_len_V_2[32'd4];

assign tmp_len_V_4_out = trunc_ln878_1_reg_647;

assign total_len_V_1_out = total_len_V_fu_140[124:0];

assign total_len_V_2_fu_570_p2 = (total_len_V_fu_140 + zext_ln886_1_fu_566_p1);

assign trunc_ln155_fu_357_p1 = len_strm2_dout[34:0];

assign trunc_ln674_fu_468_p1 = msg_key_strm1_dout[63:0];

assign trunc_ln878_1_fu_336_p1 = ap_sig_allocacmp_tmp_len_V_2[3:0];

assign zext_ln414_1_fu_449_p1 = grp_my_switchEndian_fu_377_p_dout0;

assign zext_ln414_2_fu_464_p1 = grp_my_switchEndian_fu_382_p_dout0;

assign zext_ln414_3_fu_473_p1 = grp_my_switchEndian_fu_387_p_dout0;

assign zext_ln414_4_fu_488_p1 = grp_my_switchEndian_fu_392_p_dout0;

assign zext_ln414_5_fu_503_p1 = grp_my_switchEndian_fu_397_p_dout0;

assign zext_ln414_6_fu_518_p1 = grp_my_switchEndian_fu_402_p_dout0;

assign zext_ln414_7_fu_533_p1 = op_V_10_my_switchEndian_fu_407_p_dout0;

assign zext_ln414_fu_421_p1 = op_V_s_my_switchEndian_fu_251_ap_return;

assign zext_ln873_cast_fu_291_p1 = zext_ln873;

assign zext_ln878_fu_406_p1 = p_Val2_2_fu_156;

assign zext_ln878_out = p_Val2_2_fu_156;

assign zext_ln886_1_fu_566_p1 = add_ln886_fu_560_p2;

assign zext_ln886_fu_557_p1 = tmp_len_V_2_reg_642;

endmodule //hmac_preProcessingOneTripForHMAC23_Pipeline_VITIS_LOOP_1059_1
