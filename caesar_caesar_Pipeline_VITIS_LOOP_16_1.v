// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module caesar_caesar_Pipeline_VITIS_LOOP_16_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_TDATA,
        input_r_TVALID,
        input_r_TREADY,
        copy_din,
        copy_full_n,
        copy_write,
        output_r_TDATA,
        output_r_TVALID,
        output_r_TREADY
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [583:0] input_r_TDATA;
input   input_r_TVALID;
output   input_r_TREADY;
output  [582:0] copy_din;
input   copy_full_n;
output   copy_write;
output  [583:0] output_r_TDATA;
output   output_r_TVALID;
input   output_r_TREADY;

reg ap_idle;
reg input_r_TREADY;
reg copy_write;
reg output_r_TVALID;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    ap_CS_fsm_state2;
wire    ap_block_state2_pp0_stage1_iter0;
wire   [0:0] tmp_s_nbreadreq_fu_86_p3;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [31:0] cnt;
reg    input_r_TDATA_blk_n;
reg    copy_blk_n;
reg    output_r_TDATA_blk_n;
wire   [31:0] add_ln28_fu_106_p2;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] tmp_2_fu_94_p3;
wire   [69:0] tmp_fu_118_p4;
wire   [584:0] tmp3_fu_128_p5;
wire   [584:0] or_ln174_fu_140_p2;
wire   [0:0] tmp_3_fu_146_p3;
wire   [69:0] tmp_1_fu_154_p4;
wire   [582:0] tmp5_fu_164_p4;
wire   [581:0] trunc_ln174_fu_181_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_start_int;
wire    ap_loop_init;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 cnt = 32'd0;
#0 ap_done_reg = 1'b0;
end

caesar_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((output_r_TREADY == 1'b0) | (copy_full_n == 1'b0) | (input_r_TVALID == 1'b0) | (ap_start_int == 1'b0)) & (tmp_2_fu_94_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        cnt <= add_ln28_fu_106_p2;
    end
end

always @ (*) begin
    if (((output_r_TREADY == 1'b0) | (copy_full_n == 1'b0) | (input_r_TVALID == 1'b0) | (ap_start_int == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if (((tmp_s_nbreadreq_fu_86_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        copy_blk_n = copy_full_n;
    end else begin
        copy_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((output_r_TREADY == 1'b0) | (copy_full_n == 1'b0) | (input_r_TVALID == 1'b0) | (ap_start_int == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        copy_write = 1'b1;
    end else begin
        copy_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        input_r_TDATA_blk_n = input_r_TVALID;
    end else begin
        input_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((output_r_TREADY == 1'b0) | (copy_full_n == 1'b0) | (input_r_TVALID == 1'b0) | (ap_start_int == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        input_r_TREADY = 1'b1;
    end else begin
        input_r_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        output_r_TDATA_blk_n = output_r_TREADY;
    end else begin
        output_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((output_r_TREADY == 1'b0) | (copy_full_n == 1'b0) | (input_r_TVALID == 1'b0) | (ap_start_int == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        output_r_TVALID = 1'b1;
    end else begin
        output_r_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((output_r_TREADY == 1'b0) | (copy_full_n == 1'b0) | (input_r_TVALID == 1'b0) | (ap_start_int == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln28_fu_106_p2 = (cnt + 32'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((output_r_TREADY == 1'b0) | (copy_full_n == 1'b0) | (input_r_TVALID == 1'b0) | (ap_start_int == 1'b0));
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign copy_din = (tmp5_fu_164_p4 | 583'd3364890697558373580437501175635850872038996860073006805552799680124497765578934457738251236782555894447883581603156722243481885637957033063527116003541505);

assign or_ln174_fu_140_p2 = (tmp3_fu_128_p5 | 585'd3364890697558373580437501175635850872038996860073006805552799680124497765578934457738251236782555894447883581603156722243481885637957033063527116003541505);

assign output_r_TDATA = trunc_ln174_fu_181_p1;

assign tmp3_fu_128_p5 = {{{{tmp_2_fu_94_p3}, {2'd0}}, {tmp_fu_118_p4}}, {512'd0}};

assign tmp5_fu_164_p4 = {{{tmp_3_fu_146_p3}, {tmp_1_fu_154_p4}}, {512'd0}};

assign tmp_1_fu_154_p4 = {{or_ln174_fu_140_p2[581:512]}};

assign tmp_2_fu_94_p3 = input_r_TDATA[32'd582];

assign tmp_3_fu_146_p3 = or_ln174_fu_140_p2[32'd584];

assign tmp_fu_118_p4 = {{input_r_TDATA[581:512]}};

assign tmp_s_nbreadreq_fu_86_p3 = input_r_TVALID;

assign trunc_ln174_fu_181_p1 = input_r_TDATA[581:0];

endmodule //caesar_caesar_Pipeline_VITIS_LOOP_16_1
